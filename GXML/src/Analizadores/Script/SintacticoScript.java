
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 24 21:52:10 CST 2019
//----------------------------------------------------

package Analizadores.Script;

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 24 21:52:10 CST 2019
  */
public class SintacticoScript extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoScript() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoScript(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoScript(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\004\000\002\014" +
    "\002\000\002\014\003\000\002\015\004\000\002\015\003" +
    "\000\002\016\007\000\002\031\002\000\002\031\003\000" +
    "\002\032\004\000\002\032\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\003\006\000" +
    "\002\003\011\000\002\011\002\000\002\011\003\000\002" +
    "\061\005\000\002\061\003\000\002\062\005\000\002\004" +
    "\005\000\002\004\003\000\002\010\005\000\002\007\005" +
    "\000\002\007\003\000\002\005\002\000\002\005\004\000" +
    "\002\017\003\000\002\027\004\000\002\013\006\000\002" +
    "\012\002\000\002\012\003\000\002\030\002\000\002\030" +
    "\003\000\002\034\004\000\002\034\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\057\005\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\044\012\000\002\045\002\000" +
    "\002\045\003\000\002\046\005\000\002\046\003\000\002" +
    "\023\011\000\002\024\002\000\002\024\003\000\002\025" +
    "\004\000\002\025\003\000\002\026\006\000\002\026\005" +
    "\000\002\036\012\000\002\037\003\000\002\037\004\000" +
    "\002\041\004\000\002\041\003\000\002\042\012\000\002" +
    "\040\002\000\002\040\003\000\002\043\006\000\002\020" +
    "\005\000\002\020\005\000\002\020\004\000\002\020\003" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\063\004\000\002\063\004\000\002" +
    "\051\005\000\002\051\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\053\004\000\002\054\004" +
    "\000\002\054\003\000\002\055\005\000\002\047\006\000" +
    "\002\050\002\000\002\050\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\122\002\uffff\030\uffff\031\uffff\032\007\033" +
    "\uffff\034\uffff\037\uffff\040\uffff\042\uffff\043\uffff\044\uffff" +
    "\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053" +
    "\uffff\054\uffff\055\uffff\056\uffff\076\uffff\077\uffff\100\uffff" +
    "\101\uffff\102\uffff\103\uffff\104\uffff\105\uffff\106\uffff\107" +
    "\uffff\110\uffff\111\uffff\112\uffff\113\uffff\114\uffff\115\uffff" +
    "\116\uffff\117\uffff\120\uffff\001\002\000\120\002\ufffa\030" +
    "\053\031\024\033\032\034\102\037\075\040\044\042\055" +
    "\043\074\044\042\045\043\046\057\047\022\050\066\051" +
    "\040\052\071\053\031\054\051\055\050\056\054\076\046" +
    "\077\036\100\017\101\072\102\034\103\026\104\067\105" +
    "\077\106\052\107\101\110\060\111\064\112\020\113\103" +
    "\114\104\115\033\116\041\117\047\120\021\001\002\000" +
    "\122\002\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\037\ufffc\040\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102" +
    "\ufffc\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc" +
    "\111\ufffc\112\ufffc\113\ufffc\114\ufffc\115\ufffc\116\ufffc\117" +
    "\ufffc\120\ufffc\001\002\000\004\002\016\001\002\000\004" +
    "\064\012\001\002\000\122\002\ufffe\030\ufffe\031\ufffe\032" +
    "\007\033\ufffe\034\ufffe\037\ufffe\040\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\076\ufffe\077\ufffe" +
    "\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106" +
    "\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe\113\ufffe\114\ufffe" +
    "\115\ufffe\116\ufffe\117\ufffe\120\ufffe\001\002\000\122\002" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\037\ufffd" +
    "\040\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\103" +
    "\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd" +
    "\112\ufffd\113\ufffd\114\ufffd\115\ufffd\116\ufffd\117\ufffd\120" +
    "\ufffd\001\002\000\004\072\013\001\002\000\004\065\014" +
    "\001\002\000\004\057\015\001\002\000\122\002\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\037\ufffb\040\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104" +
    "\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb" +
    "\113\ufffb\114\ufffb\115\ufffb\116\ufffb\117\ufffb\120\ufffb\001" +
    "\002\000\004\002\001\001\002\000\004\064\uff81\001\002" +
    "\000\004\064\uff77\001\002\000\004\064\uff71\001\002\000" +
    "\004\064\uff8a\001\002\000\004\002\000\001\002\000\004" +
    "\064\345\001\002\000\004\057\344\001\002\000\004\064" +
    "\uff7e\001\002\000\120\002\ufff3\030\ufff3\031\ufff3\033\ufff3" +
    "\034\ufff3\037\ufff3\040\ufff3\042\ufff3\043\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\076\ufff3\077\ufff3\100\ufff3\101" +
    "\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3" +
    "\110\ufff3\111\ufff3\112\ufff3\113\ufff3\114\ufff3\115\ufff3\116" +
    "\ufff3\117\ufff3\120\ufff3\001\002\000\120\002\ufff5\030\ufff5" +
    "\031\ufff5\033\ufff5\034\ufff5\037\ufff5\040\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5" +
    "\106\ufff5\107\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\114" +
    "\ufff5\115\ufff5\116\ufff5\117\ufff5\120\ufff5\001\002\000\004" +
    "\064\uff84\001\002\000\130\002\uffde\030\uffde\031\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\067\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103" +
    "\uffde\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde" +
    "\112\uffde\113\uffde\114\uffde\115\uffde\116\uffde\117\uffde\120" +
    "\uffde\001\002\000\004\064\uff74\001\002\000\004\064\uff7f" +
    "\001\002\000\070\004\uff97\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025" +
    "\uff97\026\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97" +
    "\065\uff97\067\uff97\071\uff97\001\002\000\004\064\uff82\001" +
    "\002\000\120\002\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7" +
    "\037\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102" +
    "\ufff7\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7" +
    "\111\ufff7\112\ufff7\113\ufff7\114\ufff7\115\ufff7\116\ufff7\117" +
    "\ufff7\120\ufff7\001\002\000\004\064\uff86\001\002\000\004" +
    "\064\uff73\001\002\000\004\064\uff8e\001\002\000\004\064" +
    "\uff8c\001\002\000\004\064\314\001\002\000\070\004\uff99" +
    "\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013" +
    "\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99" +
    "\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\065\uff99\067\uff99\071\uff99" +
    "\001\002\000\074\004\uff98\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98" +
    "\064\uff70\065\uff98\067\uff98\070\306\071\uff98\001\002\000" +
    "\004\064\uff72\001\002\000\004\064\uff87\001\002\000\004" +
    "\064\uff88\001\002\000\004\064\uff7b\001\002\000\004\076" +
    "\263\001\002\000\004\064\uff83\001\002\000\004\076\250" +
    "\001\002\000\004\057\247\001\002\000\004\064\uff8b\001" +
    "\002\000\004\064\uff79\001\002\000\120\002\ufff4\030\ufff4" +
    "\031\ufff4\033\ufff4\034\ufff4\037\ufff4\040\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\076\ufff4\077" +
    "\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4\105\ufff4" +
    "\106\ufff4\107\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4\114" +
    "\ufff4\115\ufff4\116\ufff4\117\ufff4\120\ufff4\001\002\000\004" +
    "\064\240\001\002\000\120\002\ufff6\030\ufff6\031\ufff6\033" +
    "\ufff6\034\ufff6\037\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\076\ufff6\077\ufff6\100\ufff6" +
    "\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6\107" +
    "\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\114\ufff6\115\ufff6" +
    "\116\ufff6\117\ufff6\120\ufff6\001\002\000\004\064\uff78\001" +
    "\002\000\122\002\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2" +
    "\037\ufff2\040\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\057\237\076\ufff2\077\ufff2\100\ufff2\101" +
    "\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2" +
    "\110\ufff2\111\ufff2\112\ufff2\113\ufff2\114\ufff2\115\ufff2\116" +
    "\ufff2\117\ufff2\120\ufff2\001\002\000\004\064\uff89\001\002" +
    "\000\004\064\uff7d\001\002\000\020\004\201\005\203\006" +
    "\206\007\205\057\236\061\133\063\202\001\002\000\004" +
    "\064\uff85\001\002\000\004\064\uff80\001\002\000\070\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\057\uff96" +
    "\060\uff96\061\uff96\062\uff96\063\uff96\065\uff96\067\uff96\071" +
    "\uff96\001\002\000\004\064\uff8d\001\002\000\120\011\114" +
    "\027\121\043\074\044\042\045\043\046\057\047\022\050" +
    "\066\051\040\052\071\053\031\054\051\055\050\056\054" +
    "\064\123\072\120\073\116\074\122\075\115\076\046\077" +
    "\036\100\017\101\072\102\034\103\026\104\067\105\077" +
    "\106\052\107\101\110\060\111\064\112\020\113\103\114" +
    "\104\115\033\116\041\117\047\120\021\121\111\001\002" +
    "\000\004\057\234\001\002\000\004\064\uff7c\001\002\000" +
    "\120\002\ufff9\030\053\031\024\033\032\034\102\037\075" +
    "\040\044\042\055\043\074\044\042\045\043\046\057\047" +
    "\022\050\066\051\040\052\071\053\031\054\051\055\050" +
    "\056\054\076\046\077\036\100\017\101\072\102\034\103" +
    "\026\104\067\105\077\106\052\107\101\110\060\111\064" +
    "\112\020\113\103\114\104\115\033\116\041\117\047\120" +
    "\021\001\002\000\004\064\uff7a\001\002\000\004\064\105" +
    "\001\002\000\004\064\uff76\001\002\000\004\064\uff75\001" +
    "\002\000\120\011\114\027\121\043\074\044\042\045\043" +
    "\046\057\047\022\050\066\051\040\052\071\053\031\054" +
    "\051\055\050\056\054\064\123\072\120\073\116\074\122" +
    "\075\115\076\046\077\036\100\017\101\072\102\034\103" +
    "\026\104\067\105\077\106\052\107\101\110\060\111\064" +
    "\112\020\113\103\114\104\115\033\116\041\117\047\120" +
    "\021\121\111\001\002\000\054\010\uff9e\011\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\057\uff9e" +
    "\060\uff9e\062\uff9e\065\uff9e\067\uff9e\071\uff9e\001\002\000" +
    "\020\025\uffae\026\uffae\057\uffae\060\uffae\065\uffae\067\uffae" +
    "\071\uffae\001\002\000\054\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f" +
    "\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\057\uff9f\060" +
    "\uff9f\062\uff9f\065\uff9f\067\uff9f\071\uff9f\001\002\000\054" +
    "\010\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\016" +
    "\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b" +
    "\025\uff6b\026\uff6b\057\uff6b\060\uff6b\062\uff6b\065\uff6b\067" +
    "\uff6b\071\uff6b\001\002\000\052\010\137\011\141\012\136" +
    "\013\144\014\143\015\142\016\140\017\220\020\222\021" +
    "\221\022\217\023\223\024\224\025\uffa7\026\uffa7\057\uffa7" +
    "\060\uffa7\065\uffa7\067\uffa7\071\uffa7\001\002\000\010\025" +
    "\126\026\127\065\152\001\002\000\116\011\114\043\074" +
    "\044\042\045\043\046\057\047\022\050\066\051\040\052" +
    "\071\053\031\054\051\055\050\056\054\064\123\072\120" +
    "\073\116\074\122\075\115\076\046\077\036\100\017\101" +
    "\072\102\034\103\026\104\067\105\077\106\052\107\101" +
    "\110\060\111\064\112\020\113\103\114\104\115\033\116" +
    "\041\117\047\120\021\121\111\001\002\000\054\010\uff6e" +
    "\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017" +
    "\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e" +
    "\026\uff6e\057\uff6e\060\uff6e\062\uff6e\065\uff6e\067\uff6e\071" +
    "\uff6e\001\002\000\054\010\uff6d\011\uff6d\012\uff6d\013\uff6d" +
    "\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022" +
    "\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\057\uff6d\060\uff6d" +
    "\062\uff6d\065\uff6d\067\uff6d\071\uff6d\001\002\000\056\010" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\057\uff9d\060\uff9d\061\133\062\uff9d\065\uff9d" +
    "\067\uff9d\071\uff9d\001\002\000\054\010\uff6f\011\uff6f\012" +
    "\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f" +
    "\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\057" +
    "\uff6f\060\uff6f\062\uff6f\065\uff6f\067\uff6f\071\uff6f\001\002" +
    "\000\120\011\114\027\121\043\074\044\042\045\043\046" +
    "\057\047\022\050\066\051\040\052\071\053\031\054\051" +
    "\055\050\056\054\064\123\072\120\073\116\074\122\075" +
    "\115\076\046\077\036\100\017\101\072\102\034\103\026" +
    "\104\067\105\077\106\052\107\101\110\060\111\064\112" +
    "\020\113\103\114\104\115\033\116\041\117\047\120\021" +
    "\121\111\001\002\000\054\010\uff6c\011\uff6c\012\uff6c\013" +
    "\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\057\uff6c\060" +
    "\uff6c\062\uff6c\065\uff6c\067\uff6c\071\uff6c\001\002\000\120" +
    "\011\114\027\121\043\074\044\042\045\043\046\057\047" +
    "\022\050\066\051\040\052\071\053\031\054\051\055\050" +
    "\056\054\064\123\072\120\073\116\074\122\075\115\076" +
    "\046\077\036\100\017\101\072\102\034\103\026\104\067" +
    "\105\077\106\052\107\101\110\060\111\064\112\020\113" +
    "\103\114\104\115\033\116\041\117\047\120\021\121\111" +
    "\001\002\000\010\025\126\026\127\065\125\001\002\000" +
    "\054\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1" +
    "\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024" +
    "\uffa1\025\uffa1\026\uffa1\057\uffa1\060\uffa1\062\uffa1\065\uffa1" +
    "\067\uffa1\071\uffa1\001\002\000\120\011\114\027\121\043" +
    "\074\044\042\045\043\046\057\047\022\050\066\051\040" +
    "\052\071\053\031\054\051\055\050\056\054\064\123\072" +
    "\120\073\116\074\122\075\115\076\046\077\036\100\017" +
    "\101\072\102\034\103\026\104\067\105\077\106\052\107" +
    "\101\110\060\111\064\112\020\113\103\114\104\115\033" +
    "\116\041\117\047\120\021\121\111\001\002\000\120\011" +
    "\114\027\121\043\074\044\042\045\043\046\057\047\022" +
    "\050\066\051\040\052\071\053\031\054\051\055\050\056" +
    "\054\064\123\072\120\073\116\074\122\075\115\076\046" +
    "\077\036\100\017\101\072\102\034\103\026\104\067\105" +
    "\077\106\052\107\101\110\060\111\064\112\020\113\103" +
    "\114\104\115\033\116\041\117\047\120\021\121\111\001" +
    "\002\000\020\025\126\026\uffb0\057\uffb0\060\uffb0\065\uffb0" +
    "\067\uffb0\071\uffb0\001\002\000\020\025\uffb1\026\uffb1\057" +
    "\uffb1\060\uffb1\065\uffb1\067\uffb1\071\uffb1\001\002\000\020" +
    "\025\uffaf\026\uffaf\057\uffaf\060\uffaf\065\uffaf\067\uffaf\071" +
    "\uffaf\001\002\000\100\043\074\044\042\045\043\046\057" +
    "\047\022\050\066\051\040\052\071\053\031\054\051\055" +
    "\050\056\054\076\046\077\036\100\017\101\072\102\034" +
    "\103\026\104\067\105\077\106\052\107\101\110\060\111" +
    "\064\112\020\113\103\114\104\115\033\116\041\117\047" +
    "\120\021\001\002\000\070\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\063\uff9a\065\uff9a\067\uff9a\071\uff9a\001\002\000\054\010" +
    "\uffa0\011\uffa0\012\136\013\144\014\143\015\142\016\140" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\057\uffa0\060\uffa0\062\uffa0\065\uffa0\067\uffa0" +
    "\071\uffa0\001\002\000\116\011\114\043\074\044\042\045" +
    "\043\046\057\047\022\050\066\051\040\052\071\053\031" +
    "\054\051\055\050\056\054\064\123\072\120\073\116\074" +
    "\122\075\115\076\046\077\036\100\017\101\072\102\034" +
    "\103\026\104\067\105\077\106\052\107\101\110\060\111" +
    "\064\112\020\113\103\114\104\115\033\116\041\117\047" +
    "\120\021\121\111\001\002\000\116\011\114\043\074\044" +
    "\042\045\043\046\057\047\022\050\066\051\040\052\071" +
    "\053\031\054\051\055\050\056\054\064\123\072\120\073" +
    "\116\074\122\075\115\076\046\077\036\100\017\101\072" +
    "\102\034\103\026\104\067\105\077\106\052\107\101\110" +
    "\060\111\064\112\020\113\103\114\104\115\033\116\041" +
    "\117\047\120\021\121\111\001\002\000\054\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\057\uff9b\060\uff9b\062\uff9b\065\uff9b\067\uff9b\071\uff9b" +
    "\001\002\000\116\011\114\043\074\044\042\045\043\046" +
    "\057\047\022\050\066\051\040\052\071\053\031\054\051" +
    "\055\050\056\054\064\123\072\120\073\116\074\122\075" +
    "\115\076\046\077\036\100\017\101\072\102\034\103\026" +
    "\104\067\105\077\106\052\107\101\110\060\111\064\112" +
    "\020\113\103\114\104\115\033\116\041\117\047\120\021" +
    "\121\111\001\002\000\054\010\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\057\uff9c\060" +
    "\uff9c\062\uff9c\065\uff9c\067\uff9c\071\uff9c\001\002\000\116" +
    "\011\114\043\074\044\042\045\043\046\057\047\022\050" +
    "\066\051\040\052\071\053\031\054\051\055\050\056\054" +
    "\064\123\072\120\073\116\074\122\075\115\076\046\077" +
    "\036\100\017\101\072\102\034\103\026\104\067\105\077" +
    "\106\052\107\101\110\060\111\064\112\020\113\103\114" +
    "\104\115\033\116\041\117\047\120\021\121\111\001\002" +
    "\000\116\011\114\043\074\044\042\045\043\046\057\047" +
    "\022\050\066\051\040\052\071\053\031\054\051\055\050" +
    "\056\054\064\123\072\120\073\116\074\122\075\115\076" +
    "\046\077\036\100\017\101\072\102\034\103\026\104\067" +
    "\105\077\106\052\107\101\110\060\111\064\112\020\113" +
    "\103\114\104\115\033\116\041\117\047\120\021\121\111" +
    "\001\002\000\054\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\143\015\142\016\140\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\057\uffa3\060\uffa3\062" +
    "\uffa3\065\uffa3\067\uffa3\071\uffa3\001\002\000\054\010\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\142\016\140\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\057\uffa2\060\uffa2\062\uffa2\065\uffa2\067\uffa2\071" +
    "\uffa2\001\002\000\054\010\uffa5\011\uffa5\012\136\013\144" +
    "\014\143\015\142\016\140\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\057\uffa5\060\uffa5" +
    "\062\uffa5\065\uffa5\067\uffa5\071\uffa5\001\002\000\054\010" +
    "\uffa6\011\uffa6\012\136\013\144\014\143\015\142\016\140" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\057\uffa6\060\uffa6\062\uffa6\065\uffa6\067\uffa6" +
    "\071\uffa6\001\002\000\054\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\014\143\015\142\016\140\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\057\uffa4\060" +
    "\uffa4\062\uffa4\065\uffa4\067\uffa4\071\uffa4\001\002\000\004" +
    "\066\153\001\002\000\010\035\156\036\157\067\uffc0\001" +
    "\002\000\010\035\156\036\157\067\uffbf\001\002\000\010" +
    "\035\uffbd\036\uffbd\067\uffbd\001\002\000\116\011\114\043" +
    "\074\044\042\045\043\046\057\047\022\050\066\051\040" +
    "\052\071\053\031\054\051\055\050\056\054\064\123\072" +
    "\120\073\116\074\122\075\115\076\046\077\036\100\017" +
    "\101\072\102\034\103\026\104\067\105\077\106\052\107" +
    "\101\110\060\111\064\112\020\113\103\114\104\115\033" +
    "\116\041\117\047\120\021\121\111\001\002\000\004\062" +
    "\162\001\002\000\004\067\161\001\002\000\126\002\uffc1" +
    "\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\067\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110" +
    "\uffc1\111\uffc1\112\uffc1\113\uffc1\114\uffc1\115\uffc1\116\uffc1" +
    "\117\uffc1\120\uffc1\001\002\000\122\030\053\031\024\033" +
    "\032\034\102\035\uffd9\036\uffd9\037\075\040\044\043\074" +
    "\044\042\045\043\046\057\047\022\050\066\051\040\052" +
    "\071\053\031\054\051\055\050\056\054\067\uffd9\076\046" +
    "\077\036\100\017\101\072\102\034\103\026\104\067\105" +
    "\077\106\052\107\101\110\060\111\064\112\020\113\103" +
    "\114\104\115\033\116\041\117\047\120\021\001\002\000" +
    "\004\057\212\001\002\000\122\030\uffd3\031\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\067\uffd3\076\uffd3\077" +
    "\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3" +
    "\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\114" +
    "\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3\001\002\000\122" +
    "\030\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\067\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6" +
    "\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111" +
    "\uffd6\112\uffd6\113\uffd6\114\uffd6\115\uffd6\116\uffd6\117\uffd6" +
    "\120\uffd6\001\002\000\010\035\uffbb\036\uffbb\067\uffbb\001" +
    "\002\000\004\057\211\001\002\000\122\030\uffd4\031\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\067\uffd4\076" +
    "\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4" +
    "\105\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113" +
    "\uffd4\114\uffd4\115\uffd4\116\uffd4\117\uffd4\120\uffd4\001\002" +
    "\000\122\030\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\067\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5" +
    "\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110" +
    "\uffd5\111\uffd5\112\uffd5\113\uffd5\114\uffd5\115\uffd5\116\uffd5" +
    "\117\uffd5\120\uffd5\001\002\000\124\030\uffd2\031\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\210\067\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104" +
    "\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2" +
    "\113\uffd2\114\uffd2\115\uffd2\116\uffd2\117\uffd2\120\uffd2\001" +
    "\002\000\020\004\201\005\203\006\206\007\205\057\200" +
    "\061\133\063\202\001\002\000\004\057\177\001\002\000" +
    "\122\030\053\031\024\033\032\034\102\035\uffd8\036\uffd8" +
    "\037\075\040\044\043\074\044\042\045\043\046\057\047" +
    "\022\050\066\051\040\052\071\053\031\054\051\055\050" +
    "\056\054\067\uffd8\076\046\077\036\100\017\101\072\102" +
    "\034\103\026\104\067\105\077\106\052\107\101\110\060" +
    "\111\064\112\020\113\103\114\104\115\033\116\041\117" +
    "\047\120\021\001\002\000\122\030\uffd7\031\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\067\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7" +
    "\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7\114" +
    "\uffd7\115\uffd7\116\uffd7\117\uffd7\120\uffd7\001\002\000\122" +
    "\030\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\067\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0" +
    "\103\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111" +
    "\uffd0\112\uffd0\113\uffd0\114\uffd0\115\uffd0\116\uffd0\117\uffd0" +
    "\120\uffd0\001\002\000\122\030\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\067\uffcd\076\uffcd\077\uffcd" +
    "\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106" +
    "\uffcd\107\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd\114\uffcd" +
    "\115\uffcd\116\uffcd\117\uffcd\120\uffcd\001\002\000\120\011" +
    "\uffca\027\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\064\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca" +
    "\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105" +
    "\uffca\106\uffca\107\uffca\110\uffca\111\uffca\112\uffca\113\uffca" +
    "\114\uffca\115\uffca\116\uffca\117\uffca\120\uffca\121\uffca\001" +
    "\002\000\120\011\uffcb\027\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\064\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb" +
    "\112\uffcb\113\uffcb\114\uffcb\115\uffcb\116\uffcb\117\uffcb\120" +
    "\uffcb\121\uffcb\001\002\000\120\011\uffc9\027\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\064\uffc9\072\uffc9" +
    "\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101" +
    "\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9" +
    "\110\uffc9\111\uffc9\112\uffc9\113\uffc9\114\uffc9\115\uffc9\116" +
    "\uffc9\117\uffc9\120\uffc9\121\uffc9\001\002\000\120\011\114" +
    "\027\121\043\074\044\042\045\043\046\057\047\022\050" +
    "\066\051\040\052\071\053\031\054\051\055\050\056\054" +
    "\064\123\072\120\073\116\074\122\075\115\076\046\077" +
    "\036\100\017\101\072\102\034\103\026\104\067\105\077" +
    "\106\052\107\101\110\060\111\064\112\020\113\103\114" +
    "\104\115\033\116\041\117\047\120\021\121\111\001\002" +
    "\000\120\011\uffc7\027\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\064\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112" +
    "\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117\uffc7\120\uffc7" +
    "\121\uffc7\001\002\000\120\011\uffc8\027\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\064\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110" +
    "\uffc8\111\uffc8\112\uffc8\113\uffc8\114\uffc8\115\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\121\uffc8\001\002\000\010\025\126\026" +
    "\127\057\uffcc\001\002\000\122\030\uffcf\031\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\067\uffcf\076\uffcf\077" +
    "\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\106\uffcf\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\114" +
    "\uffcf\115\uffcf\116\uffcf\117\uffcf\120\uffcf\001\002\000\122" +
    "\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\067\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102\uffce" +
    "\103\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111" +
    "\uffce\112\uffce\113\uffce\114\uffce\115\uffce\116\uffce\117\uffce" +
    "\120\uffce\001\002\000\122\030\uffd1\031\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\067\uffd1\076\uffd1\077\uffd1" +
    "\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106" +
    "\uffd1\107\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1\114\uffd1" +
    "\115\uffd1\116\uffd1\117\uffd1\120\uffd1\001\002\000\022\010" +
    "\137\011\141\012\136\013\144\014\143\015\142\016\140" +
    "\062\214\001\002\000\122\030\053\031\024\033\032\034" +
    "\102\035\uffd9\036\uffd9\037\075\040\044\043\074\044\042" +
    "\045\043\046\057\047\022\050\066\051\040\052\071\053" +
    "\031\054\051\055\050\056\054\067\uffd9\076\046\077\036" +
    "\100\017\101\072\102\034\103\026\104\067\105\077\106" +
    "\052\107\101\110\060\111\064\112\020\113\103\114\104" +
    "\115\033\116\041\117\047\120\021\001\002\000\010\035" +
    "\uffbc\036\uffbc\067\uffbc\001\002\000\010\035\uffbe\036\uffbe" +
    "\067\uffbe\001\002\000\116\011\114\043\074\044\042\045" +
    "\043\046\057\047\022\050\066\051\040\052\071\053\031" +
    "\054\051\055\050\056\054\064\123\072\120\073\116\074" +
    "\122\075\115\076\046\077\036\100\017\101\072\102\034" +
    "\103\026\104\067\105\077\106\052\107\101\110\060\111" +
    "\064\112\020\113\103\114\104\115\033\116\041\117\047" +
    "\120\021\121\111\001\002\000\116\011\114\043\074\044" +
    "\042\045\043\046\057\047\022\050\066\051\040\052\071" +
    "\053\031\054\051\055\050\056\054\064\123\072\120\073" +
    "\116\074\122\075\115\076\046\077\036\100\017\101\072" +
    "\102\034\103\026\104\067\105\077\106\052\107\101\110" +
    "\060\111\064\112\020\113\103\114\104\115\033\116\041" +
    "\117\047\120\021\121\111\001\002\000\116\011\114\043" +
    "\074\044\042\045\043\046\057\047\022\050\066\051\040" +
    "\052\071\053\031\054\051\055\050\056\054\064\123\072" +
    "\120\073\116\074\122\075\115\076\046\077\036\100\017" +
    "\101\072\102\034\103\026\104\067\105\077\106\052\107" +
    "\101\110\060\111\064\112\020\113\103\114\104\115\033" +
    "\116\041\117\047\120\021\121\111\001\002\000\116\011" +
    "\114\043\074\044\042\045\043\046\057\047\022\050\066" +
    "\051\040\052\071\053\031\054\051\055\050\056\054\064" +
    "\123\072\120\073\116\074\122\075\115\076\046\077\036" +
    "\100\017\101\072\102\034\103\026\104\067\105\077\106" +
    "\052\107\101\110\060\111\064\112\020\113\103\114\104" +
    "\115\033\116\041\117\047\120\021\121\111\001\002\000" +
    "\116\011\114\043\074\044\042\045\043\046\057\047\022" +
    "\050\066\051\040\052\071\053\031\054\051\055\050\056" +
    "\054\064\123\072\120\073\116\074\122\075\115\076\046" +
    "\077\036\100\017\101\072\102\034\103\026\104\067\105" +
    "\077\106\052\107\101\110\060\111\064\112\020\113\103" +
    "\114\104\115\033\116\041\117\047\120\021\121\111\001" +
    "\002\000\116\011\114\043\074\044\042\045\043\046\057" +
    "\047\022\050\066\051\040\052\071\053\031\054\051\055" +
    "\050\056\054\064\123\072\120\073\116\074\122\075\115" +
    "\076\046\077\036\100\017\101\072\102\034\103\026\104" +
    "\067\105\077\106\052\107\101\110\060\111\064\112\020" +
    "\113\103\114\104\115\033\116\041\117\047\120\021\121" +
    "\111\001\002\000\036\010\137\011\141\012\136\013\144" +
    "\014\143\015\142\016\140\025\uffa8\026\uffa8\057\uffa8\060" +
    "\uffa8\065\uffa8\067\uffa8\071\uffa8\001\002\000\036\010\137" +
    "\011\141\012\136\013\144\014\143\015\142\016\140\025" +
    "\uffa9\026\uffa9\057\uffa9\060\uffa9\065\uffa9\067\uffa9\071\uffa9" +
    "\001\002\000\036\010\137\011\141\012\136\013\144\014" +
    "\143\015\142\016\140\025\uffac\026\uffac\057\uffac\060\uffac" +
    "\065\uffac\067\uffac\071\uffac\001\002\000\036\010\137\011" +
    "\141\012\136\013\144\014\143\015\142\016\140\025\uffab" +
    "\026\uffab\057\uffab\060\uffab\065\uffab\067\uffab\071\uffab\001" +
    "\002\000\036\010\137\011\141\012\136\013\144\014\143" +
    "\015\142\016\140\025\uffad\026\uffad\057\uffad\060\uffad\065" +
    "\uffad\067\uffad\071\uffad\001\002\000\036\010\137\011\141" +
    "\012\136\013\144\014\143\015\142\016\140\025\uffaa\026" +
    "\uffaa\057\uffaa\060\uffaa\065\uffaa\067\uffaa\071\uffaa\001\002" +
    "\000\120\002\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\037" +
    "\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8" +
    "\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111" +
    "\ufff8\112\ufff8\113\ufff8\114\ufff8\115\ufff8\116\ufff8\117\ufff8" +
    "\120\ufff8\001\002\000\120\002\ufff0\030\ufff0\031\ufff0\033" +
    "\ufff0\034\ufff0\037\ufff0\040\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\076\ufff0\077\ufff0\100\ufff0" +
    "\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0\107" +
    "\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\114\ufff0\115\ufff0" +
    "\116\ufff0\117\ufff0\120\ufff0\001\002\000\010\025\126\026" +
    "\127\057\uffdd\001\002\000\120\002\uffed\030\uffed\031\uffed" +
    "\033\uffed\034\uffed\037\uffed\040\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\076\uffed\077\uffed\100" +
    "\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed" +
    "\107\uffed\110\uffed\111\uffed\112\uffed\113\uffed\114\uffed\115" +
    "\uffed\116\uffed\117\uffed\120\uffed\001\002\000\120\002\uffef" +
    "\030\uffef\031\uffef\033\uffef\034\uffef\037\uffef\040\uffef\042" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\076" +
    "\uffef\077\uffef\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef" +
    "\105\uffef\106\uffef\107\uffef\110\uffef\111\uffef\112\uffef\113" +
    "\uffef\114\uffef\115\uffef\116\uffef\117\uffef\120\uffef\001\002" +
    "\000\122\011\114\027\121\043\074\044\042\045\043\046" +
    "\057\047\022\050\066\051\040\052\071\053\031\054\051" +
    "\055\050\056\054\064\123\065\uff90\072\120\073\116\074" +
    "\122\075\115\076\046\077\036\100\017\101\072\102\034" +
    "\103\026\104\067\105\077\106\052\107\101\110\060\111" +
    "\064\112\020\113\103\114\104\115\033\116\041\117\047" +
    "\120\021\121\111\001\002\000\006\060\245\065\uff8f\001" +
    "\002\000\012\025\126\026\127\060\uffe1\065\uffe1\001\002" +
    "\000\004\065\244\001\002\000\070\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\025\uff91\026\uff91\057\uff91\060\uff91\061\uff91" +
    "\062\uff91\063\uff91\065\uff91\067\uff91\071\uff91\001\002\000" +
    "\120\011\114\027\121\043\074\044\042\045\043\046\057" +
    "\047\022\050\066\051\040\052\071\053\031\054\051\055" +
    "\050\056\054\064\123\072\120\073\116\074\122\075\115" +
    "\076\046\077\036\100\017\101\072\102\034\103\026\104" +
    "\067\105\077\106\052\107\101\110\060\111\064\112\020" +
    "\113\103\114\104\115\033\116\041\117\047\120\021\121" +
    "\111\001\002\000\012\025\126\026\127\060\uffe2\065\uffe2" +
    "\001\002\000\120\002\uffee\030\uffee\031\uffee\033\uffee\034" +
    "\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\076\uffee\077\uffee\100\uffee\101\uffee" +
    "\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110" +
    "\uffee\111\uffee\112\uffee\113\uffee\114\uffee\115\uffee\116\uffee" +
    "\117\uffee\120\uffee\001\002\000\004\064\251\001\002\000" +
    "\006\065\uffc5\076\252\001\002\000\006\060\uffc2\065\uffc2" +
    "\001\002\000\006\060\261\065\uffc4\001\002\000\004\065" +
    "\255\001\002\000\004\066\256\001\002\000\116\030\053" +
    "\031\024\033\032\034\102\037\075\040\044\043\074\044" +
    "\042\045\043\046\057\047\022\050\066\051\040\052\071" +
    "\053\031\054\051\055\050\056\054\067\uffd9\076\046\077" +
    "\036\100\017\101\072\102\034\103\026\104\067\105\077" +
    "\106\052\107\101\110\060\111\064\112\020\113\103\114" +
    "\104\115\033\116\041\117\047\120\021\001\002\000\004" +
    "\067\260\001\002\000\120\002\uffc6\030\uffc6\031\uffc6\033" +
    "\uffc6\034\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\076\uffc6\077\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107" +
    "\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6\115\uffc6" +
    "\116\uffc6\117\uffc6\120\uffc6\001\002\000\004\076\262\001" +
    "\002\000\006\060\uffc3\065\uffc3\001\002\000\010\057\uffe4" +
    "\060\uffe4\063\uffe4\001\002\000\010\057\uffe0\060\267\063" +
    "\266\001\002\000\004\057\305\001\002\000\122\011\114" +
    "\027\121\043\074\044\042\045\043\046\057\047\022\050" +
    "\066\051\040\052\071\053\031\054\051\055\050\056\054" +
    "\064\123\066\271\072\120\073\116\074\122\075\115\076" +
    "\046\077\036\100\017\101\072\102\034\103\026\104\067" +
    "\105\077\106\052\107\101\110\060\111\064\112\020\113" +
    "\103\114\104\115\033\116\041\117\047\120\021\121\111" +
    "\001\002\000\004\076\270\001\002\000\010\057\uffe5\060" +
    "\uffe5\063\uffe5\001\002\000\006\067\uffea\076\274\001\002" +
    "\000\010\025\126\026\127\057\uffdf\001\002\000\004\067" +
    "\303\001\002\000\004\062\301\001\002\000\006\060\277" +
    "\067\uffe9\001\002\000\006\060\uffe7\067\uffe7\001\002\000" +
    "\004\076\274\001\002\000\006\060\uffe8\067\uffe8\001\002" +
    "\000\120\011\114\027\121\043\074\044\042\045\043\046" +
    "\057\047\022\050\066\051\040\052\071\053\031\054\051" +
    "\055\050\056\054\064\123\072\120\073\116\074\122\075" +
    "\115\076\046\077\036\100\017\101\072\102\034\103\026" +
    "\104\067\105\077\106\052\107\101\110\060\111\064\112" +
    "\020\113\103\114\104\115\033\116\041\117\047\120\021" +
    "\121\111\001\002\000\012\025\126\026\127\060\uffe6\067" +
    "\uffe6\001\002\000\004\057\304\001\002\000\126\002\uffeb" +
    "\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\067\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb" +
    "\102\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110" +
    "\uffeb\111\uffeb\112\uffeb\113\uffeb\114\uffeb\115\uffeb\116\uffeb" +
    "\117\uffeb\120\uffeb\001\002\000\126\002\uffec\030\uffec\031" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\067\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec\103" +
    "\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec\111\uffec" +
    "\112\uffec\113\uffec\114\uffec\115\uffec\116\uffec\117\uffec\120" +
    "\uffec\001\002\000\120\011\114\027\121\043\074\044\042" +
    "\045\043\046\057\047\022\050\066\051\040\052\071\053" +
    "\031\054\051\055\050\056\054\064\123\072\120\073\116" +
    "\074\122\075\115\076\046\077\036\100\017\101\072\102" +
    "\034\103\026\104\067\105\077\106\052\107\101\110\060" +
    "\111\064\112\020\113\103\114\104\115\033\116\041\117" +
    "\047\120\021\121\111\001\002\000\072\004\uff95\005\uff95" +
    "\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\065\uff95\067\uff95\070\306\071\uff95" +
    "\001\002\000\072\004\uff93\005\uff93\006\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\026\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\065\uff93\067\uff93\070\uff93\071\uff93\001\002\000\072\004" +
    "\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94" +
    "\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\057\uff94" +
    "\060\uff94\061\uff94\062\uff94\063\uff94\065\uff94\067\uff94\070" +
    "\uff94\071\uff94\001\002\000\010\025\126\026\127\071\313" +
    "\001\002\000\072\004\uff92\005\uff92\006\uff92\007\uff92\010" +
    "\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025" +
    "\uff92\026\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92" +
    "\065\uff92\067\uff92\070\uff92\071\uff92\001\002\000\120\011" +
    "\114\027\121\043\074\044\042\045\043\046\057\047\022" +
    "\050\066\051\040\052\071\053\031\054\051\055\050\056" +
    "\054\064\123\072\120\073\116\074\122\075\115\076\046" +
    "\077\036\100\017\101\072\102\034\103\026\104\067\105" +
    "\077\106\052\107\101\110\060\111\064\112\020\113\103" +
    "\114\104\115\033\116\041\117\047\120\021\121\111\001" +
    "\002\000\010\025\126\026\127\065\316\001\002\000\004" +
    "\066\317\001\002\000\116\030\053\031\024\033\032\034" +
    "\102\037\075\040\044\043\074\044\042\045\043\046\057" +
    "\047\022\050\066\051\040\052\071\053\031\054\051\055" +
    "\050\056\054\067\uffd9\076\046\077\036\100\017\101\072" +
    "\102\034\103\026\104\067\105\077\106\052\107\101\110" +
    "\060\111\064\112\020\113\103\114\104\115\033\116\041" +
    "\117\047\120\021\001\002\000\004\067\321\001\002\000" +
    "\130\002\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\323\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\067\uffb4\076\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4" +
    "\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114" +
    "\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4\001\002\000\126" +
    "\002\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\067\uffba\076\uffba\077\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107" +
    "\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba\115\uffba" +
    "\116\uffba\117\uffba\120\uffba\001\002\000\006\040\333\066" +
    "\332\001\002\000\126\002\uffb9\030\uffb9\031\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\067\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9" +
    "\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\113" +
    "\uffb9\114\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9\001\002" +
    "\000\130\002\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\323\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\067\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105" +
    "\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4" +
    "\114\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4\001\002\000" +
    "\130\002\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\067\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6" +
    "\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\114" +
    "\uffb6\115\uffb6\116\uffb6\117\uffb6\120\uffb6\001\002\000\126" +
    "\002\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\067\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107" +
    "\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3" +
    "\116\uffb3\117\uffb3\120\uffb3\001\002\000\126\002\uffb8\030" +
    "\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\067\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102" +
    "\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8" +
    "\111\uffb8\112\uffb8\113\uffb8\114\uffb8\115\uffb8\116\uffb8\117" +
    "\uffb8\120\uffb8\001\002\000\130\002\uffb7\030\uffb7\031\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\067\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7" +
    "\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111" +
    "\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7" +
    "\120\uffb7\001\002\000\116\030\053\031\024\033\032\034" +
    "\102\037\075\040\044\043\074\044\042\045\043\046\057" +
    "\047\022\050\066\051\040\052\071\053\031\054\051\055" +
    "\050\056\054\067\uffd9\076\046\077\036\100\017\101\072" +
    "\102\034\103\026\104\067\105\077\106\052\107\101\110" +
    "\060\111\064\112\020\113\103\114\104\115\033\116\041" +
    "\117\047\120\021\001\002\000\004\064\334\001\002\000" +
    "\120\011\114\027\121\043\074\044\042\045\043\046\057" +
    "\047\022\050\066\051\040\052\071\053\031\054\051\055" +
    "\050\056\054\064\123\072\120\073\116\074\122\075\115" +
    "\076\046\077\036\100\017\101\072\102\034\103\026\104" +
    "\067\105\077\106\052\107\101\110\060\111\064\112\020" +
    "\113\103\114\104\115\033\116\041\117\047\120\021\121" +
    "\111\001\002\000\010\025\126\026\127\065\336\001\002" +
    "\000\004\066\337\001\002\000\116\030\053\031\024\033" +
    "\032\034\102\037\075\040\044\043\074\044\042\045\043" +
    "\046\057\047\022\050\066\051\040\052\071\053\031\054" +
    "\051\055\050\056\054\067\uffd9\076\046\077\036\100\017" +
    "\101\072\102\034\103\026\104\067\105\077\106\052\107" +
    "\101\110\060\111\064\112\020\113\103\114\104\115\033" +
    "\116\041\117\047\120\021\001\002\000\004\067\341\001" +
    "\002\000\130\002\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\067\uffb5\076" +
    "\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5" +
    "\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113" +
    "\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5\001\002" +
    "\000\004\067\343\001\002\000\126\002\uffb2\030\uffb2\031" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\067\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103" +
    "\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2" +
    "\112\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2\120" +
    "\uffb2\001\002\000\120\002\ufff1\030\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\056\ufff1\076\ufff1\077\ufff1\100\ufff1\101" +
    "\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1" +
    "\110\ufff1\111\ufff1\112\ufff1\113\ufff1\114\ufff1\115\ufff1\116" +
    "\ufff1\117\ufff1\120\ufff1\001\002\000\122\011\114\027\121" +
    "\043\074\044\042\045\043\046\057\047\022\050\066\051" +
    "\040\052\071\053\031\054\051\055\050\056\054\064\123" +
    "\065\uffdb\072\120\073\116\074\122\075\115\076\046\077" +
    "\036\100\017\101\072\102\034\103\026\104\067\105\077" +
    "\106\052\107\101\110\060\111\064\112\020\113\103\114" +
    "\104\115\033\116\041\117\047\120\021\121\111\001\002" +
    "\000\006\060\245\065\uffda\001\002\000\004\065\350\001" +
    "\002\000\004\057\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\012\002\005\014\003\015\007\016\004\001" +
    "\001\000\042\003\062\013\024\017\064\023\060\027\075" +
    "\031\022\032\077\033\036\036\026\044\027\047\072\051" +
    "\067\052\044\053\034\056\061\057\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\054\306\055\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\107\020\234\021\106\022\111\047\072\051\116\052" +
    "\044\053\034\056\061\063\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\062\013\024\017\064\023" +
    "\060\027\075\033\232\036\026\044\027\047\072\051\067" +
    "\052\044\053\034\056\061\057\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\107\020\112\021\106\022\111\047\072\051" +
    "\116\052\044\053\034\056\061\063\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\107" +
    "\022\134\047\072\051\116\052\044\053\034\056\061\063" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\107\020\131\021" +
    "\106\022\111\047\072\051\116\052\044\053\034\056\061" +
    "\063\105\001\001\000\002\001\001\000\026\006\107\020" +
    "\123\021\106\022\111\047\072\051\116\052\044\053\034" +
    "\056\061\063\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\107\020\130\021\106\022\111\047\072" +
    "\051\116\052\044\053\034\056\061\063\105\001\001\000" +
    "\026\006\107\020\127\021\106\022\111\047\072\051\116" +
    "\052\044\053\034\056\061\063\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\047\072" +
    "\052\133\053\034\056\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\107\022\150\047\072\051\116" +
    "\052\044\053\034\056\061\063\105\001\001\000\022\006" +
    "\107\022\147\047\072\051\116\052\044\053\034\056\061" +
    "\063\105\001\001\000\002\001\001\000\022\006\107\022" +
    "\146\047\072\051\116\052\044\053\034\056\061\063\105" +
    "\001\001\000\002\001\001\000\022\006\107\022\145\047" +
    "\072\051\116\052\044\053\034\056\061\063\105\001\001" +
    "\000\022\006\107\022\144\047\072\051\116\052\044\053" +
    "\034\056\061\063\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\157\025\153\026\154" +
    "\001\001\000\004\026\215\001\001\000\002\001\001\000" +
    "\022\006\107\022\212\047\072\051\116\052\044\053\034" +
    "\056\061\063\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\170\013\162\017\171" +
    "\023\167\027\173\030\165\034\174\035\164\036\163\047" +
    "\072\051\172\052\044\053\034\056\061\057\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\203\001\001\000" +
    "\002\001\001\000\034\003\170\013\162\017\171\023\167" +
    "\027\173\035\175\036\163\047\072\051\172\052\044\053" +
    "\034\056\061\057\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\107\020\206\021\106" +
    "\022\111\047\072\051\116\052\044\053\034\056\061\063" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\170\013\162\017\171" +
    "\023\167\027\173\030\214\034\174\035\164\036\163\047" +
    "\072\051\172\052\044\053\034\056\061\057\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\107\022" +
    "\231\047\072\051\116\052\044\053\034\056\061\063\105" +
    "\001\001\000\022\006\107\022\230\047\072\051\116\052" +
    "\044\053\034\056\061\063\105\001\001\000\022\006\107" +
    "\022\227\047\072\051\116\052\044\053\034\056\061\063" +
    "\105\001\001\000\022\006\107\022\226\047\072\051\116" +
    "\052\044\053\034\056\061\063\105\001\001\000\022\006" +
    "\107\022\225\047\072\051\116\052\044\053\034\056\061" +
    "\063\105\001\001\000\022\006\107\022\224\047\072\051" +
    "\116\052\044\053\034\056\061\063\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\107\007\240\020\241\021\106" +
    "\022\111\047\072\050\242\051\116\052\044\053\034\056" +
    "\061\063\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\107\020" +
    "\245\021\106\022\111\047\072\051\116\052\044\053\034" +
    "\056\061\063\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\253\046\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\170\013\162\017\171\023\167" +
    "\027\173\030\256\034\174\035\164\036\163\047\072\051" +
    "\172\052\044\053\034\056\061\057\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\264\001\001\000\002" +
    "\001\001\000\026\006\107\020\271\021\106\022\111\047" +
    "\072\051\116\052\044\053\034\056\061\063\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\272\061" +
    "\274\062\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\277\001\001\000\002\001\001\000\026\006\107" +
    "\020\301\021\106\022\111\047\072\051\116\052\044\053" +
    "\034\056\061\063\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\107\020\311\021\106\022\111\047\072\051\116\052\044" +
    "\053\034\056\061\063\105\001\001\000\004\055\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\107\020\314\021\106\022" +
    "\111\047\072\051\116\052\044\053\034\056\061\063\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\170\013\162\017\171\023\167\027\173\030\317\034\174" +
    "\035\164\036\163\047\072\051\172\052\044\053\034\056" +
    "\061\057\166\001\001\000\002\001\001\000\014\037\321" +
    "\040\323\041\324\042\325\043\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\040\327" +
    "\042\330\043\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\170" +
    "\013\162\017\171\023\167\027\173\030\341\034\174\035" +
    "\164\036\163\047\072\051\172\052\044\053\034\056\061" +
    "\057\166\001\001\000\002\001\001\000\026\006\107\020" +
    "\334\021\106\022\111\047\072\051\116\052\044\053\034" +
    "\056\061\063\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\170\013\162\017\171\023\167\027\173" +
    "\030\337\034\174\035\164\036\163\047\072\051\172\052" +
    "\044\053\034\056\061\057\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\107\007\345\012\346\020\241" +
    "\021\106\022\111\047\072\051\116\052\044\053\034\056" +
    "\061\063\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoScript$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoScript$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoScript$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /**
     * Este metodo retorna la RAIZ del arbol  generado 
     **/ 
    
    public Nodo getRoot(){
        return action_obj.root;
    }
    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoScript$actions {


    //se declaran variables globales etc.
        public int Index=1;
        public Nodo root = new Nodo();


  private final SintacticoScript parser;

  /** Constructor */
  CUP$SintacticoScript$actions(SintacticoScript parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoScript$do_action(
    int                        CUP$SintacticoScript$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoScript$parser,
    java.util.Stack            CUP$SintacticoScript$stack,
    int                        CUP$SintacticoScript$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoScript$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoScript$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DATO ::= nulo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nulo",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DATO ::= bool_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("bool_literal",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DATO ::= int_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("int_literal",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DATO ::= double_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("double_literal",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DATO ::= string_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                                          RESULT = parser.crearNodo("string_literal",cad,a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NATIVAS ::= iden 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NATIVAS ::= alcerrar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NATIVAS ::= alcargar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NATIVAS ::= alclic 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NATIVAS ::= crearvideo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NATIVAS ::= crearreproductor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NATIVAS ::= crearimagen 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NATIVAS ::= crearboton 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NATIVAS ::= creardesplegable 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NATIVAS ::= crearcontrolnumerico 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NATIVAS ::= crearareatexto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NATIVAS ::= crearcajatexto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NATIVAS ::= creartexto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NATIVAS ::= crearcontenedor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NATIVAS ::= crearventana 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NATIVAS ::= obtenerpornombre 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NATIVAS ::= obtenerporid 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NATIVAS ::= obtenerporetiqueta 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NATIVAS ::= leergxml 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NATIVAS ::= map 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NATIVAS ::= alguno 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NATIVAS ::= todos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NATIVAS ::= reduce 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NATIVAS ::= buscar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NATIVAS ::= filtrar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NATIVAS ::= minimo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NATIVAS ::= maximo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NATIVAS ::= invertir 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NATIVAS ::= creararraydesdearchivo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NATIVAS ::= descendente 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NATIVAS ::= ascendente 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ENVIO ::= LIST_EXP 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X;  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ENVIO",38, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ENVIO ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("envios","",0,0); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ENVIO",38, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LLAMADA ::= NATIVAS apar ENVIO cpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                        RESULT = parser.crearNodo("llamada","",a.linea,a.columna);  
                        RESULT.add(parser.crearNodo("id",a.nombre,a.linea,a.columna));
                        RESULT.add(H);
                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LLAMADA",37, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INDICE ::= acorch EXP ccorch 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		      RESULT = a;          
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INDICE",43, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INDICES ::= INDICE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("indices","",a.linea,a.columna);  
                RESULT.add(a);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INDICES",42, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INDICES ::= INDICES INDICE 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                r.add(h);
                RESULT = r;
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INDICES",42, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ACCESOARR ::= iden INDICES 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token h1 = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("accesoar",h1.getCadena(),h1.getLinea(),h1.getColumna());
                    RESULT.add(h2);
              
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESOARR",41, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ACCESOVAR ::= LLAMADA 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT=r;   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESOVAR",40, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ACCESOVAR ::= ACCESOARR 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT=r;   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESOVAR",40, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ACCESOVAR ::= iden 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token h1 = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = parser.crearNodo("id",h1.getCadena(),h1.getLinea(),h1.getColumna()); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESOVAR",40, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ACCESO ::= ACCESOVAR 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("acceso","",h1.linea,h1.columna);
                    RESULT.add(h1);
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESO",39, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACCESO ::= ACCESO pto ACCESOVAR 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                r.add(h);   RESULT = r;  
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESO",39, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SIMPLIFICADA ::= EXP_A sub 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		

                    RESULT = parser.crearNodo("SUB","",w.getLinea(),w.getColumna());
                    RESULT.add(h1);
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA",49, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SIMPLIFICADA ::= EXP_A add 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		                                 

                    RESULT = parser.crearNodo("ADD","",w.getLinea(),w.getColumna());
                    RESULT.add(h1);
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA",49, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_A ::= ACCESO 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_A ::= SIMPLIFICADA 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_A ::= DATO 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_A ::= menos EXP_A 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("unario","",a.getLinea(),a.getColumna()); RESULT.add(H); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_A ::= apar EXP cpar 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_A ::= EXP_A pot EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("pot","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_A ::= EXP_A div EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("div","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_A ::= EXP_A por EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("por","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_A ::= EXP_A menos EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("menos","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_A ::= EXP_A mas EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("mas","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_R ::= EXP_A 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = r;  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_R ::= EXP_A dif EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("dif","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP_R ::= EXP_A ig_ig EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("ig_ig","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP_R ::= EXP_A mayiq EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("mayiq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP_R ::= EXP_A mayq EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("mayq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP_R ::= EXP_A meniq EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("meniq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP_R ::= EXP_A menq EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("menq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP_R 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=a;   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= not EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    
                                          RESULT = parser.crearNodo("not","",a.getLinea(),a.getColumna());
                                          RESULT.add(b);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP or EXP 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("or","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP and EXP 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("and","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                       
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SINO ::= sino alla INSTRUCCIONES clla 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		token X = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("sino","",X.getLinea(),X.getColumna());
                RESULT.add(i);// se agrega el conjunto de instrucciones
           
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SINO",33, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FINAL_SINO ::= SINO 
            {
              Nodo RESULT =null;
		int rootleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rootright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo root = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		      RESULT=root; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("FINAL_SINO",30, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FINAL_SINO ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("sino","",0,0); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("FINAL_SINO",30, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SINO_SI ::= sino si apar EXP cpar alla INSTRUCCIONES clla 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).right;
		token X = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("sinosi","",X.getLinea(),X.getColumna());
                RESULT.add(c); //condicion
                RESULT.add(i); //instrucciones
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SINO_SI",32, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LIST_SINOSI ::= SINO_SI 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("lista_sinosi","",X.linea,X.columna);
                RESULT.add(X);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_SINOSI",31, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LIST_SINOSI ::= LIST_SINOSI SINO_SI 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                r.add(h);
                RESULT = r;
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_SINOSI",31, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MUCHOS_SINOSI ::= LIST_SINOSI FINAL_SINO 
            {
              Nodo RESULT =null;
		int rootleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rootright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo root = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 root.add(b);  RESULT = root; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("MUCHOS_SINOSI",29, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MUCHOS_SINOSI ::= FINAL_SINO 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = parser.crearNodo("lista_sinosi","",0,0); RESULT.add(b);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("MUCHOS_SINOSI",29, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SI ::= si apar EXP cpar alla INSTRUCCIONES clla MUCHOS_SINOSI 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo Z = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
            RESULT = parser.crearNodo("si","",w.getLinea(),w.getColumna());
            RESULT.add(X);// se agrega la expresion
            RESULT.add(Y);// se agrega el conjunto de instrucciones
            RESULT.add(Z);// se agrega la lista de sinosi
            
          
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SI",28, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASO_DEFECTO ::= defecto dspts INSTRUCCIONES 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("defecto","",w.getLinea(),w.getColumna());
                    RESULT.add(Y);// se agregan las instrucciones
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASO_DEFECTO ::= caso EXP_A dspts INSTRUCCIONES 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("caso","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la EXPR
                    RESULT.add(Y);// se agregan las instrucciones
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA_CASOS ::= CASO_DEFECTO 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("casos","",X.linea,X.columna);
                    RESULT.add(X);
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",19, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTA_CASOS ::= LISTA_CASOS CASO_DEFECTO 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    R.add(X);
                    RESULT = R;
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",19, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONT_SELECCIONA ::= LISTA_CASOS 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT= X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CONT_SELECCIONA",18, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONT_SELECCIONA ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("casos","",0,0); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CONT_SELECCIONA",18, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SELECCIONA ::= selecciona apar EXP cpar alla CONT_SELECCIONA clla 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("selecciona","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la EXPRESION
                RESULT.add(Y);// se agrega la lista de CASOS
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SELECCIONA",17, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTA_PARAMETROS ::= iden 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                        RESULT = parser.crearNodo("parametros","",x.getLinea(),x.getColumna());
                        Nodo param = parser.crearNodo("parametro","",x.getLinea(),x.getColumna());
                        param.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));
                        RESULT.add(param);    
                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",36, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma iden 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                        Nodo param = parser.crearNodo("parametro","",y.getLinea(),y.getColumna());
                        param.add(parser.crearNodo("id",y.getCadena(),y.getLinea(),y.getColumna()));
                        x.add(param);
                        RESULT=x;
                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",36, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS ::= LISTA_PARAMETROS 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		     RESULT=x;   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("PARAMETROS",35, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROS ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("parametros","",0,0);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("PARAMETROS",35, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCION ::= funcion iden apar PARAMETROS cpar alla INSTRUCCIONES clla 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).right;
		Nodo y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo z = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("funcion","",w.getLinea(),w.getColumna()); // se crea la raiz FUNCION
                RESULT.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));// agrego el nombre 
                RESULT.add(y);//agrego los parametros
                RESULT.add(z);//agrego las instrucciones
           
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("FUNCION",34, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOASIG ::= asigdiv 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("asigdiv",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOASIG ::= asigpor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("asigpor",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOASIG ::= asigmen 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("asigmen",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOASIG ::= asigmas 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("asigmas",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOASIG ::= igual 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("igual",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= ACCESO TIPOASIG EXP 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                        RESULT = parser.crearNodo("asignacion","",h1.linea,h1.columna);
                        RESULT.add(h1);     RESULT.add(h2);     RESULT.add(h3);
                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ASIGNACION",45, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= ACCESO pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= ASIGNACION pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= DETENER pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= RETORNAR pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= IMPRIMIR pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= DETENER 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= SI 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SELECCIONA 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= DECLARA 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = g; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // I_NSTRUCCIONES ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 
                    RESULT = parser.crearNodo("sentencias","",H.linea,H.columna);
                    RESULT.add(H); 
                 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("I_NSTRUCCIONES",26, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // I_NSTRUCCIONES ::= I_NSTRUCCIONES SENTENCIA 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  R.add(H); RESULT = R;  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("I_NSTRUCCIONES",26, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCIONES ::= I_NSTRUCCIONES 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",22, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCIONES ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("sentencias","",0,0);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",22, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAM_ENVIAR ::= LIST_EXP 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		   RESULT = h1; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("PARAM_ENVIAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAM_ENVIAR ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("parametros","",0,0);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("PARAM_ENVIAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IMPRIMIR ::= imprimir apar PARAM_ENVIAR cpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                    RESULT = parser.crearNodo("imprimir","",a.getLinea(),a.getColumna());
                    RESULT.add(h1);
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETORNAR ::= retornar EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("retornar","",a.getLinea(),a.getColumna());
                    RESULT.add(h1);
              
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("RETORNAR",21, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DETENER ::= detener 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("detener","",a.getLinea(),a.getColumna());
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DETENER",13, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGN ::= igual EXP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("asign","",m.getLinea(),m.getColumna());
                RESULT.add(h1);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ASIGN",3, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGN ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("asign","",0,0);   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ASIGN",3, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LIST_EXP ::= EXP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("lista_exp","",m.linea,m.columna);
                RESULT.add(m);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LIST_EXP ::= LIST_EXP coma EXP 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                r.add(h);
                RESULT = r;
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTARRAY ::= acorch LIST_EXP ccorch 
            {
              Nodo RESULT =null;

              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CONTARRAY",6, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LIST_ID ::= iden 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("list_id",m.getCadena(),m.getLinea(),m.getColumna());
                RESULT.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_ID",2, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LIST_ID ::= LIST_ID coma iden 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                n.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
                RESULT = n;
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_ID",2, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUTO ::= iden dspts EXP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("atributo","",m.getLinea(),m.getColumna());
                    RESULT.add(parser.crearNodo("m",m.getCadena(),m.getLinea(),m.getColumna()));    
                    RESULT.add(h);
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",48, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATRIBUTOS ::= ATRIBUTO 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("atributos","",h.linea,h.columna);
                    RESULT.add(h);
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",47, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ATRIBUTOS ::= ATRIBUTOS coma ATRIBUTO 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    r.add(h);
                    RESULT = r;
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",47, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LIST_ATRI ::= ATRIBUTOS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = r; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_ATRI",7, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LIST_ATRI ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("atributos","",0,0);    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_ATRI",7, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARA ::= var LIST_ID igual alla LIST_ATRI clla pyc 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		
                RESULT = parser.crearNodo("declaracionobj","",m.getLinea(),m.getColumna());
                RESULT.add(n);
                RESULT.add(o);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DECLARA",1, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARA ::= var LIST_ID ASIGN pyc 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("declaracionvar","",m.getLinea(),m.getColumna());
                RESULT.add(n);
                RESULT.add(o);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DECLARA",1, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAF ::= ACCESO pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAF ::= ASIGNACION pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAF ::= DETENER pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAF ::= RETORNAR pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAF ::= IMPRIMIR pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAF ::= DETENER 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAF ::= SI 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAF ::= SELECCIONA 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAF ::= FUNCION 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = g; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAF ::= DECLARA 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 g.nombre += "G"; RESULT = g; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I_NSTRUCCIONESF ::= SENTENCIAF 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 
                        RESULT = parser.crearNodo("sentencias","",h.linea,h.columna);  
                        RESULT.add(h); 
                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("I_NSTRUCCIONESF",24, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I_NSTRUCCIONESF ::= I_NSTRUCCIONESF SENTENCIAF 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  r.add(h); RESULT = r;  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("I_NSTRUCCIONESF",24, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES_FUERA ::= I_NSTRUCCIONESF 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = b; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_FUERA",23, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES_FUERA ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("sentencias","",0,0);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_FUERA",23, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTAR ::= importar apar string_literal cpar pyc 
            {
              Nodo RESULT =null;

              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("IMPORTAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= IMPORTAR 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("imports","",h.linea,h.columna);  
                RESULT.add(h); 
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("IMPORTS",11, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= IMPORTS IMPORTAR 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                r.add(h);
                RESULT = r;
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("IMPORTS",11, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S_IMPORT ::= IMPORTS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = r; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("S_IMPORT",10, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S_IMPORT ::= 
            {
              Nodo RESULT =null;
		     RESULT = parser.crearNodo("imports","",0,0);      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("S_IMPORT",10, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S_IMPORT INSTRUCCIONES_FUERA 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  
                root = parser.crearNodo("raiz","",h1.linea,h1.columna);  
                root.add(h1);
                root.add(h2);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoScript$parser.done_parsing();
          return CUP$SintacticoScript$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

