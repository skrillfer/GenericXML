
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 20 06:26:30 CST 2019
//----------------------------------------------------

package Analizadores.Script;

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;
import INTERFAZ.Template;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 20 06:26:30 CST 2019
  */
public class SintacticoScript extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoScript() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoScript(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoScript(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\004\000\002\014" +
    "\002\000\002\014\003\000\002\015\004\000\002\015\003" +
    "\000\002\016\007\000\002\031\002\000\002\031\003\000" +
    "\002\032\004\000\002\032\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\003\000\002\003\006\000\002" +
    "\011\002\000\002\011\003\000\002\061\005\000\002\061" +
    "\003\000\002\062\005\000\002\004\005\000\002\004\003" +
    "\000\002\064\005\000\002\010\005\000\002\010\004\000" +
    "\002\007\005\000\002\007\003\000\002\005\002\000\002" +
    "\005\004\000\002\017\003\000\002\027\004\000\002\013" +
    "\006\000\002\012\002\000\002\012\003\000\002\030\002" +
    "\000\002\030\003\000\002\034\004\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\003\000\002\057\005\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\044\012\000\002\045" +
    "\002\000\002\045\003\000\002\046\006\000\002\046\004" +
    "\000\002\065\002\000\002\065\003\000\002\023\011\000" +
    "\002\024\002\000\002\024\003\000\002\025\004\000\002" +
    "\025\003\000\002\026\010\000\002\026\007\000\002\036" +
    "\012\000\002\037\003\000\002\037\004\000\002\041\004" +
    "\000\002\041\003\000\002\042\012\000\002\040\002\000" +
    "\002\040\003\000\002\043\006\000\002\020\007\000\002" +
    "\020\005\000\002\020\005\000\002\020\004\000\002\020" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\003\000\002\022\003\000\002\022\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\063\004\000\002\063\004\000\002\051\005\000\002" +
    "\051\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\053\004\000\002\054\004\000\002\054\003" +
    "\000\002\055\005\000\002\047\006\000\002\050\002\000" +
    "\002\050\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\150\002\uffff\003\uffff\011\uffff\031\uffff\032" +
    "\uffff\033\007\034\uffff\035\uffff\040\uffff\041\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052" +
    "\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\065\uffff" +
    "\067\uffff\071\uffff\073\uffff\074\uffff\075\uffff\076\uffff\077" +
    "\uffff\100\uffff\101\uffff\102\uffff\103\uffff\104\uffff\105\uffff" +
    "\106\uffff\107\uffff\110\uffff\111\uffff\112\uffff\113\uffff\114" +
    "\uffff\115\uffff\116\uffff\117\uffff\120\uffff\121\uffff\122\uffff" +
    "\123\uffff\001\002\000\146\002\ufffa\003\064\011\060\031" +
    "\062\032\025\034\035\035\120\040\112\041\052\043\067" +
    "\044\111\045\050\046\051\047\072\050\024\051\103\052" +
    "\046\053\105\054\034\055\056\056\057\057\065\065\124" +
    "\067\022\071\117\073\106\074\101\075\121\076\071\077" +
    "\054\100\044\101\017\102\107\103\041\104\030\105\102" +
    "\106\114\107\061\110\116\111\073\112\077\113\020\114" +
    "\122\115\123\116\037\117\047\120\055\121\021\122\036" +
    "\123\040\001\002\000\150\002\ufffc\003\ufffc\011\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\040\ufffc\041\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc" +
    "\065\ufffc\067\ufffc\071\ufffc\073\ufffc\074\ufffc\075\ufffc\076" +
    "\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc" +
    "\105\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113" +
    "\ufffc\114\ufffc\115\ufffc\116\ufffc\117\ufffc\120\ufffc\121\ufffc" +
    "\122\ufffc\123\ufffc\001\002\000\004\002\016\001\002\000" +
    "\004\065\012\001\002\000\150\002\ufffe\003\ufffe\011\ufffe" +
    "\031\ufffe\032\ufffe\033\007\034\ufffe\035\ufffe\040\ufffe\041" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057" +
    "\ufffe\065\ufffe\067\ufffe\071\ufffe\073\ufffe\074\ufffe\075\ufffe" +
    "\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104" +
    "\ufffe\105\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe" +
    "\113\ufffe\114\ufffe\115\ufffe\116\ufffe\117\ufffe\120\ufffe\121" +
    "\ufffe\122\ufffe\123\ufffe\001\002\000\150\002\ufffd\003\ufffd" +
    "\011\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\040" +
    "\ufffd\041\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\065\ufffd\067\ufffd\071\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\103" +
    "\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd" +
    "\112\ufffd\113\ufffd\114\ufffd\115\ufffd\116\ufffd\117\ufffd\120" +
    "\ufffd\121\ufffd\122\ufffd\123\ufffd\001\002\000\004\073\013" +
    "\001\002\000\004\066\014\001\002\000\004\060\015\001" +
    "\002\000\150\002\ufffb\003\ufffb\011\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\040\ufffb\041\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\065\ufffb\067" +
    "\ufffb\071\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb" +
    "\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106" +
    "\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\114\ufffb" +
    "\115\ufffb\116\ufffb\117\ufffb\120\ufffb\121\ufffb\122\ufffb\123" +
    "\ufffb\001\002\000\004\002\001\001\002\000\004\065\uff75" +
    "\001\002\000\004\065\uff6b\001\002\000\004\065\uff65\001" +
    "\002\000\006\070\uffe8\077\372\001\002\000\022\010\uff92" +
    "\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\060" +
    "\371\001\002\000\004\065\uff7e\001\002\000\004\065\365" +
    "\001\002\000\004\002\000\001\002\000\004\060\364\001" +
    "\002\000\004\065\uff72\001\002\000\056\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93" +
    "\030\uff93\060\uff93\061\uff93\063\uff93\066\uff93\070\uff93\072" +
    "\uff93\001\002\000\146\002\ufff3\003\ufff3\011\ufff3\031\ufff3" +
    "\032\ufff3\034\ufff3\035\ufff3\040\ufff3\041\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\065\ufff3\067" +
    "\ufff3\071\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3" +
    "\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106" +
    "\ufff3\107\ufff3\110\ufff3\111\ufff3\112\ufff3\113\ufff3\114\ufff3" +
    "\115\ufff3\116\ufff3\117\ufff3\120\ufff3\121\ufff3\122\ufff3\123" +
    "\ufff3\001\002\000\146\002\ufff5\003\ufff5\011\ufff5\031\ufff5" +
    "\032\ufff5\034\ufff5\035\ufff5\040\ufff5\041\ufff5\043\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\065\ufff5\067" +
    "\ufff5\071\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5" +
    "\100\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106" +
    "\ufff5\107\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\114\ufff5" +
    "\115\ufff5\116\ufff5\117\ufff5\120\ufff5\121\ufff5\122\ufff5\123" +
    "\ufff5\001\002\000\004\065\uff78\001\002\000\152\002\uffda" +
    "\003\uffda\011\uffda\031\uffda\032\uffda\034\uffda\035\uffda\040" +
    "\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\065\uffda\067\uffda\070\uffda\071\uffda" +
    "\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101" +
    "\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107\uffda" +
    "\110\uffda\111\uffda\112\uffda\113\uffda\114\uffda\115\uffda\116" +
    "\uffda\117\uffda\120\uffda\121\uffda\122\uffda\123\uffda\001\002" +
    "\000\056\010\uff5f\011\uff5f\012\uff5f\013\uff5f\014\uff5f\015" +
    "\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f" +
    "\024\uff5f\025\uff5f\026\uff5f\030\uff5f\060\uff5f\061\uff5f\063" +
    "\uff5f\066\uff5f\070\uff5f\072\uff5f\001\002\000\004\065\uff68" +
    "\001\002\000\056\010\uff5e\011\uff5e\012\uff5e\013\uff5e\014" +
    "\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e" +
    "\023\uff5e\024\uff5e\025\uff5e\026\uff5e\030\uff5e\060\uff5e\061" +
    "\uff5e\063\uff5e\066\uff5e\070\uff5e\072\uff5e\001\002\000\004" +
    "\065\uff73\001\002\000\072\004\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\030\uff8b\060\uff8b\061\uff8b\062\uff8b" +
    "\063\uff8b\064\uff8b\066\uff8b\070\uff8b\072\uff8b\001\002\000" +
    "\020\010\162\011\153\012\161\013\150\014\157\015\163" +
    "\016\147\001\002\000\004\065\uff76\001\002\000\146\002" +
    "\ufff7\003\ufff7\011\ufff7\031\ufff7\032\ufff7\034\ufff7\035\ufff7" +
    "\040\ufff7\041\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\065\ufff7\067\ufff7\071\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7\111" +
    "\ufff7\112\ufff7\113\ufff7\114\ufff7\115\ufff7\116\ufff7\117\ufff7" +
    "\120\ufff7\121\ufff7\122\ufff7\123\ufff7\001\002\000\004\065" +
    "\uff7a\001\002\000\004\065\uff67\001\002\000\004\065\uff82" +
    "\001\002\000\004\065\uff80\001\002\000\004\065\334\001" +
    "\002\000\072\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d" +
    "\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\030\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064" +
    "\uff8d\066\uff8d\070\uff8d\072\uff8d\001\002\000\076\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\030\uff8c\060" +
    "\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff64\066\uff8c" +
    "\070\uff8c\071\326\072\uff8c\001\002\000\004\065\uff66\001" +
    "\002\000\004\065\uff7c\001\002\000\004\065\uff7b\001\002" +
    "\000\124\011\060\044\111\045\050\046\051\047\072\050" +
    "\024\051\103\052\046\053\105\054\034\055\056\056\057" +
    "\057\065\065\124\067\022\071\117\073\106\074\101\075" +
    "\121\076\071\077\054\100\044\101\017\102\107\103\041" +
    "\104\030\105\102\106\114\107\061\110\116\111\073\112" +
    "\077\113\020\114\122\115\123\116\037\117\047\120\055" +
    "\121\021\122\036\123\040\001\002\000\004\065\uff6f\001" +
    "\002\000\004\077\315\001\002\000\056\010\uff96\011\uff96" +
    "\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96" +
    "\030\uff96\060\uff96\061\uff96\063\uff96\066\uff96\070\uff96\072" +
    "\uff96\001\002\000\150\002\uffea\003\uffea\011\uffea\031\uffea" +
    "\032\uffea\034\uffea\035\uffea\040\uffea\041\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\314\065" +
    "\uffea\067\uffea\071\uffea\073\uffea\074\uffea\075\uffea\076\uffea" +
    "\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105" +
    "\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\113\uffea" +
    "\114\uffea\115\uffea\116\uffea\117\uffea\120\uffea\121\uffea\122" +
    "\uffea\123\uffea\001\002\000\004\065\uff77\001\002\000\056" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\030\uff95\060\uff95\061\uff95\063\uff95\066" +
    "\uff95\070\uff95\072\uff95\001\002\000\004\077\276\001\002" +
    "\000\004\060\275\001\002\000\056\010\uff62\011\uff62\012" +
    "\uff62\013\uff62\014\uff62\015\uff62\016\uff62\017\uff62\020\uff62" +
    "\021\uff62\022\uff62\023\uff62\024\uff62\025\uff62\026\uff62\030" +
    "\uff62\060\uff62\061\uff62\063\uff62\066\uff62\070\uff62\072\uff62" +
    "\001\002\000\004\065\uff7f\001\002\000\004\065\uff6d\001" +
    "\002\000\146\002\ufff4\003\ufff4\011\ufff4\031\ufff4\032\ufff4" +
    "\034\ufff4\035\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\065\ufff4\067\ufff4\071" +
    "\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4" +
    "\101\ufff4\102\ufff4\103\ufff4\104\ufff4\105\ufff4\106\ufff4\107" +
    "\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4\114\ufff4\115\ufff4" +
    "\116\ufff4\117\ufff4\120\ufff4\121\ufff4\122\ufff4\123\ufff4\001" +
    "\002\000\004\065\271\001\002\000\146\002\ufff6\003\ufff6" +
    "\011\ufff6\031\ufff6\032\ufff6\034\ufff6\035\ufff6\040\ufff6\041" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\065\ufff6\067\ufff6\071\ufff6\073\ufff6\074\ufff6\075\ufff6" +
    "\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\104" +
    "\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6" +
    "\113\ufff6\114\ufff6\115\ufff6\116\ufff6\117\ufff6\120\ufff6\121" +
    "\ufff6\122\ufff6\123\ufff6\001\002\000\004\065\uff6c\001\002" +
    "\000\150\002\ufff2\003\ufff2\011\ufff2\031\ufff2\032\ufff2\034" +
    "\ufff2\035\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\057\ufff2\060\270\065\ufff2\067\ufff2" +
    "\071\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100" +
    "\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2" +
    "\107\ufff2\110\ufff2\111\ufff2\112\ufff2\113\ufff2\114\ufff2\115" +
    "\ufff2\116\ufff2\117\ufff2\120\ufff2\121\ufff2\122\ufff2\123\ufff2" +
    "\001\002\000\056\010\uff61\011\uff61\012\uff61\013\uff61\014" +
    "\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61\022\uff61" +
    "\023\uff61\024\uff61\025\uff61\026\uff61\030\uff61\060\uff61\061" +
    "\uff61\063\uff61\066\uff61\070\uff61\072\uff61\001\002\000\004" +
    "\065\uff71\001\002\000\004\065\uff7d\001\002\000\036\004" +
    "\232\005\234\006\237\007\236\010\uff91\011\uff91\012\uff91" +
    "\013\uff91\014\uff91\015\uff91\016\uff91\060\267\062\144\064" +
    "\233\001\002\000\004\065\uff79\001\002\000\056\010\uff63" +
    "\011\uff63\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\017" +
    "\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025\uff63" +
    "\026\uff63\030\uff63\060\uff63\061\uff63\063\uff63\066\uff63\070" +
    "\uff63\072\uff63\001\002\000\004\065\uff74\001\002\000\072" +
    "\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\030" +
    "\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\066\uff8a" +
    "\070\uff8a\072\uff8a\001\002\000\004\065\uff81\001\002\000" +
    "\126\011\060\027\132\044\111\045\050\046\051\047\072" +
    "\050\024\051\103\052\046\053\105\054\034\055\056\056" +
    "\057\057\065\065\124\067\022\071\117\073\106\074\101" +
    "\075\121\076\071\077\054\100\044\101\017\102\107\103" +
    "\041\104\030\105\102\106\114\107\061\110\116\111\073" +
    "\112\077\113\020\114\122\115\123\116\037\117\047\120" +
    "\055\121\021\122\036\123\040\001\002\000\004\060\265" +
    "\001\002\000\004\065\uff70\001\002\000\146\002\ufff9\003" +
    "\064\011\060\031\062\032\025\034\035\035\120\040\112" +
    "\041\052\043\067\044\111\045\050\046\051\047\072\050" +
    "\024\051\103\052\046\053\105\054\034\055\056\056\057" +
    "\057\065\065\124\067\022\071\117\073\106\074\101\075" +
    "\121\076\071\077\054\100\044\101\017\102\107\103\041" +
    "\104\030\105\102\106\114\107\061\110\116\111\073\112" +
    "\077\113\020\114\122\115\123\116\037\117\047\120\055" +
    "\121\021\122\036\123\040\001\002\000\004\065\uff6e\001" +
    "\002\000\130\011\060\027\132\044\111\045\050\046\051" +
    "\047\072\050\024\051\103\052\046\053\105\054\034\055" +
    "\056\056\057\057\065\065\124\067\022\071\117\072\260" +
    "\073\106\074\101\075\121\076\071\077\054\100\044\101" +
    "\017\102\107\103\041\104\030\105\102\106\114\107\061" +
    "\110\116\111\073\112\077\113\020\114\122\115\123\116" +
    "\037\117\047\120\055\121\021\122\036\123\040\001\002" +
    "\000\004\065\177\001\002\000\056\010\uff60\011\uff60\012" +
    "\uff60\013\uff60\014\uff60\015\uff60\016\uff60\017\uff60\020\uff60" +
    "\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60\026\uff60\030" +
    "\uff60\060\uff60\061\uff60\063\uff60\066\uff60\070\uff60\072\uff60" +
    "\001\002\000\004\065\uff6a\001\002\000\004\065\uff69\001" +
    "\002\000\126\011\060\027\132\044\111\045\050\046\051" +
    "\047\072\050\024\051\103\052\046\053\105\054\034\055" +
    "\056\056\057\057\065\065\124\067\022\071\117\073\106" +
    "\074\101\075\121\076\071\077\054\100\044\101\017\102" +
    "\107\103\041\104\030\105\102\106\114\107\061\110\116" +
    "\111\073\112\077\113\020\114\122\115\123\116\037\117" +
    "\047\120\055\121\021\122\036\123\040\001\002\000\056" +
    "\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\uff92\030\uff92\060\uff92\061\uff92\063\uff92\066" +
    "\uff92\070\uff92\072\uff92\001\002\000\024\025\uffa4\026\uffa4" +
    "\030\uffa4\060\uffa4\061\uffa4\063\uffa4\066\uffa4\070\uffa4\072" +
    "\uffa4\001\002\000\056\010\162\011\153\012\161\013\150" +
    "\014\157\015\163\016\147\017\152\020\154\021\156\022" +
    "\151\023\155\024\160\025\uff9d\026\uff9d\030\uff9d\060\uff9d" +
    "\061\uff9d\063\uff9d\066\uff9d\070\uff9d\072\uff9d\001\002\000" +
    "\012\025\135\026\136\030\134\066\146\001\002\000\060" +
    "\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\030\uff91\060\uff91\061\uff91\062\144\063" +
    "\uff91\066\uff91\070\uff91\072\uff91\001\002\000\126\011\060" +
    "\027\132\044\111\045\050\046\051\047\072\050\024\051" +
    "\103\052\046\053\105\054\034\055\056\056\057\057\065" +
    "\065\124\067\022\071\117\073\106\074\101\075\121\076" +
    "\071\077\054\100\044\101\017\102\107\103\041\104\030" +
    "\105\102\106\114\107\061\110\116\111\073\112\077\113" +
    "\020\114\122\115\123\116\037\117\047\120\055\121\021" +
    "\122\036\123\040\001\002\000\024\025\uffa5\026\uffa5\030" +
    "\uffa5\060\uffa5\061\uffa5\063\uffa5\066\uffa5\070\uffa5\072\uffa5" +
    "\001\002\000\126\011\060\027\132\044\111\045\050\046" +
    "\051\047\072\050\024\051\103\052\046\053\105\054\034" +
    "\055\056\056\057\057\065\065\124\067\022\071\117\073" +
    "\106\074\101\075\121\076\071\077\054\100\044\101\017" +
    "\102\107\103\041\104\030\105\102\106\114\107\061\110" +
    "\116\111\073\112\077\113\020\114\122\115\123\116\037" +
    "\117\047\120\055\121\021\122\036\123\040\001\002\000" +
    "\126\011\060\027\132\044\111\045\050\046\051\047\072" +
    "\050\024\051\103\052\046\053\105\054\034\055\056\056" +
    "\057\057\065\065\124\067\022\071\117\073\106\074\101" +
    "\075\121\076\071\077\054\100\044\101\017\102\107\103" +
    "\041\104\030\105\102\106\114\107\061\110\116\111\073" +
    "\112\077\113\020\114\122\115\123\116\037\117\047\120" +
    "\055\121\021\122\036\123\040\001\002\000\126\011\060" +
    "\027\132\044\111\045\050\046\051\047\072\050\024\051" +
    "\103\052\046\053\105\054\034\055\056\056\057\057\065" +
    "\065\124\067\022\071\117\073\106\074\101\075\121\076" +
    "\071\077\054\100\044\101\017\102\107\103\041\104\030" +
    "\105\102\106\114\107\061\110\116\111\073\112\077\113" +
    "\020\114\122\115\123\116\037\117\047\120\055\121\021" +
    "\122\036\123\040\001\002\000\024\025\135\026\uffa6\030" +
    "\uffa6\060\uffa6\061\uffa6\063\uffa6\066\uffa6\070\uffa6\072\uffa6" +
    "\001\002\000\024\025\uffa7\026\uffa7\030\uffa7\060\uffa7\061" +
    "\uffa7\063\uffa7\066\uffa7\070\uffa7\072\uffa7\001\002\000\012" +
    "\025\135\026\136\030\134\063\142\001\002\000\126\011" +
    "\060\027\132\044\111\045\050\046\051\047\072\050\024" +
    "\051\103\052\046\053\105\054\034\055\056\056\057\057" +
    "\065\065\124\067\022\071\117\073\106\074\101\075\121" +
    "\076\071\077\054\100\044\101\017\102\107\103\041\104" +
    "\030\105\102\106\114\107\061\110\116\111\073\112\077" +
    "\113\020\114\122\115\123\116\037\117\047\120\055\121" +
    "\021\122\036\123\040\001\002\000\024\025\135\026\136" +
    "\030\134\060\uffa8\061\uffa8\063\uffa8\066\uffa8\070\uffa8\072" +
    "\uffa8\001\002\000\100\044\111\045\050\046\051\047\072" +
    "\050\024\051\103\052\046\053\105\054\034\055\056\056" +
    "\057\057\065\077\054\100\044\101\017\102\107\103\041" +
    "\104\030\105\102\106\114\107\061\110\116\111\073\112" +
    "\077\113\020\114\122\115\123\116\037\117\047\120\055" +
    "\121\021\001\002\000\072\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\030\uff8e\060\uff8e\061\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\066\uff8e\070\uff8e\072\uff8e\001\002\000" +
    "\056\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\026\uff97\030\uff97\060\uff97\061\uff97\063\uff97" +
    "\066\uff97\070\uff97\072\uff97\001\002\000\056\010\uff8f\011" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\030\uff8f\060\uff8f\061\uff8f\063\uff8f\066\uff8f\070\uff8f" +
    "\072\uff8f\001\002\000\124\011\060\044\111\045\050\046" +
    "\051\047\072\050\024\051\103\052\046\053\105\054\034" +
    "\055\056\056\057\057\065\065\124\067\022\071\117\073" +
    "\106\074\101\075\121\076\071\077\054\100\044\101\017" +
    "\102\107\103\041\104\030\105\102\106\114\107\061\110" +
    "\116\111\073\112\077\113\020\114\122\115\123\116\037" +
    "\117\047\120\055\121\021\122\036\123\040\001\002\000" +
    "\124\011\060\044\111\045\050\046\051\047\072\050\024" +
    "\051\103\052\046\053\105\054\034\055\056\056\057\057" +
    "\065\065\124\067\022\071\117\073\106\074\101\075\121" +
    "\076\071\077\054\100\044\101\017\102\107\103\041\104" +
    "\030\105\102\106\114\107\061\110\116\111\073\112\077" +
    "\113\020\114\122\115\123\116\037\117\047\120\055\121" +
    "\021\122\036\123\040\001\002\000\124\011\060\044\111" +
    "\045\050\046\051\047\072\050\024\051\103\052\046\053" +
    "\105\054\034\055\056\056\057\057\065\065\124\067\022" +
    "\071\117\073\106\074\101\075\121\076\071\077\054\100" +
    "\044\101\017\102\107\103\041\104\030\105\102\106\114" +
    "\107\061\110\116\111\073\112\077\113\020\114\122\115" +
    "\123\116\037\117\047\120\055\121\021\122\036\123\040" +
    "\001\002\000\124\011\060\044\111\045\050\046\051\047" +
    "\072\050\024\051\103\052\046\053\105\054\034\055\056" +
    "\056\057\057\065\065\124\067\022\071\117\073\106\074" +
    "\101\075\121\076\071\077\054\100\044\101\017\102\107" +
    "\103\041\104\030\105\102\106\114\107\061\110\116\111" +
    "\073\112\077\113\020\114\122\115\123\116\037\117\047" +
    "\120\055\121\021\122\036\123\040\001\002\000\124\011" +
    "\060\044\111\045\050\046\051\047\072\050\024\051\103" +
    "\052\046\053\105\054\034\055\056\056\057\057\065\065" +
    "\124\067\022\071\117\073\106\074\101\075\121\076\071" +
    "\077\054\100\044\101\017\102\107\103\041\104\030\105" +
    "\102\106\114\107\061\110\116\111\073\112\077\113\020" +
    "\114\122\115\123\116\037\117\047\120\055\121\021\122" +
    "\036\123\040\001\002\000\124\011\060\044\111\045\050" +
    "\046\051\047\072\050\024\051\103\052\046\053\105\054" +
    "\034\055\056\056\057\057\065\065\124\067\022\071\117" +
    "\073\106\074\101\075\121\076\071\077\054\100\044\101" +
    "\017\102\107\103\041\104\030\105\102\106\114\107\061" +
    "\110\116\111\073\112\077\113\020\114\122\115\123\116" +
    "\037\117\047\120\055\121\021\122\036\123\040\001\002" +
    "\000\124\011\060\044\111\045\050\046\051\047\072\050" +
    "\024\051\103\052\046\053\105\054\034\055\056\056\057" +
    "\057\065\065\124\067\022\071\117\073\106\074\101\075" +
    "\121\076\071\077\054\100\044\101\017\102\107\103\041" +
    "\104\030\105\102\106\114\107\061\110\116\111\073\112" +
    "\077\113\020\114\122\115\123\116\037\117\047\120\055" +
    "\121\021\122\036\123\040\001\002\000\124\011\060\044" +
    "\111\045\050\046\051\047\072\050\024\051\103\052\046" +
    "\053\105\054\034\055\056\056\057\057\065\065\124\067" +
    "\022\071\117\073\106\074\101\075\121\076\071\077\054" +
    "\100\044\101\017\102\107\103\041\104\030\105\102\106" +
    "\114\107\061\110\116\111\073\112\077\113\020\114\122" +
    "\115\123\116\037\117\047\120\055\121\021\122\036\123" +
    "\040\001\002\000\124\011\060\044\111\045\050\046\051" +
    "\047\072\050\024\051\103\052\046\053\105\054\034\055" +
    "\056\056\057\057\065\065\124\067\022\071\117\073\106" +
    "\074\101\075\121\076\071\077\054\100\044\101\017\102" +
    "\107\103\041\104\030\105\102\106\114\107\061\110\116" +
    "\111\073\112\077\113\020\114\122\115\123\116\037\117" +
    "\047\120\055\121\021\122\036\123\040\001\002\000\124" +
    "\011\060\044\111\045\050\046\051\047\072\050\024\051" +
    "\103\052\046\053\105\054\034\055\056\056\057\057\065" +
    "\065\124\067\022\071\117\073\106\074\101\075\121\076" +
    "\071\077\054\100\044\101\017\102\107\103\041\104\030" +
    "\105\102\106\114\107\061\110\116\111\073\112\077\113" +
    "\020\114\122\115\123\116\037\117\047\120\055\121\021" +
    "\122\036\123\040\001\002\000\124\011\060\044\111\045" +
    "\050\046\051\047\072\050\024\051\103\052\046\053\105" +
    "\054\034\055\056\056\057\057\065\065\124\067\022\071" +
    "\117\073\106\074\101\075\121\076\071\077\054\100\044" +
    "\101\017\102\107\103\041\104\030\105\102\106\114\107" +
    "\061\110\116\111\073\112\077\113\020\114\122\115\123" +
    "\116\037\117\047\120\055\121\021\122\036\123\040\001" +
    "\002\000\056\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90" +
    "\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023" +
    "\uff90\024\uff90\025\uff90\026\uff90\030\uff90\060\uff90\061\uff90" +
    "\063\uff90\066\uff90\070\uff90\072\uff90\001\002\000\056\010" +
    "\uff9c\011\uff9c\012\161\013\150\014\157\015\163\016\147" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\030\uff9c\060\uff9c\061\uff9c\063\uff9c\066\uff9c" +
    "\070\uff9c\072\uff9c\001\002\000\056\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\014\157\015\163\016\147\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\030" +
    "\uff9a\060\uff9a\061\uff9a\063\uff9a\066\uff9a\070\uff9a\072\uff9a" +
    "\001\002\000\042\010\162\011\153\012\161\013\150\014" +
    "\157\015\163\016\147\025\uff9e\026\uff9e\030\uff9e\060\uff9e" +
    "\061\uff9e\063\uff9e\066\uff9e\070\uff9e\072\uff9e\001\002\000" +
    "\056\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\163" +
    "\016\147\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\030\uff98\060\uff98\061\uff98\063\uff98" +
    "\066\uff98\070\uff98\072\uff98\001\002\000\042\010\162\011" +
    "\153\012\161\013\150\014\157\015\163\016\147\025\uffa1" +
    "\026\uffa1\030\uffa1\060\uffa1\061\uffa1\063\uffa1\066\uffa1\070" +
    "\uffa1\072\uffa1\001\002\000\042\010\162\011\153\012\161" +
    "\013\150\014\157\015\163\016\147\025\uff9f\026\uff9f\030" +
    "\uff9f\060\uff9f\061\uff9f\063\uff9f\066\uff9f\070\uff9f\072\uff9f" +
    "\001\002\000\042\010\162\011\153\012\161\013\150\014" +
    "\157\015\163\016\147\025\uffa2\026\uffa2\030\uffa2\060\uffa2" +
    "\061\uffa2\063\uffa2\066\uffa2\070\uffa2\072\uffa2\001\002\000" +
    "\056\010\uff9b\011\uff9b\012\161\013\150\014\157\015\163" +
    "\016\147\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\030\uff9b\060\uff9b\061\uff9b\063\uff9b" +
    "\066\uff9b\070\uff9b\072\uff9b\001\002\000\042\010\162\011" +
    "\153\012\161\013\150\014\157\015\163\016\147\025\uffa3" +
    "\026\uffa3\030\uffa3\060\uffa3\061\uffa3\063\uffa3\066\uffa3\070" +
    "\uffa3\072\uffa3\001\002\000\042\010\162\011\153\012\161" +
    "\013\150\014\157\015\163\016\147\025\uffa0\026\uffa0\030" +
    "\uffa0\060\uffa0\061\uffa0\063\uffa0\066\uffa0\070\uffa0\072\uffa0" +
    "\001\002\000\056\010\uff99\011\uff99\012\uff99\013\uff99\014" +
    "\157\015\163\016\147\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\030\uff99\060\uff99\061" +
    "\uff99\063\uff99\066\uff99\070\uff99\072\uff99\001\002\000\126" +
    "\011\060\027\132\044\111\045\050\046\051\047\072\050" +
    "\024\051\103\052\046\053\105\054\034\055\056\056\057" +
    "\057\065\065\124\067\022\071\117\073\106\074\101\075" +
    "\121\076\071\077\054\100\044\101\017\102\107\103\041" +
    "\104\030\105\102\106\114\107\061\110\116\111\073\112" +
    "\077\113\020\114\122\115\123\116\037\117\047\120\055" +
    "\121\021\122\036\123\040\001\002\000\012\025\135\026" +
    "\136\030\134\066\201\001\002\000\004\067\202\001\002" +
    "\000\010\036\205\037\207\070\uffb7\001\002\000\010\036" +
    "\uffb4\037\uffb4\070\uffb4\001\002\000\010\036\205\037\207" +
    "\070\uffb6\001\002\000\124\011\060\044\111\045\050\046" +
    "\051\047\072\050\024\051\103\052\046\053\105\054\034" +
    "\055\056\056\057\057\065\065\124\067\022\071\117\073" +
    "\106\074\101\075\121\076\071\077\054\100\044\101\017" +
    "\102\107\103\041\104\030\105\102\106\114\107\061\110" +
    "\116\111\073\112\077\113\020\114\122\115\123\116\037" +
    "\117\047\120\055\121\021\122\036\123\040\001\002\000" +
    "\004\070\247\001\002\000\004\063\210\001\002\000\004" +
    "\067\211\001\002\000\144\003\217\011\060\031\062\032" +
    "\025\034\035\035\120\040\112\041\052\044\111\045\050" +
    "\046\051\047\072\050\024\051\103\052\046\053\105\054" +
    "\034\055\056\056\057\057\065\065\124\067\022\070\uffd5" +
    "\071\117\073\106\074\101\075\121\076\071\077\054\100" +
    "\044\101\017\102\107\103\041\104\030\105\102\106\114" +
    "\107\061\110\116\111\073\112\077\113\020\114\122\115" +
    "\123\116\037\117\047\120\055\121\021\122\036\123\040" +
    "\001\002\000\022\010\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\060\246\001\002\000\004\060\245" +
    "\001\002\000\144\003\uffcf\011\uffcf\031\uffcf\032\uffcf\034" +
    "\uffcf\035\uffcf\040\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\065\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101" +
    "\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf" +
    "\110\uffcf\111\uffcf\112\uffcf\113\uffcf\114\uffcf\115\uffcf\116" +
    "\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\001\002" +
    "\000\144\003\uffd2\011\uffd2\031\uffd2\032\uffd2\034\uffd2\035" +
    "\uffd2\040\uffd2\041\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\uffd2\065\uffd2\067\uffd2\070\uffd2\071\uffd2\073\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102" +
    "\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2" +
    "\111\uffd2\112\uffd2\113\uffd2\114\uffd2\115\uffd2\116\uffd2\117" +
    "\uffd2\120\uffd2\121\uffd2\122\uffd2\123\uffd2\001\002\000\004" +
    "\070\244\001\002\000\146\003\uffc6\011\uffc6\031\uffc6\032" +
    "\uffc6\034\uffc6\035\uffc6\040\uffc6\041\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\243\065\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6" +
    "\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114" +
    "\uffc6\115\uffc6\116\uffc6\117\uffc6\120\uffc6\121\uffc6\122\uffc6" +
    "\123\uffc6\001\002\000\004\060\242\001\002\000\144\003" +
    "\uffd0\011\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\040\uffd0" +
    "\041\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\065\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112" +
    "\uffd0\113\uffd0\114\uffd0\115\uffd0\116\uffd0\117\uffd0\120\uffd0" +
    "\121\uffd0\122\uffd0\123\uffd0\001\002\000\144\003\uffd1\011" +
    "\uffd1\031\uffd1\032\uffd1\034\uffd1\035\uffd1\040\uffd1\041\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\065\uffd1" +
    "\067\uffd1\070\uffd1\071\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1" +
    "\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112\uffd1\113" +
    "\uffd1\114\uffd1\115\uffd1\116\uffd1\117\uffd1\120\uffd1\121\uffd1" +
    "\122\uffd1\123\uffd1\001\002\000\146\003\uffce\011\uffce\031" +
    "\uffce\032\uffce\034\uffce\035\uffce\040\uffce\041\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\241\065\uffce" +
    "\067\uffce\070\uffce\071\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce" +
    "\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce\113" +
    "\uffce\114\uffce\115\uffce\116\uffce\117\uffce\120\uffce\121\uffce" +
    "\122\uffce\123\uffce\001\002\000\036\004\232\005\234\006" +
    "\237\007\236\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\060\231\062\144\064\233\001\002\000" +
    "\004\060\230\001\002\000\144\003\217\011\060\031\062" +
    "\032\025\034\035\035\120\040\112\041\052\044\111\045" +
    "\050\046\051\047\072\050\024\051\103\052\046\053\105" +
    "\054\034\055\056\056\057\057\065\065\124\067\022\070" +
    "\uffd4\071\117\073\106\074\101\075\121\076\071\077\054" +
    "\100\044\101\017\102\107\103\041\104\030\105\102\106" +
    "\114\107\061\110\116\111\073\112\077\113\020\114\122" +
    "\115\123\116\037\117\047\120\055\121\021\122\036\123" +
    "\040\001\002\000\144\003\uffd3\011\uffd3\031\uffd3\032\uffd3" +
    "\034\uffd3\035\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\065\uffd3\067\uffd3\070\uffd3\071" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3" +
    "\101\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107" +
    "\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\114\uffd3\115\uffd3" +
    "\116\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\001" +
    "\002\000\144\003\uffcc\011\uffcc\031\uffcc\032\uffcc\034\uffcc" +
    "\035\uffcc\040\uffcc\041\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\065\uffcc\067\uffcc\070\uffcc\071\uffcc\073" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110" +
    "\uffcc\111\uffcc\112\uffcc\113\uffcc\114\uffcc\115\uffcc\116\uffcc" +
    "\117\uffcc\120\uffcc\121\uffcc\122\uffcc\123\uffcc\001\002\000" +
    "\144\003\uffc9\011\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9" +
    "\040\uffc9\041\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\073\uffc9\074" +
    "\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9" +
    "\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111" +
    "\uffc9\112\uffc9\113\uffc9\114\uffc9\115\uffc9\116\uffc9\117\uffc9" +
    "\120\uffc9\121\uffc9\122\uffc9\123\uffc9\001\002\000\126\011" +
    "\uffc3\027\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\065\uffc3\067\uffc3\071\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104" +
    "\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3" +
    "\113\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3\121" +
    "\uffc3\122\uffc3\123\uffc3\001\002\000\126\011\uffc4\027\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\065\uffc4" +
    "\067\uffc4\071\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\114" +
    "\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4" +
    "\123\uffc4\001\002\000\126\011\uffc2\027\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\065\uffc2\067\uffc2\071" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107" +
    "\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\115\uffc2" +
    "\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2\123\uffc2\001" +
    "\002\000\126\011\060\027\132\044\111\045\050\046\051" +
    "\047\072\050\024\051\103\052\046\053\105\054\034\055" +
    "\056\056\057\057\065\065\124\067\022\071\117\073\106" +
    "\074\101\075\121\076\071\077\054\100\044\101\017\102" +
    "\107\103\041\104\030\105\102\106\114\107\061\110\116" +
    "\111\073\112\077\113\020\114\122\115\123\116\037\117" +
    "\047\120\055\121\021\122\036\123\040\001\002\000\126" +
    "\011\uffc0\027\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\065\uffc0\067\uffc0\071\uffc0\073\uffc0\074\uffc0\075" +
    "\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0" +
    "\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0\112" +
    "\uffc0\113\uffc0\114\uffc0\115\uffc0\116\uffc0\117\uffc0\120\uffc0" +
    "\121\uffc0\122\uffc0\123\uffc0\001\002\000\126\011\uffc1\027" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\065" +
    "\uffc1\067\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1" +
    "\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105" +
    "\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1" +
    "\114\uffc1\115\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1\122" +
    "\uffc1\123\uffc1\001\002\000\012\025\135\026\136\030\134" +
    "\060\uffc5\001\002\000\144\003\uffcb\011\uffcb\031\uffcb\032" +
    "\uffcb\034\uffcb\035\uffcb\040\uffcb\041\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\065\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100" +
    "\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb" +
    "\107\uffcb\110\uffcb\111\uffcb\112\uffcb\113\uffcb\114\uffcb\115" +
    "\uffcb\116\uffcb\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb" +
    "\001\002\000\144\003\uffca\011\uffca\031\uffca\032\uffca\034" +
    "\uffca\035\uffca\040\uffca\041\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\065\uffca\067\uffca\070\uffca\071\uffca" +
    "\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101" +
    "\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107\uffca" +
    "\110\uffca\111\uffca\112\uffca\113\uffca\114\uffca\115\uffca\116" +
    "\uffca\117\uffca\120\uffca\121\uffca\122\uffca\123\uffca\001\002" +
    "\000\144\003\uffc7\011\uffc7\031\uffc7\032\uffc7\034\uffc7\035" +
    "\uffc7\040\uffc7\041\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102" +
    "\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7" +
    "\111\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117" +
    "\uffc7\120\uffc7\121\uffc7\122\uffc7\123\uffc7\001\002\000\010" +
    "\036\uffb2\037\uffb2\070\uffb2\001\002\000\144\003\uffcd\011" +
    "\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd\040\uffcd\041\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\065\uffcd" +
    "\067\uffcd\070\uffcd\071\uffcd\073\uffcd\074\uffcd\075\uffcd\076" +
    "\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd" +
    "\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd\112\uffcd\113" +
    "\uffcd\114\uffcd\115\uffcd\116\uffcd\117\uffcd\120\uffcd\121\uffcd" +
    "\122\uffcd\123\uffcd\001\002\000\144\003\uffc8\011\uffc8\031" +
    "\uffc8\032\uffc8\034\uffc8\035\uffc8\040\uffc8\041\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\065\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8" +
    "\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\114" +
    "\uffc8\115\uffc8\116\uffc8\117\uffc8\120\uffc8\121\uffc8\122\uffc8" +
    "\123\uffc8\001\002\000\150\002\uffb8\003\uffb8\011\uffb8\031" +
    "\uffb8\032\uffb8\034\uffb8\035\uffb8\040\uffb8\041\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\065\uffb8" +
    "\067\uffb8\070\uffb8\071\uffb8\073\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8" +
    "\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8" +
    "\122\uffb8\123\uffb8\001\002\000\022\010\162\011\153\012" +
    "\161\013\150\014\157\015\163\016\147\063\251\001\002" +
    "\000\004\067\252\001\002\000\144\003\217\011\060\031" +
    "\062\032\025\034\035\035\120\040\112\041\052\044\111" +
    "\045\050\046\051\047\072\050\024\051\103\052\046\053" +
    "\105\054\034\055\056\056\057\057\065\065\124\067\022" +
    "\070\uffd5\071\117\073\106\074\101\075\121\076\071\077" +
    "\054\100\044\101\017\102\107\103\041\104\030\105\102" +
    "\106\114\107\061\110\116\111\073\112\077\113\020\114" +
    "\122\115\123\116\037\117\047\120\055\121\021\122\036" +
    "\123\040\001\002\000\004\070\254\001\002\000\010\036" +
    "\uffb3\037\uffb3\070\uffb3\001\002\000\010\036\uffb5\037\uffb5" +
    "\070\uffb5\001\002\000\006\061\261\072\262\001\002\000" +
    "\016\025\135\026\136\030\134\061\uffdd\066\uffdd\072\uffdd" +
    "\001\002\000\056\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\060\uffdf\061" +
    "\uffdf\063\uffdf\066\uffdf\070\uffdf\072\uffdf\001\002\000\126" +
    "\011\060\027\132\044\111\045\050\046\051\047\072\050" +
    "\024\051\103\052\046\053\105\054\034\055\056\056\057" +
    "\057\065\065\124\067\022\071\117\073\106\074\101\075" +
    "\121\076\071\077\054\100\044\101\017\102\107\103\041" +
    "\104\030\105\102\106\114\107\061\110\116\111\073\112" +
    "\077\113\020\114\122\115\123\116\037\117\047\120\055" +
    "\121\021\122\036\123\040\001\002\000\056\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\060\uffe0\061\uffe0\063\uffe0\066\uffe0\070\uffe0" +
    "\072\uffe0\001\002\000\016\025\135\026\136\030\134\061" +
    "\uffde\066\uffde\072\uffde\001\002\000\146\002\ufff8\003\ufff8" +
    "\011\ufff8\031\ufff8\032\ufff8\034\ufff8\035\ufff8\040\ufff8\041" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\065\ufff8\067\ufff8\071\ufff8\073\ufff8\074\ufff8\075\ufff8" +
    "\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104" +
    "\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8" +
    "\113\ufff8\114\ufff8\115\ufff8\116\ufff8\117\ufff8\120\ufff8\121" +
    "\ufff8\122\ufff8\123\ufff8\001\002\000\146\002\ufff0\003\ufff0" +
    "\011\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0\040\ufff0\041" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\065\ufff0\067\ufff0\071\ufff0\073\ufff0\074\ufff0\075\ufff0" +
    "\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\104" +
    "\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0" +
    "\113\ufff0\114\ufff0\115\ufff0\116\ufff0\117\ufff0\120\ufff0\121" +
    "\ufff0\122\ufff0\123\ufff0\001\002\000\012\025\135\026\136" +
    "\030\134\060\uffd9\001\002\000\146\002\uffed\003\uffed\011" +
    "\uffed\031\uffed\032\uffed\034\uffed\035\uffed\040\uffed\041\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\065\uffed\067\uffed\071\uffed\073\uffed\074\uffed\075\uffed\076" +
    "\uffed\077\uffed\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed" +
    "\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed\112\uffed\113" +
    "\uffed\114\uffed\115\uffed\116\uffed\117\uffed\120\uffed\121\uffed" +
    "\122\uffed\123\uffed\001\002\000\146\002\uffef\003\uffef\011" +
    "\uffef\031\uffef\032\uffef\034\uffef\035\uffef\040\uffef\041\uffef" +
    "\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\065\uffef\067\uffef\071\uffef\073\uffef\074\uffef\075\uffef\076" +
    "\uffef\077\uffef\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef" +
    "\105\uffef\106\uffef\107\uffef\110\uffef\111\uffef\112\uffef\113" +
    "\uffef\114\uffef\115\uffef\116\uffef\117\uffef\120\uffef\121\uffef" +
    "\122\uffef\123\uffef\001\002\000\130\011\060\027\132\044" +
    "\111\045\050\046\051\047\072\050\024\051\103\052\046" +
    "\053\105\054\034\055\056\056\057\057\065\065\124\066" +
    "\uff84\067\022\071\117\073\106\074\101\075\121\076\071" +
    "\077\054\100\044\101\017\102\107\103\041\104\030\105" +
    "\102\106\114\107\061\110\116\111\073\112\077\113\020" +
    "\114\122\115\123\116\037\117\047\120\055\121\021\122" +
    "\036\123\040\001\002\000\006\061\261\066\uff83\001\002" +
    "\000\004\066\274\001\002\000\072\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85" +
    "\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023" +
    "\uff85\024\uff85\025\uff85\026\uff85\030\uff85\060\uff85\061\uff85" +
    "\062\uff85\063\uff85\064\uff85\066\uff85\070\uff85\072\uff85\001" +
    "\002\000\146\002\uffee\003\uffee\011\uffee\031\uffee\032\uffee" +
    "\034\uffee\035\uffee\040\uffee\041\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\065\uffee\067\uffee\071" +
    "\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee" +
    "\101\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee\107" +
    "\uffee\110\uffee\111\uffee\112\uffee\113\uffee\114\uffee\115\uffee" +
    "\116\uffee\117\uffee\120\uffee\121\uffee\122\uffee\123\uffee\001" +
    "\002\000\004\065\277\001\002\000\010\031\301\066\uffbe" +
    "\077\uffba\001\002\000\004\077\313\001\002\000\004\077" +
    "\uffb9\001\002\000\006\061\310\066\uffbd\001\002\000\004" +
    "\066\304\001\002\000\004\067\305\001\002\000\144\003" +
    "\217\011\060\031\062\032\025\034\035\035\120\040\112" +
    "\041\052\044\111\045\050\046\051\047\072\050\024\051" +
    "\103\052\046\053\105\054\034\055\056\056\057\057\065" +
    "\065\124\067\022\070\uffd5\071\117\073\106\074\101\075" +
    "\121\076\071\077\054\100\044\101\017\102\107\103\041" +
    "\104\030\105\102\106\114\107\061\110\116\111\073\112" +
    "\077\113\020\114\122\115\123\116\037\117\047\120\055" +
    "\121\021\122\036\123\040\001\002\000\004\070\307\001" +
    "\002\000\146\002\uffbf\003\uffbf\011\uffbf\031\uffbf\032\uffbf" +
    "\034\uffbf\035\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\065\uffbf\067\uffbf\071" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107" +
    "\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf\115\uffbf" +
    "\116\uffbf\117\uffbf\120\uffbf\121\uffbf\122\uffbf\123\uffbf\001" +
    "\002\000\006\031\301\077\uffba\001\002\000\004\077\312" +
    "\001\002\000\006\061\uffbc\066\uffbc\001\002\000\006\061" +
    "\uffbb\066\uffbb\001\002\000\146\002\uffeb\003\uffeb\011\uffeb" +
    "\031\uffeb\032\uffeb\034\uffeb\035\uffeb\040\uffeb\041\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\065" +
    "\uffeb\067\uffeb\071\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb" +
    "\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\105" +
    "\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb\112\uffeb\113\uffeb" +
    "\114\uffeb\115\uffeb\116\uffeb\117\uffeb\120\uffeb\121\uffeb\122" +
    "\uffeb\123\uffeb\001\002\000\010\060\uffe2\061\uffe2\064\uffe2" +
    "\001\002\000\010\060\uffdc\061\321\064\320\001\002\000" +
    "\004\060\324\001\002\000\126\011\060\027\132\044\111" +
    "\045\050\046\051\047\072\050\024\051\103\052\046\053" +
    "\105\054\034\055\056\056\057\057\065\065\124\067\022" +
    "\071\117\073\106\074\101\075\121\076\071\077\054\100" +
    "\044\101\017\102\107\103\041\104\030\105\102\106\114" +
    "\107\061\110\116\111\073\112\077\113\020\114\122\115" +
    "\123\116\037\117\047\120\055\121\021\122\036\123\040" +
    "\001\002\000\004\077\322\001\002\000\010\060\uffe3\061" +
    "\uffe3\064\uffe3\001\002\000\012\025\135\026\136\030\134" +
    "\060\uffdb\001\002\000\150\002\uffe9\003\uffe9\011\uffe9\031" +
    "\uffe9\032\uffe9\034\uffe9\035\uffe9\040\uffe9\041\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\065\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\073\uffe9\074\uffe9\075\uffe9\076" +
    "\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9" +
    "\105\uffe9\106\uffe9\107\uffe9\110\uffe9\111\uffe9\112\uffe9\113" +
    "\uffe9\114\uffe9\115\uffe9\116\uffe9\117\uffe9\120\uffe9\121\uffe9" +
    "\122\uffe9\123\uffe9\001\002\000\056\010\uff94\011\uff94\012" +
    "\161\013\150\014\157\015\163\016\147\017\uff94\020\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\030" +
    "\uff94\060\uff94\061\uff94\063\uff94\066\uff94\070\uff94\072\uff94" +
    "\001\002\000\126\011\060\027\132\044\111\045\050\046" +
    "\051\047\072\050\024\051\103\052\046\053\105\054\034" +
    "\055\056\056\057\057\065\065\124\067\022\071\117\073" +
    "\106\074\101\075\121\076\071\077\054\100\044\101\017" +
    "\102\107\103\041\104\030\105\102\106\114\107\061\110" +
    "\116\111\073\112\077\113\020\114\122\115\123\116\037" +
    "\117\047\120\055\121\021\122\036\123\040\001\002\000" +
    "\074\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89" +
    "\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020" +
    "\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89" +
    "\030\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\066" +
    "\uff89\070\uff89\071\326\072\uff89\001\002\000\074\004\uff87" +
    "\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87" +
    "\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\030\uff87\060" +
    "\uff87\061\uff87\062\uff87\063\uff87\064\uff87\066\uff87\070\uff87" +
    "\071\uff87\072\uff87\001\002\000\074\004\uff88\005\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88" +
    "\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\030\uff88\060\uff88\061\uff88" +
    "\062\uff88\063\uff88\064\uff88\066\uff88\070\uff88\071\uff88\072" +
    "\uff88\001\002\000\012\025\135\026\136\030\134\072\333" +
    "\001\002\000\074\004\uff86\005\uff86\006\uff86\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86" +
    "\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025" +
    "\uff86\026\uff86\030\uff86\060\uff86\061\uff86\062\uff86\063\uff86" +
    "\064\uff86\066\uff86\070\uff86\071\uff86\072\uff86\001\002\000" +
    "\126\011\060\027\132\044\111\045\050\046\051\047\072" +
    "\050\024\051\103\052\046\053\105\054\034\055\056\056" +
    "\057\057\065\065\124\067\022\071\117\073\106\074\101" +
    "\075\121\076\071\077\054\100\044\101\017\102\107\103" +
    "\041\104\030\105\102\106\114\107\061\110\116\111\073" +
    "\112\077\113\020\114\122\115\123\116\037\117\047\120" +
    "\055\121\021\122\036\123\040\001\002\000\012\025\135" +
    "\026\136\030\134\066\336\001\002\000\004\067\337\001" +
    "\002\000\144\003\217\011\060\031\062\032\025\034\035" +
    "\035\120\040\112\041\052\044\111\045\050\046\051\047" +
    "\072\050\024\051\103\052\046\053\105\054\034\055\056" +
    "\056\057\057\065\065\124\067\022\070\uffd5\071\117\073" +
    "\106\074\101\075\121\076\071\077\054\100\044\101\017" +
    "\102\107\103\041\104\030\105\102\106\114\107\061\110" +
    "\116\111\073\112\077\113\020\114\122\115\123\116\037" +
    "\117\047\120\055\121\021\122\036\123\040\001\002\000" +
    "\004\070\341\001\002\000\152\002\uffab\003\uffab\011\uffab" +
    "\031\uffab\032\uffab\034\uffab\035\uffab\040\uffab\041\uffab\042" +
    "\343\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\065\uffab\067\uffab\070\uffab\071\uffab\073\uffab\074\uffab" +
    "\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103" +
    "\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab" +
    "\112\uffab\113\uffab\114\uffab\115\uffab\116\uffab\117\uffab\120" +
    "\uffab\121\uffab\122\uffab\123\uffab\001\002\000\150\002\uffb1" +
    "\003\uffb1\011\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1\040" +
    "\uffb1\041\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\065\uffb1\067\uffb1\070\uffb1\071\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102" +
    "\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1" +
    "\111\uffb1\112\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\117" +
    "\uffb1\120\uffb1\121\uffb1\122\uffb1\123\uffb1\001\002\000\006" +
    "\041\353\067\352\001\002\000\150\002\uffb0\003\uffb0\011" +
    "\uffb0\031\uffb0\032\uffb0\034\uffb0\035\uffb0\040\uffb0\041\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\065\uffb0\067\uffb0\070\uffb0\071\uffb0\073\uffb0\074\uffb0\075" +
    "\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0" +
    "\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112" +
    "\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0" +
    "\121\uffb0\122\uffb0\123\uffb0\001\002\000\152\002\uffab\003" +
    "\uffab\011\uffab\031\uffab\032\uffab\034\uffab\035\uffab\040\uffab" +
    "\041\uffab\042\343\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\065\uffab\067\uffab\070\uffab\071\uffab\073" +
    "\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab" +
    "\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110" +
    "\uffab\111\uffab\112\uffab\113\uffab\114\uffab\115\uffab\116\uffab" +
    "\117\uffab\120\uffab\121\uffab\122\uffab\123\uffab\001\002\000" +
    "\152\002\uffad\003\uffad\011\uffad\031\uffad\032\uffad\034\uffad" +
    "\035\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\065\uffad\067\uffad\070" +
    "\uffad\071\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106" +
    "\uffad\107\uffad\110\uffad\111\uffad\112\uffad\113\uffad\114\uffad" +
    "\115\uffad\116\uffad\117\uffad\120\uffad\121\uffad\122\uffad\123" +
    "\uffad\001\002\000\150\002\uffaa\003\uffaa\011\uffaa\031\uffaa" +
    "\032\uffaa\034\uffaa\035\uffaa\040\uffaa\041\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\065\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa" +
    "\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105" +
    "\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa" +
    "\114\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\122" +
    "\uffaa\123\uffaa\001\002\000\150\002\uffaf\003\uffaf\011\uffaf" +
    "\031\uffaf\032\uffaf\034\uffaf\035\uffaf\040\uffaf\041\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\065" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104" +
    "\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf" +
    "\113\uffaf\114\uffaf\115\uffaf\116\uffaf\117\uffaf\120\uffaf\121" +
    "\uffaf\122\uffaf\123\uffaf\001\002\000\152\002\uffae\003\uffae" +
    "\011\uffae\031\uffae\032\uffae\034\uffae\035\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\065\uffae\067\uffae\070\uffae\071\uffae\073\uffae" +
    "\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102" +
    "\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae" +
    "\111\uffae\112\uffae\113\uffae\114\uffae\115\uffae\116\uffae\117" +
    "\uffae\120\uffae\121\uffae\122\uffae\123\uffae\001\002\000\144" +
    "\003\217\011\060\031\062\032\025\034\035\035\120\040" +
    "\112\041\052\044\111\045\050\046\051\047\072\050\024" +
    "\051\103\052\046\053\105\054\034\055\056\056\057\057" +
    "\065\065\124\067\022\070\uffd5\071\117\073\106\074\101" +
    "\075\121\076\071\077\054\100\044\101\017\102\107\103" +
    "\041\104\030\105\102\106\114\107\061\110\116\111\073" +
    "\112\077\113\020\114\122\115\123\116\037\117\047\120" +
    "\055\121\021\122\036\123\040\001\002\000\004\065\354" +
    "\001\002\000\126\011\060\027\132\044\111\045\050\046" +
    "\051\047\072\050\024\051\103\052\046\053\105\054\034" +
    "\055\056\056\057\057\065\065\124\067\022\071\117\073" +
    "\106\074\101\075\121\076\071\077\054\100\044\101\017" +
    "\102\107\103\041\104\030\105\102\106\114\107\061\110" +
    "\116\111\073\112\077\113\020\114\122\115\123\116\037" +
    "\117\047\120\055\121\021\122\036\123\040\001\002\000" +
    "\012\025\135\026\136\030\134\066\356\001\002\000\004" +
    "\067\357\001\002\000\144\003\217\011\060\031\062\032" +
    "\025\034\035\035\120\040\112\041\052\044\111\045\050" +
    "\046\051\047\072\050\024\051\103\052\046\053\105\054" +
    "\034\055\056\056\057\057\065\065\124\067\022\070\uffd5" +
    "\071\117\073\106\074\101\075\121\076\071\077\054\100" +
    "\044\101\017\102\107\103\041\104\030\105\102\106\114" +
    "\107\061\110\116\111\073\112\077\113\020\114\122\115" +
    "\123\116\037\117\047\120\055\121\021\122\036\123\040" +
    "\001\002\000\004\070\361\001\002\000\152\002\uffac\003" +
    "\uffac\011\uffac\031\uffac\032\uffac\034\uffac\035\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\065\uffac\067\uffac\070\uffac\071\uffac\073" +
    "\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac" +
    "\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110" +
    "\uffac\111\uffac\112\uffac\113\uffac\114\uffac\115\uffac\116\uffac" +
    "\117\uffac\120\uffac\121\uffac\122\uffac\123\uffac\001\002\000" +
    "\004\070\363\001\002\000\150\002\uffa9\003\uffa9\011\uffa9" +
    "\031\uffa9\032\uffa9\034\uffa9\035\uffa9\040\uffa9\041\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\065" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\073\uffa9\074\uffa9\075\uffa9" +
    "\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9" +
    "\113\uffa9\114\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\121" +
    "\uffa9\122\uffa9\123\uffa9\001\002\000\146\002\ufff1\003\ufff1" +
    "\011\ufff1\031\ufff1\032\ufff1\034\ufff1\035\ufff1\040\ufff1\041" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\065\ufff1\067\ufff1\071\ufff1\073\ufff1\074\ufff1\075\ufff1" +
    "\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104" +
    "\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1" +
    "\113\ufff1\114\ufff1\115\ufff1\116\ufff1\117\ufff1\120\ufff1\121" +
    "\ufff1\122\ufff1\123\ufff1\001\002\000\130\011\060\027\132" +
    "\044\111\045\050\046\051\047\072\050\024\051\103\052" +
    "\046\053\105\054\034\055\056\056\057\057\065\065\124" +
    "\066\uffd7\067\022\071\117\073\106\074\101\075\121\076" +
    "\071\077\054\100\044\101\017\102\107\103\041\104\030" +
    "\105\102\106\114\107\061\110\116\111\073\112\077\113" +
    "\020\114\122\115\123\116\037\117\047\120\055\121\021" +
    "\122\036\123\040\001\002\000\006\061\261\066\uffd6\001" +
    "\002\000\004\066\370\001\002\000\004\060\uffd8\001\002" +
    "\000\146\002\uffec\003\uffec\011\uffec\031\uffec\032\uffec\034" +
    "\uffec\035\uffec\040\uffec\041\uffec\043\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\065\uffec\067\uffec\071\uffec" +
    "\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101" +
    "\uffec\102\uffec\103\uffec\104\uffec\105\uffec\106\uffec\107\uffec" +
    "\110\uffec\111\uffec\112\uffec\113\uffec\114\uffec\115\uffec\116" +
    "\uffec\117\uffec\120\uffec\121\uffec\122\uffec\123\uffec\001\002" +
    "\000\004\063\u0101\001\002\000\004\070\u0100\001\002\000" +
    "\006\061\376\070\uffe7\001\002\000\006\061\uffe5\070\uffe5" +
    "\001\002\000\004\077\372\001\002\000\006\061\uffe6\070" +
    "\uffe6\001\002\000\056\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\060\uffe1" +
    "\061\uffe1\063\uffe1\066\uffe1\070\uffe1\072\uffe1\001\002\000" +
    "\126\011\060\027\132\044\111\045\050\046\051\047\072" +
    "\050\024\051\103\052\046\053\105\054\034\055\056\056" +
    "\057\057\065\065\124\067\022\071\117\073\106\074\101" +
    "\075\121\076\071\077\054\100\044\101\017\102\107\103" +
    "\041\104\030\105\102\106\114\107\061\110\116\111\073" +
    "\112\077\113\020\114\122\115\123\116\037\117\047\120" +
    "\055\121\021\122\036\123\040\001\002\000\014\025\135" +
    "\026\136\030\134\061\uffe4\070\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\012\002\005\014\003\015\007\016\004\001" +
    "\001\000\054\003\075\006\030\010\062\013\026\017\077" +
    "\022\042\023\073\027\112\031\025\032\114\033\044\036" +
    "\031\044\032\047\107\051\103\052\052\053\041\056\074" +
    "\057\067\063\022\064\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\372\061\373\062\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\054\326\055\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\030\010\062\022\324\047\107\051\130\052\052\053\041" +
    "\056\074\063\124\064\065\001\001\000\002\001\001\000" +
    "\004\004\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\030\010" +
    "\062\020\265\021\125\022\126\047\107\051\130\052\052" +
    "\053\041\056\074\063\124\064\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\075\006\030\010\062" +
    "\013\026\017\077\022\042\023\073\027\112\033\263\036" +
    "\031\044\032\047\107\051\103\052\052\053\041\056\074" +
    "\057\067\063\022\064\065\001\001\000\002\001\001\000" +
    "\034\006\030\007\255\010\062\020\256\021\125\022\126" +
    "\047\107\051\130\052\052\053\041\056\074\063\124\064" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\030\010\062\020" +
    "\127\021\125\022\126\047\107\051\130\052\052\053\041" +
    "\056\074\063\124\064\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\030\010\062\020\132\021\125\022" +
    "\126\047\107\051\130\052\052\053\041\056\074\063\124" +
    "\064\065\001\001\000\002\001\001\000\032\006\030\010" +
    "\062\020\140\021\125\022\126\047\107\051\130\052\052" +
    "\053\041\056\074\063\124\064\065\001\001\000\032\006" +
    "\030\010\062\020\137\021\125\022\126\047\107\051\130" +
    "\052\052\053\041\056\074\063\124\064\065\001\001\000" +
    "\032\006\030\010\062\020\136\021\125\022\126\047\107" +
    "\051\130\052\052\053\041\056\074\063\124\064\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\030\010\062\020\142\021\125\022\126\047" +
    "\107\051\130\052\052\053\041\056\074\063\124\064\065" +
    "\001\001\000\002\001\001\000\012\047\107\052\144\053" +
    "\041\056\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\030\010\062\022\175\047" +
    "\107\051\130\052\052\053\041\056\074\063\124\064\065" +
    "\001\001\000\026\006\030\010\062\022\174\047\107\051" +
    "\130\052\052\053\041\056\074\063\124\064\065\001\001" +
    "\000\026\006\030\010\062\022\173\047\107\051\130\052" +
    "\052\053\041\056\074\063\124\064\065\001\001\000\026" +
    "\006\030\010\062\022\172\047\107\051\130\052\052\053" +
    "\041\056\074\063\124\064\065\001\001\000\026\006\030" +
    "\010\062\022\171\047\107\051\130\052\052\053\041\056" +
    "\074\063\124\064\065\001\001\000\026\006\030\010\062" +
    "\022\170\047\107\051\130\052\052\053\041\056\074\063" +
    "\124\064\065\001\001\000\026\006\030\010\062\022\167" +
    "\047\107\051\130\052\052\053\041\056\074\063\124\064" +
    "\065\001\001\000\026\006\030\010\062\022\166\047\107" +
    "\051\130\052\052\053\041\056\074\063\124\064\065\001" +
    "\001\000\026\006\030\010\062\022\165\047\107\051\130" +
    "\052\052\053\041\056\074\063\124\064\065\001\001\000" +
    "\026\006\030\010\062\022\164\047\107\051\130\052\052" +
    "\053\041\056\074\063\124\064\065\001\001\000\026\006" +
    "\030\010\062\022\163\047\107\051\130\052\052\053\041" +
    "\056\074\063\124\064\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\030\010\062\020\177\021" +
    "\125\022\126\047\107\051\130\052\052\053\041\056\074" +
    "\063\124\064\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\205\025\203\026\202\001\001\000\002" +
    "\001\001\000\004\026\254\001\001\000\026\006\030\010" +
    "\062\022\247\047\107\051\130\052\052\053\041\056\074" +
    "\063\124\064\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\221\006\030\010\062" +
    "\013\212\017\222\022\042\023\220\027\224\030\215\034" +
    "\225\035\214\036\213\047\107\051\223\052\052\053\041" +
    "\056\074\057\217\063\211\064\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\234\001\001\000\002\001\001\000\046\003\221\006" +
    "\030\010\062\013\212\017\222\022\042\023\220\027\224" +
    "\035\226\036\213\047\107\051\223\052\052\053\041\056" +
    "\074\057\217\063\211\064\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\030\010\062" +
    "\020\237\021\125\022\126\047\107\051\130\052\052\053" +
    "\041\056\074\063\124\064\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\221\006\030\010\062" +
    "\013\212\017\222\022\042\023\220\027\224\030\252\034" +
    "\225\035\214\036\213\047\107\051\223\052\052\053\041" +
    "\056\074\057\217\063\211\064\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\030\010" +
    "\062\020\262\021\125\022\126\047\107\051\130\052\052" +
    "\053\041\056\074\063\124\064\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\030\007\271\010\062\020\256\021\125\022\126" +
    "\047\107\050\272\051\130\052\052\053\041\056\074\063" +
    "\124\064\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\045\302\046\301\065\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\221\006\030\010\062\013\212" +
    "\017\222\022\042\023\220\027\224\030\305\034\225\035" +
    "\214\036\213\047\107\051\223\052\052\053\041\056\074" +
    "\057\217\063\211\064\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\316\001\001\000\002\001\001" +
    "\000\032\006\030\010\062\020\322\021\125\022\126\047" +
    "\107\051\130\052\052\053\041\056\074\063\124\064\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\030" +
    "\010\062\020\331\021\125\022\126\047\107\051\130\052" +
    "\052\053\041\056\074\063\124\064\065\001\001\000\004" +
    "\055\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\030\010\062" +
    "\020\334\021\125\022\126\047\107\051\130\052\052\053" +
    "\041\056\074\063\124\064\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\221\006\030\010\062\013" +
    "\212\017\222\022\042\023\220\027\224\030\337\034\225" +
    "\035\214\036\213\047\107\051\223\052\052\053\041\056" +
    "\074\057\217\063\211\064\065\001\001\000\002\001\001" +
    "\000\014\037\341\040\343\041\344\042\345\043\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\040\347\042\350\043\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\221\006\030\010\062\013\212\017\222\022" +
    "\042\023\220\027\224\030\361\034\225\035\214\036\213" +
    "\047\107\051\223\052\052\053\041\056\074\057\217\063" +
    "\211\064\065\001\001\000\002\001\001\000\032\006\030" +
    "\010\062\020\354\021\125\022\126\047\107\051\130\052" +
    "\052\053\041\056\074\063\124\064\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\221\006\030\010" +
    "\062\013\212\017\222\022\042\023\220\027\224\030\357" +
    "\034\225\035\214\036\213\047\107\051\223\052\052\053" +
    "\041\056\074\057\217\063\211\064\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\030\007\365\010\062" +
    "\012\366\020\256\021\125\022\126\047\107\051\130\052" +
    "\052\053\041\056\074\063\124\064\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\030\010\062\020\u0101" +
    "\021\125\022\126\047\107\051\130\052\052\053\041\056" +
    "\074\063\124\064\065\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoScript$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoScript$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoScript$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /**
     * Este metodo retorna la RAIZ del arbol  generado 
     **/ 
    
    public Nodo getRoot(){
        return action_obj.root;
    }
    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        Template.reporteError_CJS.agregar("Sintactico", action_obj.lineaA+1, action_obj.columnaA, "No se esperaba: " +s.value);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Template.reporteError_CJS.agregar("Sintactico", action_obj.lineaA+1, action_obj.columnaA, "No se esperaba: " +s.value);
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoScript$actions {


    //se declaran variables globales etc.
        public int Index=1;
        public Nodo root = new Nodo();
        public int lineaA = 0;
        public int columnaA = 0;

  private final SintacticoScript parser;

  /** Constructor */
  CUP$SintacticoScript$actions(SintacticoScript parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoScript$do_action(
    int                        CUP$SintacticoScript$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoScript$parser,
    java.util.Stack            CUP$SintacticoScript$stack,
    int                        CUP$SintacticoScript$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoScript$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoScript$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DATO ::= undefined 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("undefined",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DATO ::= nulo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nulo",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DATO ::= bool_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("bool_literal",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DATO ::= int_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("int_literal",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DATO ::= double_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("double_literal",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DATO ::= string_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                                          RESULT = parser.crearNodo("string_literal",cad,a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NATIVAS ::= iden 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NATIVAS ::= alcerrar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NATIVAS ::= alcargar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NATIVAS ::= alclic 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NATIVAS ::= crearvideo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NATIVAS ::= crearreproductor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NATIVAS ::= crearimagen 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NATIVAS ::= crearboton 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NATIVAS ::= creardesplegable 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NATIVAS ::= crearcontrolnumerico 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NATIVAS ::= crearareatexto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NATIVAS ::= crearcajatexto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NATIVAS ::= creartexto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NATIVAS ::= crearcontenedor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NATIVAS ::= crearventana 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NATIVAS ::= obtenerpornombre 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NATIVAS ::= obtenerporid 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NATIVAS ::= obtenerporetiqueta 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NATIVAS ::= leergxml 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NATIVAS ::= map 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NATIVAS ::= alguno 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NATIVAS ::= todos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NATIVAS ::= reduce 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NATIVAS ::= buscar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NATIVAS ::= filtrar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NATIVAS ::= minimo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NATIVAS ::= maximo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NATIVAS ::= invertir 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NATIVAS ::= creararraydesdearchivo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NATIVAS ::= descendente 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NATIVAS ::= ascendente 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("NATIVAS",44, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ENVIO ::= LIST_EXP 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X;  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ENVIO",38, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ENVIO ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("envios","",0,0); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ENVIO",38, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LLAMADA ::= NATIVAS apar ENVIO cpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                        RESULT = parser.crearNodo("llamada",a.valor,a.linea,a.columna);  
                        RESULT.add(H);
                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LLAMADA",37, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INDICE ::= acorch EXP ccorch 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		      RESULT = a;          
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INDICE",43, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INDICES ::= INDICE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("indices","",a.linea,a.columna);  
                RESULT.add(a);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INDICES",42, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INDICES ::= INDICES INDICE 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                r.add(h);
                RESULT = r;
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INDICES",42, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ACCESOARR ::= iden INDICES 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token h1 = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("accesoar",h1.getCadena(),h1.getLinea(),h1.getColumna());
                    RESULT.add(h2);
              
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESOARR",41, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ACCESOVAR ::= LLAMADA 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT=r;   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESOVAR",40, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ACCESOVAR ::= ACCESOARR 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT=r;   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESOVAR",40, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ACCESOVAR ::= iden 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token h1 = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = parser.crearNodo("id",h1.getCadena(),h1.getLinea(),h1.getColumna()); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESOVAR",40, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ACCESO ::= ACCESOVAR 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("acceso","",h1.linea,h1.columna);
                    RESULT.add(h1);
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESO",39, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ACCESO ::= ACCESO pto ACCESOVAR 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                r.add(h);   RESULT = r;  
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ACCESO",39, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SIMPLIFICADA ::= EXP_A sub 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		

                    RESULT = parser.crearNodo("sub","",w.getLinea(),w.getColumna());
                    RESULT.add(h1);
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA",49, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SIMPLIFICADA ::= EXP_A add 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		                                 

                    RESULT = parser.crearNodo("add","",w.getLinea(),w.getColumna());
                    RESULT.add(h1);
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA",49, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP_A ::= ACCESO 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP_A ::= SIMPLIFICADA 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP_A ::= DATO 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP_A ::= menos EXP_A 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = parser.crearNodo("unario","",a.getLinea(),a.getColumna()); RESULT.add(H); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP_A ::= CONTOBJ 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP_A ::= CONTARRAY 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP_A ::= apar EXP cpar 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		  RESULT=r;    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP_A ::= EXP_A pot EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("pot","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP_A ::= EXP_A div EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("div","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_A ::= EXP_A por EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("por","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_A ::= EXP_A menos EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("menos","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_A ::= EXP_A mas EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("mas","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_A",16, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_R ::= EXP_A 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = r;  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_R ::= EXP_A dif EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("dif","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_R ::= EXP_A ig_ig EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("ig_ig","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_R ::= EXP_A mayiq EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("mayiq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_R ::= EXP_A mayq EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("mayq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_R ::= EXP_A meniq EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("meniq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_R ::= EXP_A menq EXP_A 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("menq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP_R",15, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP_R 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT=a;   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= not EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    
                                          RESULT = parser.crearNodo("not","",a.getLinea(),a.getColumna());
                                          RESULT.add(b);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP or EXP 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("or","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP and EXP 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("and","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                       
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP trn EXP dspts EXP 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("trn","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c); RESULT.add(d);
                                       
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SINO ::= sino alla INSTRUCCIONES clla 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		token X = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("sino","",X.getLinea(),X.getColumna());
                RESULT.add(i);// se agrega el conjunto de instrucciones
           
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SINO",33, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FINAL_SINO ::= SINO 
            {
              Nodo RESULT =null;
		int rootleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rootright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo root = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		      RESULT=root; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("FINAL_SINO",30, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FINAL_SINO ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("sino","",0,0); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("FINAL_SINO",30, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SINO_SI ::= sino si apar EXP cpar alla INSTRUCCIONES clla 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).right;
		token X = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("sinosi","",X.getLinea(),X.getColumna());
                RESULT.add(c); //condicion
                RESULT.add(i); //instrucciones
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SINO_SI",32, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LIST_SINOSI ::= SINO_SI 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("lista_sinosi","",X.linea,X.columna);
                RESULT.add(X);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_SINOSI",31, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LIST_SINOSI ::= LIST_SINOSI SINO_SI 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                r.add(h);
                RESULT = r;
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_SINOSI",31, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MUCHOS_SINOSI ::= LIST_SINOSI FINAL_SINO 
            {
              Nodo RESULT =null;
		int rootleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rootright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo root = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 root.add(b);  RESULT = root; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("MUCHOS_SINOSI",29, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MUCHOS_SINOSI ::= FINAL_SINO 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = parser.crearNodo("lista_sinosi","",0,0); RESULT.add(b);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("MUCHOS_SINOSI",29, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SI ::= si apar EXP cpar alla INSTRUCCIONES clla MUCHOS_SINOSI 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo Z = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
            RESULT = parser.crearNodo("si","",w.getLinea(),w.getColumna());
            RESULT.add(X);// se agrega la expresion
            RESULT.add(Y);// se agrega el conjunto de instrucciones
            RESULT.add(Z);// se agrega la lista de sinosi
            
          
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SI",28, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASO_DEFECTO ::= defecto dspts alla INSTRUCCIONES clla 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                    RESULT = parser.crearNodo("defecto","",w.getLinea(),w.getColumna());
                    RESULT.add(Y);// se agregan las instrucciones
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASO_DEFECTO ::= caso EXP_A dspts alla INSTRUCCIONES clla 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                    RESULT = parser.crearNodo("caso","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la EXPR
                    RESULT.add(Y);// se agregan las instrucciones
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_CASOS ::= CASO_DEFECTO 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("casos","",X.linea,X.columna);
                    RESULT.add(X);
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",19, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_CASOS ::= LISTA_CASOS CASO_DEFECTO 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    R.add(X);
                    RESULT = R;
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",19, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONT_SELECCIONA ::= LISTA_CASOS 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT= X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CONT_SELECCIONA",18, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONT_SELECCIONA ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("casos","",0,0); 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CONT_SELECCIONA",18, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SELECCIONA ::= selecciona apar EXP cpar alla CONT_SELECCIONA clla 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("selecciona","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la EXPRESION
                RESULT.add(Y);// se agrega la lista de CASOS
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SELECCIONA",17, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VAR_S ::= var 
            {
              Nodo RESULT =null;

              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("VAR_S",51, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VAR_S ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("VAR_S",51, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTA_PARAMETROS ::= VAR_S iden 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                        RESULT = parser.crearNodo("parametros","",x.getLinea(),x.getColumna());
                        Nodo param = parser.crearNodo("parametro",x.getCadena(),x.getLinea(),x.getColumna());
                        RESULT.add(param);    
                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",36, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma VAR_S iden 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                        Nodo param = parser.crearNodo("parametro",y.getCadena(),y.getLinea(),y.getColumna());
                        x.add(param);
                        RESULT=x;
                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",36, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROS ::= LISTA_PARAMETROS 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		     RESULT=x;   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("PARAMETROS",35, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROS ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("parametros","",0,0);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("PARAMETROS",35, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION ::= funcion iden apar PARAMETROS cpar alla INSTRUCCIONES clla 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).right;
		Nodo y = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo z = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("funcion","",w.getLinea(),w.getColumna()); // se crea la raiz FUNCION
                RESULT.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));// agrego el nombre 
                RESULT.add(y);//agrego los parametros
                RESULT.add(z);//agrego las instrucciones
           
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("FUNCION",34, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPOASIG ::= asigdiv 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("asigdiv",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPOASIG ::= asigpor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("asigpor",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPOASIG ::= asigmen 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("asigmen",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPOASIG ::= asigmas 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("asigmas",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPOASIG ::= igual 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		    RESULT = parser.crearNodo("igual",a.getCadena(),a.getLinea(),a.getColumna());     
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("TIPOASIG",46, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION ::= ACCESO TIPOASIG EXP 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                        RESULT = parser.crearNodo("asignacion","",h1.linea,h1.columna);
                        RESULT.add(h1);     RESULT.add(h2);     RESULT.add(h3);
                   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ASIGNACION",45, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA ::= error 
            {
              Nodo RESULT =null;
		 
                                                RESULT = parser.crearNodo("#error","",0,0); 
                                                Template.reporteError_CJS.agregar("Sintactico", this.lineaA+1, this.columnaA, "Error Sintactico");
                                              
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA ::= error pyc 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 
                                                RESULT = parser.crearNodo("#error","",0,0); 
                                                Template.reporteError_CJS.agregar("Sintactico", v.getLinea(), v.getColumna(), "Error Sintactico");
                                              
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA ::= SIMPLIFICADA pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA ::= ACCESO pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA ::= ASIGNACION pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA ::= DETENER pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA ::= RETORNAR pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= IMPRIMIR pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= DETENER 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= SI 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= SELECCIONA 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= DECLARA 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // I_NSTRUCCIONES ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 
                    RESULT = parser.crearNodo("sentencias","",H.linea,H.columna);
                    RESULT.add(H); 
                 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("I_NSTRUCCIONES",26, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // I_NSTRUCCIONES ::= I_NSTRUCCIONES SENTENCIA 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  R.add(H); RESULT = R;  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("I_NSTRUCCIONES",26, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCIONES ::= I_NSTRUCCIONES 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",22, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCIONES ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("sentencias","",0,0);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",22, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAM_ENVIAR ::= LIST_EXP 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		   RESULT = h1; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("PARAM_ENVIAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAM_ENVIAR ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("parametros","",0,0);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("PARAM_ENVIAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IMPRIMIR ::= imprimir apar PARAM_ENVIAR cpar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                    RESULT = parser.crearNodo("imprimir","",a.getLinea(),a.getColumna());
                    RESULT.add(h1);
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETORNAR ::= retornar EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("retorno","",a.getLinea(),a.getColumna());
                    RESULT.add(h1);
              
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("RETORNAR",21, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DETENER ::= detener 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("terminar","",a.getLinea(),a.getColumna());
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DETENER",13, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGN ::= igual EXP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("asign","",m.getLinea(),m.getColumna());
                RESULT.add(h1);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ASIGN",3, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGN ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("asign","",0,0);   
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ASIGN",3, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LIST_EXP ::= EXP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("lista_exp","",m.linea,m.columna);
                RESULT.add(m);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LIST_EXP ::= LIST_EXP coma EXP 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                r.add(h);
                RESULT = r;
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTARRAY ::= acorch ccorch 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                    RESULT = parser.crearNodo("cntarray","",m.getLinea(),m.getColumna());
                    RESULT.add( parser.crearNodo("lista_exp","",m.getLinea(),m.getColumna()) );
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CONTARRAY",6, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTARRAY ::= acorch LIST_EXP ccorch 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                    RESULT = parser.crearNodo("cntarray","",m.linea,m.columna);
                    RESULT.add(m);
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CONTARRAY",6, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTOBJ ::= alla LIST_ATRI clla 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("cntobj","",m.linea,m.columna);
                RESULT.add(m);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("CONTOBJ",50, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LIST_ID ::= iden 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("list_id","",m.getLinea(),m.getColumna());
                RESULT.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_ID",2, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LIST_ID ::= LIST_ID coma iden 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                n.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
                RESULT = n;
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_ID",2, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATRIBUTO ::= iden dspts EXP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("declaracionvarG","",m.getLinea(),m.getColumna());
                    
                    Nodo Lt_id = parser.crearNodo("list_id","",m.getLinea(),m.getColumna());
                    Lt_id.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
                    
                    Nodo Asign = parser.crearNodo("asign","",h.linea,h.columna);
                    Asign.add(h);

                    RESULT.add(Lt_id);
                    RESULT.add(Asign); 
                
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",48, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATRIBUTOS ::= ATRIBUTO 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    RESULT = parser.crearNodo("atributos","",h.linea,h.columna);
                    RESULT.add(h);
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",47, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUTOS ::= ATRIBUTOS coma ATRIBUTO 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                    r.add(h);
                    RESULT = r;
               
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",47, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LIST_ATRI ::= ATRIBUTOS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = r; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_ATRI",7, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LIST_ATRI ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("atributos","",0,0);    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("LIST_ATRI",7, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARA ::= var LIST_ID ASIGN pyc 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		
                RESULT = parser.crearNodo("declaracionvar","",m.getLinea(),m.getColumna());
                RESULT.add(n);
                RESULT.add(o);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("DECLARA",1, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAF ::= error 
            {
              Nodo RESULT =null;
		 
                                                RESULT = parser.crearNodo("#error","",0,0); 
                                                Template.reporteError_CJS.agregar("Sintactico", this.lineaA+1, this.columnaA, "Error Sintactico");
                                              
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAF ::= error pyc 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 
                                                RESULT = parser.crearNodo("#error","",0,0); 
                                                Template.reporteError_CJS.agregar("Sintactico", v.getLinea(), v.getColumna(), "Error Sintactico");
                                              
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAF ::= SIMPLIFICADA pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAF ::= ACCESO pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAF ::= ASIGNACION pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAF ::= DETENER pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAF ::= RETORNAR pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAF ::= IMPRIMIR pyc 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAF ::= DETENER 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAF ::= SI 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAF ::= SELECCIONA 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAF ::= FUNCION 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = X;                  this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAF ::= DECLARA 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 X.nombre += "G"; RESULT = X; this.lineaA =X.linea; this.columnaA =X.columna; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",25, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I_NSTRUCCIONESF ::= SENTENCIAF 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 
                        RESULT = parser.crearNodo("sentencias","",h.linea,h.columna);  
                        RESULT.add(h); 
                    
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("I_NSTRUCCIONESF",24, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I_NSTRUCCIONESF ::= I_NSTRUCCIONESF SENTENCIAF 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  r.add(h); RESULT = r;  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("I_NSTRUCCIONESF",24, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES_FUERA ::= I_NSTRUCCIONESF 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		 RESULT = b; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_FUERA",23, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES_FUERA ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("sentencias","",0,0);  
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_FUERA",23, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTAR ::= importar apar string_literal cpar pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-2)).value;
		
                 String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                 RESULT = parser.crearNodo("string_literal",cad,a.getLinea(),a.getColumna());

              
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("IMPORTAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= IMPORTAR 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                RESULT = parser.crearNodo("imports","",h.linea,h.columna);
                h.nombre = "importar";
                RESULT.add(h);
 
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("IMPORTS",11, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= IMPORTS IMPORTAR 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		
                h.nombre = "importar";
                r.add(h);
                RESULT = r;
             
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("IMPORTS",11, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S_IMPORT ::= IMPORTS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  RESULT = r; 
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("S_IMPORT",10, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S_IMPORT ::= 
            {
              Nodo RESULT =null;
		     RESULT = parser.crearNodo("imports","",0,0);      
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("S_IMPORT",10, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S_IMPORT INSTRUCCIONES_FUERA 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()).right;
		Nodo h2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.peek()).value;
		  
                root = parser.crearNodo("raiz","",h1.linea,h1.columna);  
                root.add(h1);
                root.add(h2);
            
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          return CUP$SintacticoScript$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoScript$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.elementAt(CUP$SintacticoScript$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoScript$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoScript$parser.done_parsing();
          return CUP$SintacticoScript$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

