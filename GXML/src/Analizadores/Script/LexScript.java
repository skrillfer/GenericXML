/* The following code was generated by JFlex 1.4.3 on 20/03/19 06:09 AM */

package Analizadores.Script;

import INTERFAZ.Template;
import java.util.LinkedList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/03/19 06:09 AM from the specification file
 * <tt>src/Analizadores/Script/lexicoscript.flex</tt>
 */
public class LexScript implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\21\1\6"+
    "\3\0\1\23\1\0\1\30\1\31\1\12\1\13\1\26\1\15\1\5"+
    "\1\11\12\7\1\27\1\25\1\17\1\14\1\20\1\22\1\0\1\37"+
    "\1\62\1\54\1\45\1\46\1\47\1\61\1\57\1\50\1\64\1\10"+
    "\1\43\1\51\1\41\1\44\1\52\1\63\1\40\1\55\1\53\1\42"+
    "\1\36\1\10\1\60\1\56\1\10\1\34\1\0\1\35\1\16\1\10"+
    "\1\0\1\37\1\62\1\54\1\45\1\46\1\47\1\61\1\57\1\50"+
    "\1\64\1\10\1\43\1\51\1\41\1\44\1\52\1\63\1\40\1\55"+
    "\1\53\1\42\1\36\1\10\1\60\1\56\1\10\1\32\1\24\1\33"+
    "\u05e2\0\12\4\206\0\12\4\306\0\12\4\u019c\0\12\4\166\0\12\4"+
    "\166\0\12\4\166\0\12\4\166\0\12\4\166\0\12\4\166\0\12\4"+
    "\166\0\12\4\166\0\12\4\340\0\12\4\166\0\12\4\106\0\12\4"+
    "\u0116\0\12\4\106\0\12\4\u0746\0\12\4\46\0\12\4\u012c\0\12\4"+
    "\200\0\12\4\246\0\12\4\6\0\12\4\266\0\12\4\126\0\12\4"+
    "\206\0\12\4\6\0\12\4\u89c6\0\12\4\u02a6\0\12\4\46\0\12\4"+
    "\306\0\12\4\166\0\12\4\u0196\0\12\4\u5316\0\12\4\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\2\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\17\6\1\0\1\1\1\0\1\32"+
    "\2\0\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\25\6\1\47\1\6"+
    "\1\50\2\0\1\51\22\6\1\52\10\6\1\0\1\50"+
    "\10\6\1\53\17\6\1\54\2\6\1\55\1\6\1\50"+
    "\16\6\1\56\7\6\1\57\5\6\1\60\1\6\1\61"+
    "\1\6\1\62\14\6\1\63\1\64\11\6\1\65\10\6"+
    "\1\66\1\67\1\6\1\70\1\71\16\6\1\72\1\73"+
    "\1\6\1\74\1\6\1\75\2\6\1\76\1\77\1\100"+
    "\15\6\1\101\16\6\1\102\3\6\1\103\5\6\1\104"+
    "\3\6\1\105\1\106\3\6\1\107\5\6\1\110\5\6"+
    "\1\111\1\112\23\6\1\113\2\6\1\114\10\6\1\115"+
    "\1\116\2\6\1\117\1\120\4\6\1\121\5\6\1\122"+
    "\1\6\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\65\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\65\0\u02b1"+
    "\0\u02e6\0\u031b\0\65\0\u0350\0\u0385\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u0109\0\u0109\0\u013e"+
    "\0\65\0\u06d5\0\u070a\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\u073f"+
    "\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u06d5\0\u0c02"+
    "\0\u0c37\0\u0173\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u0173\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u0c02\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u0173"+
    "\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u0173"+
    "\0\u16c6\0\u16fb\0\u0173\0\u1730\0\65\0\u1765\0\u179a\0\u17cf"+
    "\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977"+
    "\0\u19ac\0\u19e1\0\u1a16\0\u0173\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea"+
    "\0\u1b1f\0\u1b54\0\u1b89\0\u0173\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d"+
    "\0\u1c92\0\u0173\0\u1cc7\0\u0173\0\u1cfc\0\u0173\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e"+
    "\0\u1f43\0\u1f78\0\u0173\0\u0173\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u0173\0\u218a\0\u21bf"+
    "\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u0173\0\u0173"+
    "\0\u2332\0\u0173\0\u0173\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b"+
    "\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3"+
    "\0\u2618\0\u0173\0\u0173\0\u264d\0\u0173\0\u2682\0\u0173\0\u26b7"+
    "\0\u26ec\0\u0173\0\u0173\0\u0173\0\u2721\0\u2756\0\u278b\0\u27c0"+
    "\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968"+
    "\0\u299d\0\u0173\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb"+
    "\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83"+
    "\0\u0173\0\u2cb8\0\u2ced\0\u2d22\0\u0173\0\u2d57\0\u2d8c\0\u2dc1"+
    "\0\u2df6\0\u2e2b\0\u0173\0\u2e60\0\u2e95\0\u2eca\0\u0173\0\u0173"+
    "\0\u2eff\0\u2f34\0\u2f69\0\u0173\0\u2f9e\0\u2fd3\0\u3008\0\u303d"+
    "\0\u3072\0\u0173\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b\0\u0173"+
    "\0\u0173\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9\0\u32ee"+
    "\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496"+
    "\0\u34cb\0\u3500\0\u3535\0\u356a\0\u0173\0\u359f\0\u35d4\0\u0173"+
    "\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c"+
    "\0\u0173\0\u0173\0\u37b1\0\u37e6\0\u0173\0\u0173\0\u381b\0\u3850"+
    "\0\u3885\0\u38ba\0\u0173\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3"+
    "\0\u0173\0\u39f8\0\u0173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\11\1\47"+
    "\1\50\1\51\1\11\1\52\1\53\1\54\4\11\1\55"+
    "\2\11\67\0\1\5\63\0\1\5\67\0\1\6\1\56"+
    "\1\0\1\6\61\0\1\57\2\0\1\57\55\0\6\60"+
    "\1\61\56\60\7\0\2\11\25\0\27\11\11\0\1\62"+
    "\1\63\1\0\1\64\64\0\1\65\63\0\1\66\1\67"+
    "\64\0\1\70\64\0\1\71\1\72\63\0\1\73\64\0"+
    "\1\74\64\0\1\75\73\0\1\76\65\0\1\77\47\0"+
    "\2\11\25\0\1\11\1\100\6\11\1\101\16\11\7\0"+
    "\2\11\25\0\5\11\1\102\11\11\1\103\7\11\7\0"+
    "\2\11\25\0\10\11\1\104\16\11\7\0\2\11\25\0"+
    "\4\11\1\105\22\11\7\0\2\11\25\0\3\11\1\106"+
    "\23\11\7\0\2\11\25\0\10\11\1\107\16\11\7\0"+
    "\2\11\25\0\24\11\1\110\2\11\7\0\2\11\25\0"+
    "\10\11\1\111\16\11\7\0\2\11\25\0\1\11\1\112"+
    "\2\11\1\113\5\11\1\114\14\11\7\0\2\11\25\0"+
    "\3\11\1\115\7\11\1\116\13\11\7\0\2\11\25\0"+
    "\1\11\1\117\10\11\1\120\14\11\7\0\2\11\25\0"+
    "\6\11\1\121\20\11\7\0\2\11\25\0\1\11\1\122"+
    "\1\123\24\11\7\0\2\11\25\0\10\11\1\124\1\11"+
    "\1\125\14\11\7\0\2\11\25\0\4\11\1\126\22\11"+
    "\1\127\2\0\62\127\11\130\1\63\1\131\52\130\7\0"+
    "\2\11\25\0\2\11\1\132\24\11\7\0\2\11\25\0"+
    "\2\11\1\133\24\11\7\0\2\11\25\0\16\11\1\134"+
    "\4\11\1\135\3\11\7\0\2\11\25\0\16\11\1\136"+
    "\10\11\7\0\2\11\25\0\7\11\1\137\5\11\1\140"+
    "\11\11\7\0\2\11\25\0\5\11\1\141\21\11\7\0"+
    "\2\11\25\0\7\11\1\142\17\11\7\0\2\11\25\0"+
    "\10\11\1\143\16\11\7\0\2\11\25\0\15\11\1\144"+
    "\11\11\7\0\2\11\25\0\11\11\1\145\3\11\1\146"+
    "\1\11\1\147\7\11\7\0\2\11\25\0\5\11\1\150"+
    "\21\11\7\0\2\11\25\0\3\11\1\151\23\11\7\0"+
    "\2\11\25\0\5\11\1\152\21\11\7\0\2\11\25\0"+
    "\1\153\26\11\7\0\2\11\25\0\14\11\1\154\12\11"+
    "\7\0\2\11\25\0\14\11\1\155\5\11\1\156\4\11"+
    "\7\0\2\11\25\0\3\11\1\157\23\11\7\0\2\11"+
    "\25\0\7\11\1\160\17\11\7\0\2\11\25\0\17\11"+
    "\1\161\7\11\7\0\2\11\25\0\10\11\1\162\16\11"+
    "\7\0\2\11\25\0\5\11\1\163\21\11\7\0\2\11"+
    "\25\0\3\11\1\164\23\11\7\0\2\11\25\0\17\11"+
    "\1\165\7\11\12\130\1\166\63\130\1\167\1\166\52\130"+
    "\7\0\2\11\25\0\7\11\1\170\17\11\7\0\2\11"+
    "\25\0\1\11\1\171\3\11\1\172\2\11\1\173\16\11"+
    "\7\0\2\11\25\0\4\11\1\174\22\11\7\0\2\11"+
    "\25\0\10\11\1\175\16\11\7\0\2\11\25\0\4\11"+
    "\1\176\22\11\7\0\2\11\25\0\6\11\1\177\20\11"+
    "\7\0\2\11\25\0\6\11\1\200\20\11\7\0\2\11"+
    "\25\0\10\11\1\201\16\11\7\0\2\11\25\0\2\11"+
    "\1\202\24\11\7\0\2\11\25\0\10\11\1\203\16\11"+
    "\7\0\2\11\25\0\10\11\1\204\16\11\7\0\2\11"+
    "\25\0\10\11\1\205\16\11\7\0\2\11\25\0\16\11"+
    "\1\206\10\11\7\0\2\11\25\0\17\11\1\207\7\11"+
    "\7\0\2\11\25\0\16\11\1\210\10\11\7\0\2\11"+
    "\25\0\15\11\1\211\11\11\7\0\2\11\25\0\10\11"+
    "\1\212\16\11\7\0\2\11\25\0\2\11\1\213\3\11"+
    "\1\214\20\11\7\0\2\11\25\0\12\11\1\215\14\11"+
    "\7\0\2\11\25\0\12\11\1\216\14\11\7\0\2\11"+
    "\25\0\6\11\1\217\20\11\7\0\2\11\25\0\6\11"+
    "\1\220\20\11\7\0\2\11\25\0\1\11\1\221\25\11"+
    "\7\0\2\11\25\0\10\11\1\222\16\11\7\0\2\11"+
    "\25\0\6\11\1\223\20\11\7\0\2\11\25\0\16\11"+
    "\1\224\10\11\11\130\1\225\1\166\52\130\7\0\2\11"+
    "\25\0\1\11\1\226\25\11\7\0\2\11\25\0\2\11"+
    "\1\227\24\11\7\0\2\11\25\0\12\11\1\230\14\11"+
    "\7\0\2\11\25\0\2\11\1\231\24\11\7\0\2\11"+
    "\25\0\3\11\1\232\23\11\7\0\2\11\25\0\3\11"+
    "\1\233\23\11\7\0\2\11\25\0\16\11\1\234\10\11"+
    "\7\0\2\11\25\0\2\11\1\235\24\11\7\0\2\11"+
    "\25\0\11\11\1\236\15\11\7\0\2\11\25\0\23\11"+
    "\1\237\3\11\7\0\2\11\25\0\3\11\1\240\23\11"+
    "\7\0\2\11\25\0\16\11\1\241\10\11\7\0\2\11"+
    "\25\0\3\11\1\242\23\11\7\0\2\11\25\0\10\11"+
    "\1\243\16\11\7\0\2\11\25\0\6\11\1\244\20\11"+
    "\7\0\2\11\25\0\12\11\1\245\14\11\7\0\2\11"+
    "\25\0\2\11\1\246\24\11\7\0\2\11\25\0\2\11"+
    "\1\247\24\11\7\0\2\11\25\0\12\11\1\250\14\11"+
    "\7\0\2\11\25\0\2\11\1\251\24\11\7\0\2\11"+
    "\25\0\13\11\1\252\13\11\7\0\2\11\25\0\13\11"+
    "\1\253\13\11\7\0\2\11\25\0\17\11\1\254\7\11"+
    "\7\0\2\11\25\0\2\11\1\255\24\11\7\0\2\11"+
    "\25\0\16\11\1\256\10\11\7\0\2\11\25\0\1\11"+
    "\1\257\25\11\7\0\2\11\25\0\7\11\1\260\17\11"+
    "\7\0\2\11\25\0\23\11\1\261\3\11\7\0\2\11"+
    "\25\0\16\11\1\262\10\11\7\0\2\11\25\0\2\11"+
    "\1\263\24\11\7\0\2\11\25\0\6\11\1\264\20\11"+
    "\7\0\2\11\25\0\7\11\1\265\17\11\7\0\2\11"+
    "\25\0\10\11\1\266\16\11\7\0\2\11\25\0\3\11"+
    "\1\267\23\11\7\0\2\11\25\0\12\11\1\270\14\11"+
    "\7\0\2\11\25\0\22\11\1\271\4\11\7\0\2\11"+
    "\25\0\10\11\1\272\16\11\7\0\2\11\25\0\15\11"+
    "\1\273\11\11\7\0\2\11\25\0\10\11\1\274\16\11"+
    "\7\0\2\11\25\0\3\11\1\275\23\11\7\0\2\11"+
    "\25\0\6\11\1\276\20\11\7\0\2\11\25\0\1\11"+
    "\1\277\25\11\7\0\2\11\25\0\15\11\1\300\11\11"+
    "\7\0\2\11\25\0\13\11\1\301\13\11\7\0\2\11"+
    "\25\0\15\11\1\302\11\11\7\0\2\11\25\0\6\11"+
    "\1\303\20\11\7\0\2\11\25\0\6\11\1\304\20\11"+
    "\7\0\2\11\25\0\1\305\1\306\1\307\4\11\1\310"+
    "\2\11\1\311\2\11\1\312\1\313\5\11\1\314\2\11"+
    "\7\0\2\11\25\0\16\11\1\315\10\11\7\0\2\11"+
    "\25\0\2\11\1\316\24\11\7\0\2\11\25\0\10\11"+
    "\1\317\16\11\7\0\2\11\25\0\1\11\1\320\25\11"+
    "\7\0\2\11\25\0\1\11\1\321\25\11\7\0\2\11"+
    "\25\0\10\11\1\322\16\11\7\0\2\11\25\0\1\11"+
    "\1\323\25\11\7\0\2\11\25\0\3\11\1\324\23\11"+
    "\7\0\2\11\25\0\13\11\1\325\13\11\7\0\2\11"+
    "\25\0\2\11\1\326\24\11\7\0\2\11\25\0\6\11"+
    "\1\327\20\11\7\0\2\11\25\0\2\11\1\330\24\11"+
    "\7\0\2\11\25\0\7\11\1\331\17\11\7\0\2\11"+
    "\25\0\3\11\1\332\23\11\7\0\2\11\25\0\2\11"+
    "\1\333\24\11\7\0\2\11\25\0\12\11\1\334\14\11"+
    "\7\0\2\11\25\0\12\11\1\335\14\11\7\0\2\11"+
    "\25\0\1\11\1\336\25\11\7\0\2\11\25\0\10\11"+
    "\1\337\1\11\1\340\14\11\7\0\2\11\25\0\2\11"+
    "\1\341\24\11\7\0\2\11\25\0\10\11\1\342\16\11"+
    "\7\0\2\11\25\0\10\11\1\343\16\11\7\0\2\11"+
    "\25\0\13\11\1\344\13\11\7\0\2\11\25\0\10\11"+
    "\1\345\16\11\7\0\2\11\25\0\1\11\1\346\4\11"+
    "\1\347\20\11\7\0\2\11\25\0\6\11\1\350\20\11"+
    "\7\0\2\11\25\0\12\11\1\351\14\11\7\0\2\11"+
    "\25\0\2\11\1\207\24\11\7\0\2\11\25\0\2\11"+
    "\1\352\24\11\7\0\2\11\25\0\2\11\1\353\24\11"+
    "\7\0\2\11\25\0\3\11\1\354\23\11\7\0\2\11"+
    "\25\0\2\11\1\355\24\11\7\0\2\11\25\0\10\11"+
    "\1\356\16\11\7\0\2\11\25\0\5\11\1\357\21\11"+
    "\7\0\2\11\25\0\14\11\1\360\12\11\7\0\2\11"+
    "\25\0\10\11\1\361\16\11\7\0\2\11\25\0\2\11"+
    "\1\362\24\11\7\0\2\11\25\0\2\11\1\363\24\11"+
    "\7\0\2\11\25\0\2\11\1\364\24\11\7\0\2\11"+
    "\25\0\3\11\1\365\23\11\7\0\2\11\25\0\7\11"+
    "\1\366\17\11\7\0\2\11\25\0\2\11\1\367\5\11"+
    "\1\370\16\11\7\0\2\11\25\0\14\11\1\371\12\11"+
    "\7\0\2\11\25\0\17\11\1\372\7\11\7\0\2\11"+
    "\25\0\1\11\1\373\25\11\7\0\2\11\25\0\22\11"+
    "\1\374\4\11\7\0\2\11\25\0\26\11\1\375\7\0"+
    "\2\11\25\0\3\11\1\376\23\11\7\0\2\11\25\0"+
    "\15\11\1\377\11\11\7\0\2\11\25\0\6\11\1\u0100"+
    "\20\11\7\0\2\11\25\0\15\11\1\u0101\11\11\7\0"+
    "\2\11\25\0\7\11\1\u0102\17\11\7\0\2\11\25\0"+
    "\6\11\1\u0103\20\11\7\0\2\11\25\0\3\11\1\u0104"+
    "\23\11\7\0\2\11\25\0\15\11\1\u0105\11\11\7\0"+
    "\2\11\25\0\10\11\1\u0106\16\11\7\0\2\11\25\0"+
    "\1\11\1\u0107\25\11\7\0\2\11\25\0\1\11\1\u0108"+
    "\25\11\7\0\2\11\25\0\2\11\1\u0109\24\11\7\0"+
    "\2\11\25\0\14\11\1\u010a\12\11\7\0\2\11\25\0"+
    "\23\11\1\u010b\3\11\7\0\2\11\25\0\15\11\1\u010c"+
    "\11\11\7\0\2\11\25\0\1\11\1\u010d\25\11\7\0"+
    "\2\11\25\0\15\11\1\u010e\11\11\7\0\2\11\25\0"+
    "\6\11\1\u010f\20\11\7\0\2\11\25\0\3\11\1\u0110"+
    "\23\11\7\0\2\11\25\0\10\11\1\u0111\16\11\7\0"+
    "\2\11\25\0\2\11\1\u0112\24\11\7\0\2\11\25\0"+
    "\15\11\1\u0113\11\11\7\0\2\11\25\0\1\11\1\u0114"+
    "\25\11\7\0\2\11\25\0\6\11\1\u0115\20\11\7\0"+
    "\2\11\25\0\20\11\1\u0116\6\11\7\0\2\11\25\0"+
    "\15\11\1\u0117\11\11\7\0\2\11\25\0\6\11\1\u0118"+
    "\20\11\7\0\2\11\25\0\5\11\1\u0119\21\11\7\0"+
    "\2\11\25\0\10\11\1\u011a\16\11\7\0\2\11\25\0"+
    "\6\11\1\u011b\20\11\7\0\2\11\25\0\15\11\1\u011c"+
    "\11\11\7\0\2\11\25\0\2\11\1\u011d\5\11\1\u011e"+
    "\16\11\7\0\2\11\25\0\3\11\1\u011f\23\11\7\0"+
    "\2\11\25\0\1\11\1\u0120\25\11\7\0\2\11\25\0"+
    "\3\11\1\u0121\4\11\1\u0122\1\11\1\u0123\14\11\7\0"+
    "\2\11\25\0\10\11\1\u0124\16\11\7\0\2\11\25\0"+
    "\3\11\1\u0125\23\11\7\0\2\11\25\0\7\11\1\u0126"+
    "\17\11\7\0\2\11\25\0\10\11\1\u0127\16\11\7\0"+
    "\2\11\25\0\7\11\1\u0128\17\11\7\0\2\11\25\0"+
    "\10\11\1\u0129\16\11\7\0\2\11\25\0\3\11\1\u012a"+
    "\23\11\7\0\2\11\25\0\10\11\1\u012b\16\11\7\0"+
    "\2\11\25\0\6\11\1\u012c\20\11\7\0\2\11\25\0"+
    "\3\11\1\u012d\23\11\7\0\2\11\25\0\6\11\1\u012e"+
    "\20\11\7\0\2\11\25\0\15\11\1\u012f\11\11\7\0"+
    "\2\11\25\0\7\11\1\u0130\17\11\7\0\2\11\25\0"+
    "\1\11\1\u0131\25\11\7\0\2\11\25\0\10\11\1\u0132"+
    "\16\11\7\0\2\11\25\0\22\11\1\u0133\4\11\7\0"+
    "\2\11\25\0\4\11\1\u0134\22\11\7\0\2\11\25\0"+
    "\23\11\1\u0135\3\11\7\0\2\11\25\0\22\11\1\u0136"+
    "\4\11\7\0\2\11\25\0\5\11\1\u0137\21\11\7\0"+
    "\2\11\25\0\10\11\1\u0138\16\11\7\0\2\11\25\0"+
    "\13\11\1\u0139\13\11\7\0\2\11\25\0\12\11\1\u013a"+
    "\14\11\7\0\2\11\25\0\17\11\1\u013b\7\11\7\0"+
    "\2\11\25\0\15\11\1\u013c\11\11\7\0\2\11\25\0"+
    "\16\11\1\u013d\10\11\7\0\2\11\25\0\1\11\1\u013e"+
    "\25\11\7\0\2\11\25\0\15\11\1\u013f\11\11\7\0"+
    "\2\11\25\0\3\11\1\u0140\23\11\7\0\2\11\25\0"+
    "\7\11\1\u0141\17\11\7\0\2\11\25\0\24\11\1\u0142"+
    "\2\11\7\0\2\11\25\0\25\11\1\u0143\1\11\7\0"+
    "\2\11\25\0\7\11\1\u0144\17\11\7\0\2\11\25\0"+
    "\6\11\1\u0145\20\11\7\0\2\11\25\0\15\11\1\u0146"+
    "\11\11\7\0\2\11\25\0\24\11\1\u0147\2\11\7\0"+
    "\2\11\25\0\6\11\1\u0148\20\11\7\0\2\11\25\0"+
    "\4\11\1\u0149\22\11\7\0\2\11\25\0\6\11\1\u014a"+
    "\20\11\7\0\2\11\25\0\2\11\1\u014b\24\11\7\0"+
    "\2\11\25\0\4\11\1\u014c\22\11\7\0\2\11\25\0"+
    "\10\11\1\u014d\16\11\7\0\2\11\25\0\6\11\1\u014e"+
    "\20\11\7\0\2\11\25\0\5\11\1\u014f\21\11\7\0"+
    "\2\11\25\0\13\11\1\u0150\13\11\7\0\2\11\25\0"+
    "\2\11\1\u0151\24\11\7\0\2\11\25\0\10\11\1\u0152"+
    "\16\11\7\0\2\11\25\0\10\11\1\u0153\16\11\7\0"+
    "\2\11\25\0\1\11\1\u0154\25\11\7\0\2\11\25\0"+
    "\2\11\1\u0155\24\11\7\0\2\11\25\0\10\11\1\u0156"+
    "\16\11\7\0\2\11\25\0\10\11\1\u0157\16\11\7\0"+
    "\2\11\25\0\15\11\1\u0158\11\11\7\0\2\11\25\0"+
    "\2\11\1\u0159\24\11\7\0\2\11\25\0\2\11\1\u015a"+
    "\24\11\7\0\2\11\25\0\1\11\1\u015b\25\11\7\0"+
    "\2\11\25\0\16\11\1\u015c\10\11\7\0\2\11\25\0"+
    "\12\11\1\u015d\14\11\7\0\2\11\25\0\21\11\1\u015e"+
    "\5\11\7\0\2\11\25\0\16\11\1\u015f\10\11\7\0"+
    "\2\11\25\0\12\11\1\u0160\14\11\7\0\2\11\25\0"+
    "\6\11\1\u0161\20\11\7\0\2\11\25\0\1\u0162\26\11"+
    "\7\0\2\11\25\0\6\11\1\u0163\20\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14893];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\11\1\1\11\3\1\1\11"+
    "\2\1\11\11\17\1\1\0\1\1\1\0\1\11\2\0"+
    "\14\11\30\1\2\0\34\1\1\0\36\1\1\11\316\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexScript(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexScript(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 318) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return new Symbol(sym.coma, new token(yycolumn, yyline, yytext()));
          }
        case 84: break;
        case 77: 
          { return new Symbol(sym.crearcontenedor, new token(yycolumn, yyline, yytext()));
          }
        case 85: break;
        case 74: 
          { return new Symbol(sym.crearventana, new token(yycolumn, yyline, yytext()));
          }
        case 86: break;
        case 24: 
          { return new Symbol(sym.acorch, new token(yycolumn, yyline, yytext()));
          }
        case 87: break;
        case 46: 
          { return new Symbol(sym.bool_literal, new token(yycolumn, yyline, yytext()));
          }
        case 88: break;
        case 39: 
          { return new Symbol(sym.si, new token(yycolumn, yyline, yytext()));
          }
        case 89: break;
        case 29: 
          { return new Symbol(sym.add, new token(yycolumn, yyline, yytext()));
          }
        case 90: break;
        case 78: 
          { return new Symbol(sym.obtenerpornombre, new token(yycolumn, yyline, yytext()));
          }
        case 91: break;
        case 79: 
          { return new Symbol(sym.crearreproductor, new token(yycolumn, yyline, yytext()));
          }
        case 92: break;
        case 57: 
          { return new Symbol(sym.filtrar, new token(yycolumn, yyline, yytext()));
          }
        case 93: break;
        case 5: 
          { return new Symbol(sym.pto, new token(yycolumn, yyline, yytext()));
          }
        case 94: break;
        case 56: 
          { return new Symbol(sym.funcion, new token(yycolumn, yyline, yytext()));
          }
        case 95: break;
        case 75: 
          { return new Symbol(sym.crearareatexto, new token(yycolumn, yyline, yytext()));
          }
        case 96: break;
        case 11: 
          { return new Symbol(sym.menos, new token(yycolumn, yyline, yytext()));
          }
        case 97: break;
        case 41: 
          { return new Symbol(sym.var, new token(yycolumn, yyline, yytext()));
          }
        case 98: break;
        case 8: 
          { return new Symbol(sym.por, new token(yycolumn, yyline, yytext()));
          }
        case 99: break;
        case 65: 
          { return new Symbol(sym.undefined, new token(yycolumn, yyline, yytext()));
          }
        case 100: break;
        case 2: 
          { Template.reporteError_CJS.agregar("Sintactico", yyline, yycolumn, "No se esperaba: " +yytext()+" - "+yychar);
          }
        case 101: break;
        case 19: 
          { return new Symbol(sym.dspts, new token(yycolumn, yyline, yytext()));
          }
        case 102: break;
        case 42: 
          { return new Symbol(sym.map, new token(yycolumn, yyline, yytext()));
          }
        case 103: break;
        case 68: 
          { return new Symbol(sym.creartexto, new token(yycolumn, yyline, yytext()));
          }
        case 104: break;
        case 28: 
          { return new Symbol(sym.asigpor, new token(yycolumn, yyline, yytext()));
          }
        case 105: break;
        case 25: 
          { return new Symbol(sym.ccorch, new token(yycolumn, yyline, yytext()));
          }
        case 106: break;
        case 33: 
          { return new Symbol(sym.sub, new token(yycolumn, yyline, yytext()));
          }
        case 107: break;
        case 73: 
          { return new Symbol(sym.obtenerporid, new token(yycolumn, yyline, yytext()));
          }
        case 108: break;
        case 38: 
          { return new Symbol(sym.or, new token(yycolumn, yyline, yytext()));
          }
        case 109: break;
        case 36: 
          { return new Symbol(sym.dif, new token(yycolumn, yyline, yytext()));
          }
        case 110: break;
        case 10: 
          { return new Symbol(sym.igual, new token(yycolumn, yyline, yytext()));
          }
        case 111: break;
        case 64: 
          { return new Symbol(sym.importar, new token(yycolumn, yyline, yytext()));
          }
        case 112: break;
        case 43: 
          { return new Symbol(sym.nulo, new token(yycolumn, yyline, yytext()));
          }
        case 113: break;
        case 67: 
          { return new Symbol(sym.crearvideo, new token(yycolumn, yyline, yytext()));
          }
        case 114: break;
        case 82: 
          { return new Symbol(sym.crearcontrolnumerico, new token(yycolumn, yyline, yytext()));
          }
        case 115: break;
        case 17: 
          { return new Symbol(sym.pyc, new token(yycolumn, yyline, yytext()));
          }
        case 116: break;
        case 51: 
          { return new Symbol(sym.maximo, new token(yycolumn, yyline, yytext()));
          }
        case 117: break;
        case 71: 
          { return new Symbol(sym.descendente, new token(yycolumn, yyline, yytext()));
          }
        case 118: break;
        case 26: 
          { return new Symbol(sym.string_literal, new token(yycolumn, yyline, yytext()));
          }
        case 119: break;
        case 15: 
          { return new Symbol(sym.not, new token(yycolumn, yyline, yytext()));
          }
        case 120: break;
        case 35: 
          { return new Symbol(sym.mayiq, new token(yycolumn, yyline, yytext()));
          }
        case 121: break;
        case 31: 
          { return new Symbol(sym.ig_ig, new token(yycolumn, yyline, yytext()));
          }
        case 122: break;
        case 69: 
          { return new Symbol(sym.crearboton, new token(yycolumn, yyline, yytext()));
          }
        case 123: break;
        case 13: 
          { return new Symbol(sym.menq, new token(yycolumn, yyline, yytext()));
          }
        case 124: break;
        case 44: 
          { return new Symbol(sym.caso, new token(yycolumn, yyline, yytext()));
          }
        case 125: break;
        case 6: 
          { return new Symbol(sym.iden, new token(yycolumn, yyline, yytext()));
          }
        case 126: break;
        case 58: 
          { return new Symbol(sym.alcargar, new token(yycolumn, yyline, yytext()));
          }
        case 127: break;
        case 4: 
          { return new Symbol(sym.int_literal, new token(yycolumn, yyline, yytext()));
          }
        case 128: break;
        case 83: 
          { return new Symbol(sym.creararraydesdearchivo, new token(yycolumn, yyline, yytext()));
          }
        case 129: break;
        case 63: 
          { return new Symbol(sym.imprimir, new token(yycolumn, yyline, yytext()));
          }
        case 130: break;
        case 61: 
          { return new Symbol(sym.leergxml, new token(yycolumn, yyline, yytext()));
          }
        case 131: break;
        case 55: 
          { return new Symbol(sym.detener, new token(yycolumn, yyline, yytext()));
          }
        case 132: break;
        case 52: 
          { return new Symbol(sym.minimo, new token(yycolumn, yyline, yytext()));
          }
        case 133: break;
        case 54: 
          { return new Symbol(sym.defecto, new token(yycolumn, yyline, yytext()));
          }
        case 134: break;
        case 9: 
          { return new Symbol(sym.mas, new token(yycolumn, yyline, yytext()));
          }
        case 135: break;
        case 1: 
          { return new Symbol(sym.double_literal, new token(yycolumn, yyline, yytext()));
          }
        case 136: break;
        case 53: 
          { return new Symbol(sym.buscar, new token(yycolumn, yyline, yytext()));
          }
        case 137: break;
        case 45: 
          { return new Symbol(sym.sino, new token(yycolumn, yyline, yytext()));
          }
        case 138: break;
        case 50: 
          { return new Symbol(sym.reduce, new token(yycolumn, yyline, yytext()));
          }
        case 139: break;
        case 23: 
          { return new Symbol(sym.clla, new token(yycolumn, yyline, yytext()));
          }
        case 140: break;
        case 49: 
          { return new Symbol(sym.alguno, new token(yycolumn, yyline, yytext()));
          }
        case 141: break;
        case 30: 
          { return new Symbol(sym.asigmas, new token(yycolumn, yyline, yytext()));
          }
        case 142: break;
        case 7: 
          { return new Symbol(sym.div, new token(yycolumn, yyline, yytext()));
          }
        case 143: break;
        case 81: 
          { return new Symbol(sym.obtenerporetiqueta, new token(yycolumn, yyline, yytext()));
          }
        case 144: break;
        case 47: 
          { return new Symbol(sym.todos, new token(yycolumn, yyline, yytext()));
          }
        case 145: break;
        case 59: 
          { return new Symbol(sym.alcerrar, new token(yycolumn, yyline, yytext()));
          }
        case 146: break;
        case 66: 
          { return new Symbol(sym.ascendente, new token(yycolumn, yyline, yytext()));
          }
        case 147: break;
        case 22: 
          { return new Symbol(sym.alla, new token(yycolumn, yyline, yytext()));
          }
        case 148: break;
        case 72: 
          { return new Symbol(sym.crearimagen, new token(yycolumn, yyline, yytext()));
          }
        case 149: break;
        case 14: 
          { return new Symbol(sym.mayq, new token(yycolumn, yyline, yytext()));
          }
        case 150: break;
        case 27: 
          { return new Symbol(sym.asigdiv, new token(yycolumn, yyline, yytext()));
          }
        case 151: break;
        case 80: 
          { return new Symbol(sym.creardesplegable, new token(yycolumn, yyline, yytext()));
          }
        case 152: break;
        case 3: 
          { /* ignorar */
          }
        case 153: break;
        case 20: 
          { return new Symbol(sym.apar, new token(yycolumn, yyline, yytext()));
          }
        case 154: break;
        case 32: 
          { return new Symbol(sym.asigmen, new token(yycolumn, yyline, yytext()));
          }
        case 155: break;
        case 37: 
          { return new Symbol(sym.and, new token(yycolumn, yyline, yytext()));
          }
        case 156: break;
        case 70: 
          { return new Symbol(sym.selecciona, new token(yycolumn, yyline, yytext()));
          }
        case 157: break;
        case 21: 
          { return new Symbol(sym.cpar, new token(yycolumn, yyline, yytext()));
          }
        case 158: break;
        case 12: 
          { return new Symbol(sym.pot, new token(yycolumn, yyline, yytext()));
          }
        case 159: break;
        case 16: 
          { return new Symbol(sym.trn, new token(yycolumn, yyline, yytext()));
          }
        case 160: break;
        case 34: 
          { return new Symbol(sym.meniq, new token(yycolumn, yyline, yytext()));
          }
        case 161: break;
        case 76: 
          { return new Symbol(sym.crearcajatexto, new token(yycolumn, yyline, yytext()));
          }
        case 162: break;
        case 48: 
          { return new Symbol(sym.alclic, new token(yycolumn, yyline, yytext()));
          }
        case 163: break;
        case 60: 
          { return new Symbol(sym.retornar, new token(yycolumn, yyline, yytext()));
          }
        case 164: break;
        case 40: 
          { 
          }
        case 165: break;
        case 62: 
          { return new Symbol(sym.invertir, new token(yycolumn, yyline, yytext()));
          }
        case 166: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
