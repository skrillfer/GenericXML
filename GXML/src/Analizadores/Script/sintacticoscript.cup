package Analizadores.Script;

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;

action code {:
    //se declaran variables globales etc.
        public int Index=1;
:}


parser code 
{:
    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 


terminal token  asigmas,asigmen,asigpor,asigdiv,
                mas,menos,por,div,pot,add,sub,
                menq,meniq,mayq,mayiq,ig_ig,dif,
                and,or,not,

                var,imprimir,importar,detener,selecciona,caso,defecto,retornar,si,sino,funcion,descendente,ascendente,
                creararraydesdearchivo,invertir,maximo,minimo,reduce,todos,alguno,filtrar,buscar,map,

                pyc,coma,pto,dspts,igual,apar,cpar,alla,clla,acorch,ccorch,

                string_literal,int_literal,bool_literal,double_literal,iden,

                leergxml,obtenerporetiqueta,obtenerporid,obtenerpornombre,
                crearventana,crearcontenedor,creartexto,crearcajatexto,crearareatexto,
                crearcontrolnumerico,creardesplegable,crearboton,crearimagen,crearreproductor,
                crearvideo,alclic,alcargar,alcerrar;

non terminal Nodo INICIO,DECLARA,LIST_ID,ASIGN,EXP,DATO,LIST_EXP,CONTARRAY,LIST_ATRI,
                  PARAM_ENVIAR,IMPRIMIR,IMPORTAR,DETENER;


start with INICIO;


INICIO ::= string_literal;





/*      Declaracion de variables        */

DECLARA ::= var:m LIST_ID:n ASIGN:o pyc
            {:
                RESULT = parser.crearNodo("declaracionvar",m.getCadena(),m.getLinea(),m.getColumna());
                RESULT.add(n);
                RESULT.add(o);
            :}
            |var iden igual alla LIST_ATRI clla pyc;

/* Lista de Atributos de Objeto */

LIST_ATRI   ::= iden dspts EXP;

/*      Lista de identificadores        */

LIST_ID ::=  LIST_ID:n coma iden:m
            {:
                n.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
                RESULT = n;
            :}
            |iden:m
            {:
                RESULT = parser.crearNodo("list_id",m.getCadena(),m.getLinea(),m.getColumna());
                RESULT.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
            :};


/*      contenido de arreglos        */
CONTARRAY  ::= acorch LIST_EXP ccorch;

LIST_EXP   ::= LIST_EXP coma EXP
            |EXP;


ASIGN   ::= igual EXP;




/*      IMPORTAR        */

IMPORTAR  ::= importar apar string_literal cpar pyc;



/*      DETENER        */

DETENER  ::= detener pyc;


/*      RETORNAR        */

DETENER  ::= retornar EXP pyc;

/*      Funcion Imprimir        */

IMPRIMIR   ::= imprimir apar PARAM_ENVIAR cpar;

PARAM_ENVIAR ::= {::}
                |LIST_EXP;


EXP     ::= DATO;


DATO    ::=  string_literal
            |double_literal
            |int_literal
            |bool_literal;
