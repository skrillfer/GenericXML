package Analizadores.Script;

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;

action code {:
    //se declaran variables globales etc.
        public int Index=1;
        public Nodo root = new Nodo();

:}


parser code 
{:

    /**
     * Este metodo retorna la RAIZ del arbol  generado 
     **/ 
    
    public Nodo getRoot(){
        return action_obj.root;
    }
    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 


terminal token  asigmas,asigmen,asigpor,asigdiv,
                mas,menos,por,div,pot,add,sub,
                menq,meniq,mayq,mayiq,ig_ig,dif,
                and,or,not,trn,

                var,imprimir,importar,detener,selecciona,caso,defecto,retornar,si,sino,funcion,descendente,ascendente,
                creararraydesdearchivo,invertir,maximo,minimo,reduce,todos,alguno,filtrar,buscar,map,

                pyc,coma,pto,dspts,igual,apar,cpar,alla,clla,acorch,ccorch,

                string_literal,int_literal,bool_literal,double_literal,iden,

                leergxml,obtenerporetiqueta,obtenerporid,obtenerpornombre,
                crearventana,crearcontenedor,creartexto,crearcajatexto,crearareatexto,
                crearcontrolnumerico,creardesplegable,crearboton,crearimagen,crearreproductor,
                crearvideo,alclic,alcargar,alcerrar,nulo;
  
non terminal Nodo INICIO,DECLARA,LIST_ID,ASIGN,DATO,LIST_EXP,CONTARRAY,LIST_ATRI,
                  PARAM_ENVIAR,IMPRIMIR,S_IMPORT,IMPORTS,IMPORTAR,DETENER,EXP,EXP_R,EXP_A,
                  SELECCIONA,CONT_SELECCIONA,LISTA_CASOS,CASO_DEFECTO,RETORNAR,
                  INSTRUCCIONES,INSTRUCCIONES_FUERA,I_NSTRUCCIONESF,SENTENCIAF,I_NSTRUCCIONES,SENTENCIA,
                  SI,MUCHOS_SINOSI,FINAL_SINO,LIST_SINOSI,SINO_SI,SINO,FUNCION,PARAMETROS,LISTA_PARAMETROS,
                  LLAMADA,ENVIO,ACCESO,ACCESOVAR,ACCESOARR,INDICES,INDICE,NATIVAS,
                  ASIGNACION,TIPOASIG,ATRIBUTOS,ATRIBUTO,SIMPLIFICADA,CONTOBJ,VAR_S;
    
/* PRECEDENCIAS */
precedence left mas, menos;
precedence left por, div;
precedence left pot;
precedence left add,sub;
precedence left apar,cpar;
precedence left ig_ig,mayq,menq,mayiq,meniq,dif;
precedence left or;
precedence left and;
precedence right not;
precedence left trn;

start with INICIO;


INICIO ::=  S_IMPORT:h1 INSTRUCCIONES_FUERA:h2  
            {:  
                root = parser.crearNodo("raiz","",h1.linea,h1.columna);  
                root.add(h1);
                root.add(h2);
            :};

S_IMPORT ::= {:     RESULT = parser.crearNodo("imports","",0,0);      :}
            |IMPORTS:r  {:  RESULT = r; :};


IMPORTS  ::= IMPORTS:r IMPORTAR:h
             {:
                r.add(h);
                RESULT = r;
             :}
             |IMPORTAR:h
             {:
                RESULT = parser.crearNodo("imports","",h.linea,h.columna);  
                RESULT.add(h); 
             :};



/*      IMPORTAR        */

IMPORTAR  ::= importar apar string_literal cpar pyc;


//*************************Instrucciones FUERA ****************************************
INSTRUCCIONES_FUERA  ::= {:  RESULT = parser.crearNodo("sentencias","",0,0);  :}
                         |I_NSTRUCCIONESF:b {: RESULT = b; :};

I_NSTRUCCIONESF ::= I_NSTRUCCIONESF:r SENTENCIAF:h {:  r.add(h); RESULT = r;  :}
                    |SENTENCIAF:h 
                    {: 
                        RESULT = parser.crearNodo("sentencias","",h.linea,h.columna);  
                        RESULT.add(h); 
                    :};

SENTENCIAF      ::= DECLARA:g                {: g.nombre += "G"; RESULT = g; :}
                   |FUNCION:g                {: RESULT = g; :}
                   |SELECCIONA:X             {: RESULT = X; :}
                   |SI:X                     {: RESULT = X; :}
                   |DETENER:X                {: RESULT = X; :}
                   |IMPRIMIR:X          pyc  {: RESULT = X; :}
                   |RETORNAR:X          pyc  {: RESULT = X; :}
                   |DETENER:X           pyc  {: RESULT = X; :}
                   |ASIGNACION:X        pyc  {: RESULT = X; :}
                   |ACCESO:X            pyc  {: RESULT = X; :} ;







/*      Declaracion de variables        */

DECLARA ::= var:m LIST_ID:n ASIGN:o pyc
            {:
                RESULT = parser.crearNodo("declaracionvar","",m.getLinea(),m.getColumna());
                RESULT.add(n);
                RESULT.add(o);
            :}
            /*|var:m LIST_ID:n igual alla LIST_ATRI:o clla pyc 
            {:
                RESULT = parser.crearNodo("declaracionobj","",m.getLinea(),m.getColumna());
                RESULT.add(n);
                RESULT.add(o);
            :}*/;

/* Lista de Atributos de Objeto */

LIST_ATRI   ::= {:  RESULT = parser.crearNodo("atributos","",0,0);    :}
                |ATRIBUTOS:r {: RESULT = r; :};



ATRIBUTOS   ::= ATRIBUTOS:r coma ATRIBUTO:h
               {:
                    r.add(h);
                    RESULT = r;
               :}
               |ATRIBUTO:h
               {:
                    RESULT = parser.crearNodo("atributos","",h.linea,h.columna);
                    RESULT.add(h);
               :};

ATRIBUTO    ::= iden:m dspts EXP:h
                {:
                    RESULT = parser.crearNodo("declaracionvarG","",m.getLinea(),m.getColumna());
                    
                    Nodo Lt_id = parser.crearNodo("list_id","",m.getLinea(),m.getColumna());
                    Lt_id.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
                    
                    Nodo Asign = parser.crearNodo("asign","",h.linea,h.columna);
                    Asign.add(h);

                    RESULT.add(Lt_id);
                    RESULT.add(Asign); 
                :};

/*      Lista de identificadores        */

LIST_ID ::=  LIST_ID:n coma iden:m
            {:
                n.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
                RESULT = n;
            :}
            |iden:m
            {:
                RESULT = parser.crearNodo("list_id","",m.getLinea(),m.getColumna());
                RESULT.add(parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna()));
            :};


/*      contenido de objetos         */
CONTOBJ  ::= alla LIST_ATRI:m clla
            {:
                RESULT = parser.crearNodo("cntobj","",m.linea,m.columna);
                RESULT.add(m);
            :};

/*      contenido de arreglos        */
CONTARRAY  ::= acorch LIST_EXP:m ccorch
               {:
                    RESULT = parser.crearNodo("cntarray","",m.linea,m.columna);
                    RESULT.add(m);
               :}
               |acorch:m ccorch
               {:
                    RESULT = parser.crearNodo("cntarray","",m.getLinea(),m.getColumna());
                    RESULT.add( parser.crearNodo("lista_exp","",m.getLinea(),m.getColumna()) );
               :};

LIST_EXP   ::= LIST_EXP:r coma EXP:h
            {:
                r.add(h);
                RESULT = r;
            :}
            |EXP:m 
            {:
                RESULT = parser.crearNodo("lista_exp","",m.linea,m.columna);
                RESULT.add(m);
            :};


ASIGN   ::= {:  RESULT = parser.crearNodo("asign","",0,0);   :}
            |igual:m EXP:h1
            {:
                RESULT = parser.crearNodo("asign","",m.getLinea(),m.getColumna());
                RESULT.add(h1);
            :};







/*      DETENER        */

DETENER  ::= detener:a 
            {:
                    RESULT = parser.crearNodo("terminar","",a.getLinea(),a.getColumna());
            :};


/*      RETORNAR        */

RETORNAR  ::= retornar:a EXP:h1 
              {:
                    RESULT = parser.crearNodo("retorno","",a.getLinea(),a.getColumna());
                    RESULT.add(h1);
              :};

/*      Funcion Imprimir        */

IMPRIMIR   ::= imprimir:a apar PARAM_ENVIAR:h1 cpar 
               {:
                    RESULT = parser.crearNodo("imprimir","",a.getLinea(),a.getColumna());
                    RESULT.add(h1);
               :};

PARAM_ENVIAR ::= {: RESULT = parser.crearNodo("parametros","",0,0);  :}
                |LIST_EXP:h1  {:   RESULT = h1; :};



//*************************Instrucciones****************************************
INSTRUCCIONES  ::= {:  RESULT = parser.crearNodo("sentencias","",0,0);  :}
                   |I_NSTRUCCIONES:X {: RESULT = X; :};

I_NSTRUCCIONES ::= I_NSTRUCCIONES:R SENTENCIA:H {:  R.add(H); RESULT = R;  :}
                 |SENTENCIA:H 
                 {: 
                    RESULT = parser.crearNodo("sentencias","",H.linea,H.columna);
                    RESULT.add(H); 
                 :};

SENTENCIA      ::= DECLARA:g                {: RESULT = g; :}
                   |SELECCIONA:X            {: RESULT = X; :}
                   |SI:X                    {: RESULT = X; :}
                   |DETENER:X               {: RESULT = X; :}
                   |IMPRIMIR:X          pyc {: RESULT = X; :}
                   |RETORNAR:X          pyc {: RESULT = X; :}
                   |DETENER:X           pyc {: RESULT = X; :}
                   |ASIGNACION:X        pyc {: RESULT = X; :}
                   |ACCESO:X            pyc {: RESULT = X; :} ;

//*************************____Asignacion____***********************************
ASIGNACION     ::= ACCESO:h1 TIPOASIG:h2 EXP:h3 
                   {:
                        RESULT = parser.crearNodo("asignacion","",h1.linea,h1.columna);
                        RESULT.add(h1);     RESULT.add(h2);     RESULT.add(h3);
                   :};


TIPOASIG       ::= igual:a    {:    RESULT = parser.crearNodo("igual",a.getCadena(),a.getLinea(),a.getColumna());     :}
                   |asigmas:a {:    RESULT = parser.crearNodo("asigmas",a.getCadena(),a.getLinea(),a.getColumna());     :}
                   |asigmen:a {:    RESULT = parser.crearNodo("asigmen",a.getCadena(),a.getLinea(),a.getColumna());     :}
                   |asigpor:a {:    RESULT = parser.crearNodo("asigpor",a.getCadena(),a.getLinea(),a.getColumna());     :}
                   |asigdiv:a {:    RESULT = parser.crearNodo("asigdiv",a.getCadena(),a.getLinea(),a.getColumna());     :} ;

//************************Metodos y Funciones***********************************
FUNCION ::= funcion:w iden:x apar PARAMETROS:y cpar alla INSTRUCCIONES:z clla 
           {:
                RESULT = parser.crearNodo("funcion","",w.getLinea(),w.getColumna()); // se crea la raiz FUNCION
                RESULT.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));// agrego el nombre 
                RESULT.add(y);//agrego los parametros
                RESULT.add(z);//agrego las instrucciones
           :};


PARAMETROS ::= {:   RESULT = parser.crearNodo("parametros","",0,0);  :}
              |LISTA_PARAMETROS:x{:     RESULT=x;   :};

LISTA_PARAMETROS ::=LISTA_PARAMETROS:x coma VAR_S iden:y{:
                        Nodo param = parser.crearNodo("parametro",y.getCadena(),y.getLinea(),y.getColumna());
                        x.add(param);
                        RESULT=x;
                    :}
                    |VAR_S iden:x {:
                        RESULT = parser.crearNodo("parametros","",x.getLinea(),x.getColumna());
                        Nodo param = parser.crearNodo("parametro",x.getCadena(),x.getLinea(),x.getColumna());
                        RESULT.add(param);    
                    :};


VAR_S  ::={::}
          |var;
//**************************Selecciona *****************************************

SELECCIONA ::= selecciona:w apar EXP:X cpar alla CONT_SELECCIONA:Y clla
            {:
                RESULT = parser.crearNodo("selecciona","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la EXPRESION
                RESULT.add(Y);// se agrega la lista de CASOS
            :};

CONT_SELECCIONA ::= {: RESULT = parser.crearNodo("casos","",0,0); :}
                    |LISTA_CASOS:X{: RESULT= X; :};


LISTA_CASOS ::= LISTA_CASOS:R CASO_DEFECTO:X{:
                    R.add(X);
                    RESULT = R;
                :}
               |CASO_DEFECTO:X{:
                    RESULT = parser.crearNodo("casos","",X.linea,X.columna);
                    RESULT.add(X);
               :};

CASO_DEFECTO  ::= caso:w   EXP_A:X   dspts   alla INSTRUCCIONES:Y clla{:
                    RESULT = parser.crearNodo("caso","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la EXPR
                    RESULT.add(Y);// se agregan las instrucciones
                :}
                |defecto:w           dspts   alla INSTRUCCIONES:Y clla{:
                    RESULT = parser.crearNodo("defecto","",w.getLinea(),w.getColumna());
                    RESULT.add(Y);// se agregan las instrucciones
                :};



//**************************Sentencia SI ***************************************

SI     ::= si:w apar EXP:X cpar alla INSTRUCCIONES:Y clla MUCHOS_SINOSI:Z  
          {:
            RESULT = parser.crearNodo("si","",w.getLinea(),w.getColumna());
            RESULT.add(X);// se agrega la expresion
            RESULT.add(Y);// se agrega el conjunto de instrucciones
            RESULT.add(Z);// se agrega la lista de sinosi
            
          :};

/*____________________________________________________________________________*/
MUCHOS_SINOSI ::= FINAL_SINO:b {: RESULT = parser.crearNodo("lista_sinosi","",0,0); RESULT.add(b);  :}
                 |LIST_SINOSI:root FINAL_SINO:b {: root.add(b);  RESULT = root; :}; 

LIST_SINOSI ::= LIST_SINOSI:r SINO_SI:h
            {:
                r.add(h);
                RESULT = r;
            :}
            |SINO_SI:X
            {:
                RESULT = parser.crearNodo("lista_sinosi","",X.linea,X.columna);
                RESULT.add(X);
            :};

SINO_SI     ::= sino:X si apar EXP:c cpar alla INSTRUCCIONES:i clla
            {:
                RESULT = parser.crearNodo("sinosi","",X.getLinea(),X.getColumna());
                RESULT.add(c); //condicion
                RESULT.add(i); //instrucciones
            :};

/*____________________________________________________________________________*/
FINAL_SINO ::= {:   RESULT = parser.crearNodo("sino","",0,0); :}
              |SINO:root {:      RESULT=root; :};

SINO   ::= sino:X alla INSTRUCCIONES:i clla {:
                RESULT = parser.crearNodo("sino","",X.getLinea(),X.getColumna());
                RESULT.add(i);// se agrega el conjunto de instrucciones
           :};



//************************Expresiones Logicas***********************************
EXP ::=   EXP:b trn:a EXP:c dspts EXP:d{:
                                          RESULT = parser.crearNodo("trn","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c); RESULT.add(d);
                                       :} 
          |EXP:b and:a EXP:c     {:
                                          RESULT = parser.crearNodo("and","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                       :}
          |EXP:b or:a  EXP:c     {:
                                          RESULT = parser.crearNodo("or","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                      :}
          |not:a EXP:b             {:    
                                          RESULT = parser.crearNodo("not","",a.getLinea(),a.getColumna());
                                          RESULT.add(b);
                                      :}
          |EXP_R:a                   {:  RESULT=a;   :};

//************************Expresiones Relacionales******************************
EXP_R ::= EXP_A:b menq:a EXP_A:c {:
                                        RESULT = parser.crearNodo("menq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    :}
          |EXP_A:b meniq:a EXP_A:c{:
                                        RESULT = parser.crearNodo("meniq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    :}
          |EXP_A:b mayq:a EXP_A:c {:
                                        RESULT = parser.crearNodo("mayq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |EXP_A:b mayiq:a EXP_A:c{:
                                        RESULT = parser.crearNodo("mayiq","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |EXP_A:b ig_ig:a EXP_A:c{:
                                        RESULT = parser.crearNodo("ig_ig","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |EXP_A:b dif:a EXP_A:c  {:
                                        RESULT = parser.crearNodo("dif","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |EXP_A:r                {:  RESULT = r;  :};



//************************Expresiones Aritmeticas*******************************
EXP_A ::= EXP_A:b mas:a EXP_A:c    {:
                                        RESULT = parser.crearNodo("mas","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |EXP_A:b menos:a EXP_A:c  {:
                                        RESULT = parser.crearNodo("menos","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |EXP_A:b por:a EXP_A:c    {:
                                        RESULT = parser.crearNodo("por","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |EXP_A:b div:a EXP_A:c    {:
                                        RESULT = parser.crearNodo("div","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |EXP_A:b pot:a EXP_A:c    {:
                                        RESULT = parser.crearNodo("pot","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |apar EXP:r cpar         {:  RESULT=r;    :}
          |CONTARRAY:r             {:  RESULT=r;    :}
          |CONTOBJ:r               {:  RESULT=r;    :}
          |menos:a EXP_A:H         {:  RESULT = parser.crearNodo("unario","",a.getLinea(),a.getColumna()); RESULT.add(H); :}
          |DATO:r                  {:  RESULT=r;    :}
          |SIMPLIFICADA:r          {:  RESULT=r;    :}
          |ACCESO:r                {:  RESULT=r;    :};

SIMPLIFICADA ::= EXP_A:h1 add:w {:                                 

                    RESULT = parser.crearNodo("ADD","",w.getLinea(),w.getColumna());
                    RESULT.add(h1);
                :}
                |EXP_A:h1 sub:w{:

                    RESULT = parser.crearNodo("SUB","",w.getLinea(),w.getColumna());
                    RESULT.add(h1);
                :};

/*-----------------   ACCESO        ------------------------------------------*/
ACCESO    ::= ACCESO:r pto ACCESOVAR:h
             {:
                r.add(h);   RESULT = r;  
             :}
             |ACCESOVAR:h1
             {:
                    RESULT = parser.crearNodo("acceso","",h1.linea,h1.columna);
                    RESULT.add(h1);
             :};
  
ACCESOVAR ::= iden:h1       {: RESULT = parser.crearNodo("id",h1.getCadena(),h1.getLinea(),h1.getColumna()); :}
            |ACCESOARR:r    {: RESULT=r;   :}
            |LLAMADA:r      {: RESULT=r;   :};

/*-----------------   ACCESOARR  ----------- ------------------------*/
            
ACCESOARR ::= iden:h1 INDICES:h2
              {:
                    RESULT = parser.crearNodo("accesoar",h1.getCadena(),h1.getLinea(),h1.getColumna());
                    RESULT.add(h2);
              :};


INDICES   ::= INDICES:r INDICE:h
             {:
                r.add(h);
                RESULT = r;
             :}
             |INDICE:a
             {:
                RESULT = parser.crearNodo("indices","",a.linea,a.columna);  
                RESULT.add(a);
            :};

INDICE    ::= acorch EXP:a ccorch {:      RESULT = a;          :};

/*-----------------   LLAMADA A FUNCIONES  -----------------------------------*/
LLAMADA ::= NATIVAS:a apar ENVIO:H cpar{:
                        RESULT = parser.crearNodo("llamada",a.valor,a.linea,a.columna);  
                        RESULT.add(H);
                    :};
ENVIO  ::= {: RESULT = parser.crearNodo("envios","",0,0); :}
           |LIST_EXP:X{: RESULT = X;  :};

/*________NATIVAS________*/
NATIVAS ::= ascendente:a                        {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |descendente:a                      {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |creararraydesdearchivo:a           {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |invertir:a                         {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |maximo:a                           {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |minimo:a                           {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |filtrar:a                          {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |buscar:a                           {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |reduce:a                           {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |todos:a                            {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |alguno:a                           {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |map:a                              {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |leergxml:a                         {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |obtenerporetiqueta:a               {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |obtenerporid:a                     {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |obtenerpornombre:a                 {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |crearventana:a                     {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |crearcontenedor:a                  {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}        
            |creartexto:a                       {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |crearcajatexto:a                   {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |crearareatexto:a                   {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |crearcontrolnumerico:a             {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |creardesplegable:a                 {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |crearboton:a                       {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |crearimagen:a                      {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |crearreproductor:a                 {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |crearvideo:a                       {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |alclic:a                           {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |alcargar:a                         {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |alcerrar:a                         {:  RESULT = parser.crearNodo("nativa",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |iden:a                             {:  RESULT = parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna());  :};
            

/*-----------------    Funciones Propias de Funtional Script    --------------*/

DATO    ::=  string_literal:a         {:  String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                                          RESULT = parser.crearNodo("string_literal",cad,a.getLinea(),a.getColumna());  :}
            |double_literal:a         {:  RESULT = parser.crearNodo("double_literal",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |int_literal:a            {:  RESULT = parser.crearNodo("int_literal",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |bool_literal:a           {:  RESULT = parser.crearNodo("bool_literal",a.getCadena(),a.getLinea(),a.getColumna());  :}
            |nulo:a                   {:  RESULT = parser.crearNodo("nulo",a.getCadena(),a.getLinea(),a.getColumna());  :};
