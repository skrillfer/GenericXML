package Analizadores.Gxml; 

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;


action code {:
    //se declaran variables globales etc.
        public int Index=1;
        public Nodo root = new Nodo();

:}

parser code 
{:
    /**
     * Este metodo retorna la RAIZ del arbol  generado 
     **/ 
    
    public Nodo getRoot(){
        return action_obj.root;
    }
    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 

terminal token importarA2,importarF1,ventanaA1,ventanaF1,
               contenedorA1,contenedorA2,contenedorF1,
               tipo,nombre,id,alto,ancho,fuente,tam,color,x,y,negrita,cursiva,maximo,minimo,
               accion,accionini,accionfin,referencia,path,autorepro,ID,alla,clla,pyc,explicit,div,string_literal,
               igual,menq,mayq,textoA1,textoA2,textoF1,controlA1,controlA2,controlF1,datoA1,datoA2,datoF1,
               defectoA1,defectoA2,defectoF1,listadatosA1,listadatosA2,listadatosF1,enviarA1,enviarA2,enviarF1,
               multimediaA1,multimediaA2,multimediaF1,int_literal,double_literal,bool_literal,borde,event,
               botonA1,botonA2,botonF1;

non terminal Nodo INICIO,ENCABEZADO,IMPORTS,L_VENTANAS,VENTANAS,VENTANAX,
                  LIST_ATTSTART,LIST_ATTS,
                  CONTENIDOVENTANA,CONTENIDOCUERPO,IM1,ATT,
                  ETIQUETASforma1,ETIQUETASforma2,
                  CONTENIDOListaDatos,CONTENIDOControl,CONTENIDOContenedor, CONTENIDOBoton,CONTENIDOEnviar,
                  VALOR,ATRIBUTO;

start with INICIO;

INICIO ::= ENCABEZADO:h1  VENTANAS:h2 
          {:
                root = parser.crearNodo("raiz","",h1.linea,h1.columna);  
                root.add(h1);
                root.add(h2);
          :};

/*---------------------Lista de Imports----------------------------------------*/
ENCABEZADO  ::= {:  RESULT = parser.crearNodo("imports","",0,0);  :}
               | IMPORTS:r    {:   RESULT = r;   :};

IMPORTS     ::= IMPORTS:r IM1:h
               {:
                    r.add(h);
                    RESULT = r;
               :}
               |IM1:h
               {:
                    RESULT = parser.crearNodo("imports","",h.linea,h.columna);
                    RESULT.add(h);
               :};

IM1         ::= importarA2 explicit:x div importarF1 
                {: 
                    RESULT = parser.crearNodo("import",x.getCadena(),x.getLinea(),x.getColumna());
                :};



/*---------------------Lista de Ventanas---------------------------------------*/
VENTANAS    ::= {:  RESULT = parser.crearNodo("ventanas","",0,0);    :}
               |L_VENTANAS:r  {:  RESULT =r;  :};


L_VENTANAS  ::= L_VENTANAS:r VENTANAX:h
               {:
                    r.add(h);
                    RESULT = r;
               :}
               |VENTANAX:h
               {:
                    RESULT = parser.crearNodo("ventanas","",h.linea,h.columna);
                    RESULT.add(h);
               :};


VENTANAX    ::= ventanaA1:m LIST_ATTSTART:h1 explicit:h2 CONTENIDOVENTANA:h3 
               {:
                    RESULT = parser.crearNodo("ventana","",m.getLinea(),m.getColumna());
                    RESULT.add(h1);
                    RESULT.add(parser.crearNodo("explicit",h2.getCadena(),h2.getLinea(),h2.getColumna()));
                    RESULT.add(h3);
               :};
                

CONTENIDOVENTANA ::=   CONTENIDOCUERPO:r menq div ventanaF1  {:RESULT = r; :}
                      |div ventanaF1 {: RESULT = parser.crearNodo("cuerpos","",0,0); :};

/*---------------------Lista de Contenedores-----------------------------------*/

/*-----------------------------TODAS LAS POSIBLES ETIQUETAS--------------------*/

CONTENIDOCUERPO  ::= CONTENIDOCUERPO:r ETIQUETASforma2:h
                   {:
                        if(h.nombre.equals("#error"))
                        {
                            System.out.println("Error Sintactico en la linea:"+h.linea+" columna "+ h.columna);
                        }else
                        {
                            r.add(h);   
                        }
                        RESULT = r;
                   :}
                   |ETIQUETASforma1:h
                   {:
                        RESULT = parser.crearNodo("cuerpos","",h.linea,h.columna);

                        if(h.nombre.equals("#error"))
                        {
                            System.out.println("Error Sintactico en la linea:"+h.linea+" columna "+ h.columna);
                        }else
                        {
                            RESULT.add(h);
                        }
                   :};
   
ETIQUETASforma2  ::= textoA1:m          LIST_ATTSTART:h explicit:e textoF1                 {: RESULT = parser.crearNodo("texto","texto",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); :}
                    |controlA1:m        LIST_ATTSTART:h explicit:e CONTENIDOControl:R      {: RESULT = parser.crearNodo("control","control",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |datoA1:m           LIST_ATTSTART:h explicit:e datoF1                  {: RESULT = parser.crearNodo("dato","dato",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); :}
                    |defectoA1:m        LIST_ATTSTART:h explicit:e defectoF1               {: RESULT = parser.crearNodo("defecto","defecto",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); :}
                    |botonA1:m          LIST_ATTSTART:h explicit:e CONTENIDOBoton:R        {: RESULT = parser.crearNodo("boton","boton",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |listadatosA1:m     LIST_ATTSTART:h explicit:e CONTENIDOListaDatos:R   {: RESULT = parser.crearNodo("listadatos","listadatos",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |enviarA1:m         LIST_ATTSTART:h explicit:e CONTENIDOEnviar:R       {: RESULT = parser.crearNodo("enviar","enviar",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |multimediaA1:m     LIST_ATTSTART:h explicit:e multimediaF1            {: RESULT = parser.crearNodo("multimedia","multimedia",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); :}
                    |contenedorA1:m     LIST_ATTSTART:h explicit:e CONTENIDOContenedor:R   {: RESULT = parser.crearNodo("contenedor","contenedor",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |error {:  RESULT = parser.crearNodo("#error","",0,0);  :}; 

ETIQUETASforma1  ::= textoA2:m          LIST_ATTSTART:h explicit:e textoF1                 {: RESULT = parser.crearNodo("texto","texto",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); :}
                    |controlA2:m        LIST_ATTSTART:h explicit:e CONTENIDOControl:R      {: RESULT = parser.crearNodo("control","control",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |datoA2:m           LIST_ATTSTART:h explicit:e datoF1                  {: RESULT = parser.crearNodo("dato","dato",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); :}
                    |defectoA2:m        LIST_ATTSTART:h explicit:e defectoF1               {: RESULT = parser.crearNodo("defecto","defecto",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); :}
                    |botonA2:m          LIST_ATTSTART:h explicit:e CONTENIDOBoton:R        {: RESULT = parser.crearNodo("boton","boton",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |listadatosA2:m     LIST_ATTSTART:h explicit:e CONTENIDOListaDatos:R   {: RESULT = parser.crearNodo("listadatos","listadatos",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |enviarA2:m         LIST_ATTSTART:h explicit:e CONTENIDOEnviar:R       {: RESULT = parser.crearNodo("enviar","enviar",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |multimediaA2:m     LIST_ATTSTART:h explicit:e multimediaF1            {: RESULT = parser.crearNodo("multimedia","multimedia",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); :}
                    |contenedorA2:m     LIST_ATTSTART:h explicit:e CONTENIDOContenedor:R   {: RESULT = parser.crearNodo("contenedor","contenedor",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); :}
                    |error {:  RESULT = parser.crearNodo("#error","",0,0);  :}; 
 
/*-----------------CONTENIDO DE ENVIAR --------------------------------*/
CONTENIDOEnviar ::= enviarF1             {: RESULT = parser.crearNodo("cuerpos","",0,0);  :}
                       |CONTENIDOCUERPO:m menq enviarF1 {: RESULT = m;  :}; 

/*-----------------CONTENIDO DE BOTON --------------------------------*/
CONTENIDOBoton ::= botonF1             {: RESULT = parser.crearNodo("cuerpos","",0,0);  :}
                       |CONTENIDOCUERPO:m menq botonF1 {: RESULT = m;  :}; 

/*-----------------CONTENIDO DE LISTA DE DATOS --------------------------------*/
CONTENIDOListaDatos ::= listadatosF1   {: RESULT = parser.crearNodo("cuerpos","",0,0);  :}
                       |CONTENIDOCUERPO:m menq listadatosF1 {: RESULT = m;  :}; 


/*-----------------CONTENIDO DE COMPONENTE CONTROL ----------------------------*/
CONTENIDOControl ::=   controlF1       {: RESULT = parser.crearNodo("cuerpos","",0,0);  :}
                       |CONTENIDOCUERPO:m menq controlF1    {: RESULT = m;  :}; 

/*-----------------CONTENIDO DE COMPONENTE CONTENEDOR -------------------------*/

CONTENIDOContenedor ::=   contenedorF1 {: RESULT = parser.crearNodo("cuerpos","",0,0);  :}
                       |CONTENIDOCUERPO:m menq contenedorF1 {: RESULT = m;  :}; 




LIST_ATTSTART  ::= {: RESULT = parser.crearNodo("atributos","",0,0);  :}
                   |LIST_ATTS:m {: RESULT = m; :};

LIST_ATTS      ::= LIST_ATTS:m ATT:n
                  {:
                        if(n.nombre.equals("#error"))
                        {
                            System.out.println("Error Sintactico en la linea:"+n.linea+" columna "+ n.columna);
                        }else
                        {
                            m.add(n);
                        }
                         
                        RESULT = m;
                  :}
                  |ATT:m
                  {:  
                        RESULT = parser.crearNodo("atributos","",m.linea,m.columna); 
                        if(m.nombre.equals("#error"))
                        {
                            System.out.println("Error Sintactico en la linea:"+m.linea+" columna "+ m.columna);
                        }else
                        {
                            RESULT.add(m); 
                        }
                        
                  :};
 
ATT            ::= ATRIBUTO:m   igual:v VALOR:n
                   {: 
                        RESULT = parser.crearNodo("atributo","",m.linea,m.columna);   
                        RESULT.add(m);
                        if(n.nombre.equals("#error"))
                        {
                            n.nombre = "string_literal";
                            System.out.println("Error Sintactico en la linea:"+v.getLinea()+" columna "+ v.getColumna());
                        }
                        RESULT.add(n);
                   :};

ATRIBUTO   ::= id:m                {:  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  :}
               |tipo:m             {:  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  :}
               |accionini:m        {:  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  :}
               |accionfin:m        {:  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  :}
               |x:m                {:  RESULT = parser.crearNodo("x",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |y:m                {:  RESULT = parser.crearNodo("y",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |alto:m             {:  RESULT = parser.crearNodo("alto",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |ancho:m            {:  RESULT = parser.crearNodo("ancho",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |borde:m            {:  RESULT = parser.crearNodo("borde",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |nombre:m           {:  RESULT = parser.crearNodo("nombre",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |fuente:m           {:  RESULT = parser.crearNodo("fuente",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |tam:m              {:  RESULT = parser.crearNodo("tam",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |color:m            {:  RESULT = parser.crearNodo("color",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |negrita:m          {:  RESULT = parser.crearNodo("negrita",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |cursiva:m          {:  RESULT = parser.crearNodo("cursiva",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |maximo:m           {:  RESULT = parser.crearNodo("maximo",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |minimo:m           {:  RESULT = parser.crearNodo("minimo",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |accion:m           {:  RESULT = parser.crearNodo("accion",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |referencia:m       {:  RESULT = parser.crearNodo("referencia",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |path:m             {:  RESULT = parser.crearNodo("path",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |autorepro:m        {:  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  :}
               |error              {:  RESULT = parser.crearNodo("#error","",0,0);  :};  

VALOR      ::=  string_literal:m   {:  RESULT = parser.crearNodo("string_literal",m.getCadena().substring(1, m.getCadena().length()-1),m.getLinea(),m.getColumna());  :}
               |int_literal:m      {:  RESULT = parser.crearNodo("int_literal",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |double_literal:m   {:  RESULT = parser.crearNodo("double_literal",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |bool_literal:m     {:  RESULT = parser.crearNodo("bool_literal",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |event:m            {:  RESULT = parser.crearNodo("event",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |error              {:  RESULT = parser.crearNodo("#error","",0,0);  :};  
 