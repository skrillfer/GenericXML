package Analizadores;


import java.util.LinkedList;
import java_cup.runtime.*;
%%
%class LexParser
%public
%full
%unicode
%line
%column
%char
%ignorecase
%cup

LineTerminator = \r|\n|\r\n|\n\r|\t
WhiteSpace = {LineTerminator} | [ \t\f]|\t
Id = [:jletter:]["�"|"�"|"�"|"�"|"�"|[:jletterdigit:]|"_"|]*

%%
/* SIGNOS */
<YYINITIAL> "{" {return new Symbol(sym.alla, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "}" {return new Symbol(sym.clla, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> ";" {return new Symbol(sym.pyc, new token(yycolumn, yyline, yytext()));}

/* PALABRAS RESERVADAS - COMPONENTES */

<YYINITIAL> "importar"    {return new Symbol(sym.importar, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "ventana"     {return new Symbol(sym.ventana, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "contenedor"  {return new Symbol(sym.contenedor, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "control"     {return new Symbol(sym.control, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "defecto"     {return new Symbol(sym.defecto, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "enviar"      {return new Symbol(sym.enviar, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "listadatos"  {return new Symbol(sym.listadatos, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "dato"        {return new Symbol(sym.dato, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "texto"       {return new Symbol(sym.texto, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "multimedia"  {return new Symbol(sym.multimedia, new token(yycolumn, yyline, yytext()));}


/* PALABRAS RESERVADAS - ATRIBUTOS de COMPONENTES */
<YYINITIAL> "tipo"         {return new Symbol(sym.tipo, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "nombre"       {return new Symbol(sym.tipo, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "id"           {return new Symbol(sym.id, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "alto"         {return new Symbol(sym.alto, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "ancho"        {return new Symbol(sym.ancho, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "fuente"       {return new Symbol(sym.fuente, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "tam"          {return new Symbol(sym.tam, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "color"        {return new Symbol(sym.color, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "x"            {return new Symbol(sym.x, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "y"            {return new Symbol(sym.y, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "negrita"      {return new Symbol(sym.negrita, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "cursiva"      {return new Symbol(sym.cursiva, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "maximo"       {return new Symbol(sym.maximo, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "minimo"       {return new Symbol(sym.minimo, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "accion"       {return new Symbol(sym.accion, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "referencia"   {return new Symbol(sym.referencia, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "musica"       {return new Symbol(sym.musica, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "video"        {return new Symbol(sym.video, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "imagen"       {return new Symbol(sym.imagen, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "path"         {return new Symbol(sym.path, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "auto-reproduccion" {return new Symbol(sym.autorepro, new token(yycolumn, yyline, yytext()));}



<YYINITIAL> "int" {return new Symbol(sym.inT, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "char" {return new Symbol(sym.chaR, new token(yycolumn, yyline, yytext()));}
<YYINITIAL> "bool" {return new Symbol(sym.booL, new token(yycolumn, yyline, yytext()));}

<YYINITIAL> {Id} {return new Symbol(sym.id, new token(yycolumn, yyline, yytext()));}

{LineTerminator} {/* ignorar */}
{WhiteSpace} {/* ignorar */}
. {System.out.println(yyline+","+yycolumn+"=["+yytext()+"],"+yychar); }
