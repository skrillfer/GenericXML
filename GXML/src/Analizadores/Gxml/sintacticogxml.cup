package Analizadores.Gxml; 

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;


action code {:
    //se declaran variables globales etc.
        public int Index=1;
:}

parser code 
{:
    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 

terminal token importarA2,importarF1,ventanaA1,ventanaF1,
               contenedorA1,contenedorA2,contenedorF1,
               tipo,nombre,id,alto,ancho,fuente,tam,color,x,y,negrita,cursiva,maximo,minimo,
               accion,accionini,accionfin,referencia,path,autorepro,ID,alla,clla,pyc,explicit,div,string_literal,
               igual,menq,mayq,textoA1,textoA2,textoF1,controlA1,controlA2,controlF1,datoA1,datoA2,datoF1,
               defectoA1,defectoA2,defectoF1,listadatosA1,listadatosA2,listadatosF1,enviarA1,enviarA2,enviarF1,
               multimediaA1,multimediaA2,multimediaF1,int_literal,double_literal,bool_literal,borde;

non terminal Nodo INICIO,ENCABEZADO,IMPORTS,L_VENTANAS,VENTANAS,VENTANAX,
                  LIST_ATTSTART,LIST_ATTS,
                  CONTENIDOVENTANA,CONTENIDOCUERPO,IM1,ATT,
                  ETIQUETASforma1,ETIQUETASforma2,CONTENIDOListaDatos,CONTENIDOControl,CONTENIDOContenedor, 
                  VALOR,ATRIBUTO ;

start with INICIO;

INICIO ::= ENCABEZADO  VENTANAS;


/*---------------------Lista de Ventanas---------------------------------------*/
VENTANAS    ::= {::}
               |L_VENTANAS;


L_VENTANAS  ::= L_VENTANAS VENTANAX
               |VENTANAX;


VENTANAX    ::= ventanaA1 LIST_ATTSTART explicit CONTENIDOVENTANA ;
                

CONTENIDOVENTANA ::=   CONTENIDOCUERPO menq div ventanaF1
                      |div ventanaF1 {: System.out.println("VENTANA:"); :};

/*---------------------Lista de Contenedores-----------------------------------*/

/*-----------------------------TODAS LAS POSIBLES ETIQUETAS--------------------*/

CONTENIDOCUERPO  ::= CONTENIDOCUERPO ETIQUETASforma2
                   |ETIQUETASforma1;
   
ETIQUETASforma2  ::= textoA1          LIST_ATTSTART explicit textoF1
                    |controlA1        LIST_ATTSTART explicit CONTENIDOControl
                    |datoA1           LIST_ATTSTART explicit datoF1
                    |defectoA1        LIST_ATTSTART explicit defectoF1
                    |listadatosA1     LIST_ATTSTART explicit CONTENIDOListaDatos
                    |enviarA1         LIST_ATTSTART explicit enviarF1
                    |multimediaA1     LIST_ATTSTART explicit multimediaF1
                    |contenedorA1     LIST_ATTSTART explicit CONTENIDOContenedor; 

ETIQUETASforma1  ::= textoA2          LIST_ATTSTART explicit textoF1
                    |controlA2        LIST_ATTSTART explicit CONTENIDOControl
                    |datoA2           LIST_ATTSTART explicit datoF1
                    |defectoA2        LIST_ATTSTART explicit defectoF1
                    |listadatosA2     LIST_ATTSTART explicit CONTENIDOListaDatos
                    |enviarA2         LIST_ATTSTART explicit enviarF1
                    |multimediaA2     LIST_ATTSTART explicit multimediaF1
                    |contenedorA2     LIST_ATTSTART explicit CONTENIDOContenedor; 
 

/*-----------------CONTENIDO DE LISTA DE DATOS --------------------------------*/
CONTENIDOListaDatos ::= listadatosF1
                       |CONTENIDOCUERPO menq listadatosF1;

/*-----------------CONTENIDO DE COMPONENTE CONTROL --------------------------------*/
CONTENIDOControl ::=   controlF1
                       |CONTENIDOCUERPO menq controlF1;

CONTENIDOContenedor ::=   contenedorF1
                       |CONTENIDOCUERPO menq contenedorF1;

/*---------------------Lista de Imports----------------------------------------*/
ENCABEZADO  ::= {::}
               | IMPORTS;

IMPORTS     ::= IMPORTS IM1
               |IM1;

IM1         ::= importarA2 explicit:x div importarF1 {: System.out.println(x.getCadena()); :};




LIST_ATTSTART  ::= {::}
                   |LIST_ATTS;

LIST_ATTS      ::= LIST_ATTS ATT
                  |ATT ;
 
ATT            ::= ATRIBUTO:m   igual VALOR:n
                   {: 
                        RESULT = parser.crearNodo("atributo","",m.linea,m.columna);   
                        RESULT.add(m);
                        RESULT.add(n);
                   :};

ATRIBUTO   ::= id:m                {:  RESULT = parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |tipo:m             {:  RESULT = parser.crearNodo("tipo",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |accionini:m        {:  RESULT = parser.crearNodo("accionini",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |accionfin:m        {:  RESULT = parser.crearNodo("accionfin",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |x:m                {:  RESULT = parser.crearNodo("x",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |y:m                {:  RESULT = parser.crearNodo("y",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |alto:m             {:  RESULT = parser.crearNodo("alto",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |ancho:m            {:  RESULT = parser.crearNodo("ancho",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |borde:m            {:  RESULT = parser.crearNodo("borde",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |nombre:m           {:  RESULT = parser.crearNodo("nombre",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |fuente:m           {:  RESULT = parser.crearNodo("fuente",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |tam:m              {:  RESULT = parser.crearNodo("tam",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |color:m            {:  RESULT = parser.crearNodo("color",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |negrita:m          {:  RESULT = parser.crearNodo("negrita",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |cursiva:m          {:  RESULT = parser.crearNodo("cursiva",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |maximo:m           {:  RESULT = parser.crearNodo("maximo",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |minimo:m           {:  RESULT = parser.crearNodo("minimo",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |accion:m           {:  RESULT = parser.crearNodo("accion",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |referencia:m       {:  RESULT = parser.crearNodo("referencia",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |path:m             {:  RESULT = parser.crearNodo("path",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |autorepro:m        {:  RESULT = parser.crearNodo("autorepro",m.getCadena(),m.getLinea(),m.getColumna());  :};

VALOR      ::=  string_literal:m   {:  RESULT = parser.crearNodo("string_literal",m.getCadena().substring(1, m.getCadena().length()-1),m.getLinea(),m.getColumna());  :}
               |int_literal:m      {:  RESULT = parser.crearNodo("int_literal",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |double_literal:m   {:  RESULT = parser.crearNodo("double_literal",m.getCadena(),m.getLinea(),m.getColumna());  :}
               |bool_literal:m     {:  RESULT = parser.crearNodo("bool_literal",m.getCadena(),m.getLinea(),m.getColumna());  :};
 