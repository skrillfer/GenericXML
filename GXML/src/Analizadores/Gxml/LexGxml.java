/* The following code was generated by JFlex 1.4.3 on 20/03/19 07:05 AM */


package Analizadores.Gxml;

import INTERFAZ.Template;

import java.util.LinkedList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/03/19 07:05 AM from the specification file
 * <tt>src/Analizadores/Gxml/lexicogxml.flex</tt>
 */
public class LexGxml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\0"+
    "\1\11\1\12\1\13\10\0\1\6\1\10\1\14\12\7\1\0\1\20"+
    "\1\22\1\15\1\21\2\0\1\31\1\37\1\35\1\36\1\33\1\42"+
    "\1\47\1\45\1\23\2\4\1\41\1\24\1\34\1\26\1\25\1\4"+
    "\1\27\1\43\1\30\1\44\1\32\1\4\1\40\1\46\1\4\4\0"+
    "\1\4\1\0\1\31\1\37\1\35\1\36\1\33\1\42\1\47\1\45"+
    "\1\23\2\4\1\41\1\24\1\34\1\26\1\25\1\4\1\27\1\43"+
    "\1\30\1\44\1\32\1\4\1\40\1\46\1\4\1\16\1\5\1\17"+
    "\1\0\41\5\2\0\4\4\4\0\1\4\2\0\1\5\7\0\1\4"+
    "\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4\4\0\14\4"+
    "\16\0\5\4\7\0\1\4\1\0\1\4\21\0\160\5\5\4\1\0"+
    "\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0\1\4\1\0"+
    "\24\4\1\0\123\4\1\0\213\4\1\0\5\5\2\0\236\4\11\0"+
    "\46\4\2\0\1\4\7\0\47\4\7\0\1\4\1\0\55\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0\33\4\5\0"+
    "\3\4\15\0\5\5\6\0\1\4\4\0\13\5\5\0\53\4\25\5"+
    "\12\7\4\0\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5"+
    "\2\4\2\5\1\0\4\5\2\4\12\7\3\4\2\0\1\4\17\0"+
    "\1\5\1\4\1\5\36\4\33\5\2\0\131\4\13\5\1\4\16\0"+
    "\12\7\41\4\11\5\2\4\4\0\1\4\5\0\26\4\4\5\1\4"+
    "\11\5\1\4\3\5\1\4\5\5\22\0\31\4\3\5\104\0\1\4"+
    "\1\0\13\4\67\0\33\5\1\0\4\5\66\4\3\5\1\4\22\5"+
    "\1\4\7\5\12\4\2\5\2\0\12\7\1\0\7\4\1\0\7\4"+
    "\1\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5\2\0\2\5"+
    "\2\0\3\5\1\4\10\0\1\5\4\0\2\4\1\0\3\4\2\5"+
    "\2\0\12\7\4\4\7\0\1\4\5\0\3\5\1\0\6\4\4\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0"+
    "\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5\3\0"+
    "\1\5\7\0\4\4\1\0\1\4\7\0\12\7\2\5\3\4\1\5"+
    "\13\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0\3\5"+
    "\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\7\1\0"+
    "\1\4\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\7\5\2\0"+
    "\2\5\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4\2\5"+
    "\2\0\12\7\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0"+
    "\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0"+
    "\2\4\3\0\3\4\3\0\14\4\4\0\5\5\3\0\3\5\1\0"+
    "\4\5\2\0\1\4\6\0\1\5\16\0\12\7\11\0\1\4\7\0"+
    "\3\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\3\0\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5"+
    "\1\0\2\4\6\0\2\4\2\5\2\0\12\7\22\0\2\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0"+
    "\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0"+
    "\1\4\1\0\2\4\2\5\2\0\12\7\1\0\2\4\17\0\2\5"+
    "\1\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4\7\5\1\0"+
    "\3\5\1\0\4\5\1\4\10\0\1\5\10\0\2\4\2\5\2\0"+
    "\12\7\12\0\6\4\2\0\2\5\1\0\22\4\3\0\30\4\1\0"+
    "\11\4\1\0\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0"+
    "\1\5\1\0\10\5\22\0\2\5\15\0\60\4\1\5\2\4\7\5"+
    "\4\0\10\4\10\5\1\0\12\7\47\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0"+
    "\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5"+
    "\2\4\6\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0"+
    "\6\5\2\0\12\7\2\0\4\4\40\0\1\4\27\0\2\5\6\0"+
    "\12\7\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4"+
    "\1\0\44\4\4\0\24\5\1\0\2\5\5\4\13\5\1\0\44\5"+
    "\11\0\1\5\71\0\53\4\24\5\1\4\12\7\6\0\6\4\4\5"+
    "\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5\15\4\14\5"+
    "\1\4\1\5\12\7\4\5\2\0\46\4\1\0\1\4\5\0\1\4"+
    "\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4"+
    "\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4"+
    "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4"+
    "\1\0\4\4\2\0\103\4\2\0\3\5\40\0\20\4\20\0\125\4"+
    "\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\3\0\3\4"+
    "\17\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4"+
    "\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5"+
    "\3\0\1\4\3\0\2\4\1\5\2\0\12\7\41\0\3\5\2\0"+
    "\12\7\6\0\130\4\10\0\51\4\1\5\1\4\5\0\106\4\12\0"+
    "\35\4\3\0\14\5\4\0\14\5\12\0\12\7\36\4\2\0\5\4"+
    "\13\0\54\4\4\0\21\5\7\4\2\5\6\0\12\7\46\0\27\4"+
    "\5\5\4\0\65\4\12\5\1\0\35\5\2\0\1\5\12\7\6\0"+
    "\12\7\15\0\1\4\130\0\5\5\57\4\21\5\7\4\4\0\12\7"+
    "\21\0\11\5\14\0\3\5\36\4\15\5\2\4\12\7\54\4\16\5"+
    "\14\0\44\4\24\5\10\0\12\7\3\0\3\4\12\7\44\4\122\0"+
    "\3\5\1\0\25\5\4\4\1\5\4\4\3\5\2\4\11\0\300\4"+
    "\47\5\25\0\4\5\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4"+
    "\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4"+
    "\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4"+
    "\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4"+
    "\16\0\5\5\32\0\5\5\20\0\2\4\23\0\1\4\13\0\5\5"+
    "\5\0\6\5\1\0\1\4\15\0\1\4\20\0\15\4\3\0\33\4"+
    "\25\0\15\5\4\0\1\5\3\0\14\5\21\0\1\4\4\0\1\4"+
    "\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4"+
    "\4\0\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4"+
    "\6\0\4\4\3\5\2\4\14\0\46\4\1\0\1\4\5\0\1\4"+
    "\2\0\70\4\7\0\1\4\17\0\1\5\27\4\11\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\40\5\57\0\1\4\u01d5\0\3\4\31\0"+
    "\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4\2\0\2\5"+
    "\2\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4\3\0\136\4"+
    "\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4\63\0\u048d\4"+
    "\103\0\56\4\2\0\u010d\4\3\0\20\4\12\7\2\4\24\0\57\4"+
    "\1\5\4\0\12\5\1\0\31\4\7\0\1\5\120\4\2\5\45\0"+
    "\11\4\2\0\147\4\2\0\4\4\1\0\4\4\14\0\13\4\115\0"+
    "\12\4\1\5\3\4\1\5\4\4\1\5\27\4\5\5\20\0\1\4"+
    "\7\0\64\4\14\0\2\5\62\4\21\5\13\0\12\7\6\0\22\5"+
    "\6\4\3\0\1\4\4\0\12\7\34\4\10\5\2\0\27\4\15\5"+
    "\14\0\35\4\3\0\4\5\57\4\16\5\16\0\1\4\12\7\46\0"+
    "\51\4\16\5\11\0\3\4\1\5\10\4\2\5\2\0\12\7\6\0"+
    "\27\4\3\0\1\4\1\5\4\0\60\4\1\5\1\4\3\5\2\4"+
    "\2\5\5\4\2\5\1\4\1\5\1\4\30\0\3\4\2\0\13\4"+
    "\5\5\2\0\3\4\2\5\12\0\6\4\2\0\6\4\2\0\6\4"+
    "\11\0\7\4\1\0\7\4\221\0\43\4\10\5\1\0\2\5\2\0"+
    "\12\7\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0"+
    "\152\4\46\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4\1\0"+
    "\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0"+
    "\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0"+
    "\20\5\20\0\7\5\14\0\2\4\30\0\3\4\31\0\1\4\6\0"+
    "\5\4\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\7\7\0"+
    "\32\4\4\0\1\4\1\0\32\4\13\0\131\4\3\0\6\4\2\0"+
    "\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0"+
    "\3\5\1\0\1\5\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\1\4\1\1\1\5\3\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\14\4\1\15"+
    "\2\4\1\16\1\0\1\1\1\0\1\17\12\0\1\20"+
    "\1\0\1\21\11\0\1\4\1\22\27\4\1\23\24\0"+
    "\7\4\1\24\22\4\1\0\1\23\22\0\4\4\1\25"+
    "\1\4\1\26\3\4\1\27\10\4\1\30\5\4\1\23"+
    "\16\0\1\31\3\0\5\4\1\32\1\33\1\4\1\0"+
    "\6\4\1\34\2\4\1\35\1\36\2\4\5\0\1\37"+
    "\5\0\1\40\5\0\1\41\1\0\1\4\1\42\1\43"+
    "\2\4\1\44\1\0\1\4\1\45\6\4\1\46\1\0"+
    "\1\47\4\0\1\50\4\0\1\51\4\0\5\4\1\0"+
    "\1\4\1\52\1\53\1\4\1\54\1\55\1\4\1\0"+
    "\1\56\6\0\1\57\1\60\1\0\1\61\1\0\5\4"+
    "\1\0\1\62\2\4\1\0\1\63\1\0\1\64\1\0"+
    "\1\65\3\0\1\66\4\4\1\0\2\4\6\0\1\67"+
    "\1\70\2\4\1\0\1\71\1\72\3\0\1\73\1\74"+
    "\1\75\1\4\1\76\1\0\1\77\1\100\1\101\1\4"+
    "\1\0\1\102\4\0\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\50\0\240\0\310\0\310"+
    "\0\360\0\u0118\0\u0140\0\u0168\0\50\0\u0190\0\50\0\50"+
    "\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0"+
    "\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398\0\u03c0\0\240\0\u03e8"+
    "\0\u0410\0\240\0\360\0\360\0\u0118\0\50\0\u0438\0\u0460"+
    "\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u0190"+
    "\0\50\0\u01b8\0\50\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640"+
    "\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\240\0\u0730\0\u0758"+
    "\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8"+
    "\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0438\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30"+
    "\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70"+
    "\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0"+
    "\0\u0ed8\0\240\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8"+
    "\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108"+
    "\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u0ac8\0\u11f8\0\u1220"+
    "\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360"+
    "\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0"+
    "\0\u14c8\0\u14f0\0\u1518\0\u1540\0\240\0\u1568\0\240\0\u1590"+
    "\0\u15b8\0\u15e0\0\240\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8"+
    "\0\u16d0\0\u16f8\0\u1720\0\240\0\u1748\0\u1770\0\u1798\0\u17c0"+
    "\0\u17e8\0\50\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8"+
    "\0\u1900\0\u1928\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18"+
    "\0\50\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30"+
    "\0\u1b58\0\240\0\240\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20"+
    "\0\u1c48\0\u1c70\0\u1c98\0\240\0\u1cc0\0\u1ce8\0\240\0\240"+
    "\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\50"+
    "\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\50\0\u1ef0\0\u1f18"+
    "\0\u1f40\0\u1f68\0\u1f90\0\50\0\u1fb8\0\u1fe0\0\240\0\240"+
    "\0\u2008\0\u2030\0\u2058\0\u2080\0\u20a8\0\240\0\u20d0\0\u20f8"+
    "\0\u2120\0\u2148\0\u2170\0\u2198\0\240\0\u21c0\0\50\0\u21e8"+
    "\0\u2210\0\u2238\0\u2260\0\50\0\u2288\0\u22b0\0\u22d8\0\u2300"+
    "\0\50\0\u2328\0\u2350\0\u2378\0\u23a0\0\u23c8\0\u23f0\0\u2418"+
    "\0\u2440\0\u2468\0\u2490\0\u24b8\0\240\0\240\0\u24e0\0\240"+
    "\0\240\0\u2508\0\u2530\0\50\0\u2558\0\u2580\0\u25a8\0\u25d0"+
    "\0\u25f8\0\u2620\0\50\0\50\0\u2648\0\50\0\u2670\0\u2698"+
    "\0\u26c0\0\u26e8\0\u2710\0\u2738\0\u2760\0\50\0\u2788\0\u27b0"+
    "\0\u27d8\0\50\0\u2800\0\50\0\u2828\0\50\0\u2850\0\u2878"+
    "\0\u28a0\0\50\0\u28c8\0\u28f0\0\u2918\0\u2940\0\u2968\0\u2990"+
    "\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58\0\u2a80\0\u2aa8\0\240"+
    "\0\240\0\u2ad0\0\u2af8\0\u2b20\0\240\0\240\0\u2b48\0\u2b70"+
    "\0\u2b98\0\50\0\50\0\50\0\u2bc0\0\240\0\u2be8\0\50"+
    "\0\50\0\50\0\u2c10\0\u2c38\0\240\0\u2c60\0\u2c88\0\u2cb0"+
    "\0\u2cd8\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\6\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\6\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\3\6\1\42\1\6\52\0\1\5"+
    "\46\0\1\5\52\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\25\6\7\0\1\10\1\43\46\0\1\44\40\0"+
    "\11\45\1\46\36\45\12\0\1\47\1\50\60\0\1\51"+
    "\3\0\1\52\2\0\1\53\1\0\1\54\1\55\1\56"+
    "\1\0\1\57\6\0\17\60\1\61\30\60\22\62\1\63"+
    "\25\62\23\0\1\64\1\65\3\0\1\66\1\0\1\67"+
    "\1\70\1\0\1\71\1\72\1\73\1\0\1\74\12\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\1\6\1\75"+
    "\11\6\1\76\11\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\1\77\5\6\1\100\12\6\1\101\3\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\6\6"+
    "\1\102\16\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\10\6\1\103\14\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\1\104\5\6\1\105\1\6\1\106"+
    "\14\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\11\6\1\107\1\110\3\6\1\111\2\6\1\112\3\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\10\6"+
    "\1\113\14\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\11\6\1\114\13\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\3\6\1\115\4\6\1\116\14\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\3\6"+
    "\1\117\15\6\1\120\3\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\6\6\1\121\1\6\1\122\14\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\3\6"+
    "\1\123\21\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\1\124\24\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\21\6\1\125\3\6\1\126\2\0\45\126"+
    "\13\127\1\130\34\127\44\0\1\131\36\0\1\132\50\0"+
    "\1\133\41\0\1\134\52\0\1\135\1\0\1\136\42\0"+
    "\1\137\44\0\1\140\50\0\1\141\67\0\1\142\36\0"+
    "\1\143\47\0\1\144\50\0\1\145\41\0\1\146\52\0"+
    "\1\147\1\0\1\150\42\0\1\151\44\0\1\152\30\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\2\6\1\153"+
    "\22\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\11\6\1\154\13\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\15\6\1\155\7\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\16\6\1\156\6\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\5\6\1\157"+
    "\17\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\17\6\1\160\5\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\2\6\1\161\22\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\1\6\1\162\23\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\15\6\1\163"+
    "\7\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\12\6\1\164\12\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\12\6\1\165\12\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\5\6\1\166\17\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\5\6\1\167"+
    "\17\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\11\6\1\170\13\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\7\6\1\171\15\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\1\6\1\172\23\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\24\6\1\173"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\11\6"+
    "\1\174\4\6\1\175\6\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\4\6\1\176\20\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\5\6\1\177\17\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\17\6"+
    "\1\200\5\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\4\6\1\201\1\202\17\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\20\6\1\203\4\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\10\6\1\204"+
    "\14\6\13\127\1\205\46\127\1\206\1\130\34\127\41\0"+
    "\1\207\46\0\1\210\41\0\1\211\51\0\1\212\43\0"+
    "\1\213\61\0\1\214\35\0\1\215\62\0\1\216\31\0"+
    "\1\217\63\0\1\220\46\0\1\221\43\0\1\222\45\0"+
    "\1\223\51\0\1\224\43\0\1\225\61\0\1\226\35\0"+
    "\1\227\62\0\1\230\10\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\3\6\1\231\21\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\1\232\24\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\1\233\24\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\5\6\1\234"+
    "\17\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\22\6\1\235\2\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\10\6\1\236\14\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\3\6\1\237\21\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\5\6\1\240"+
    "\17\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\22\6\1\241\2\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\1\242\24\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\3\6\1\243\21\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\3\6\1\244\21\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\5\6"+
    "\1\245\17\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\1\246\24\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\14\6\1\247\10\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\4\6\1\250\20\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\5\6\1\251"+
    "\17\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\3\6\1\252\21\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\20\6\1\253\4\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\3\6\1\254\21\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\10\6\1\255"+
    "\14\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\13\6\1\256\11\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\3\6\1\257\21\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\5\6\1\260\17\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\11\6\1\261"+
    "\13\6\12\127\1\262\1\205\34\127\30\0\1\263\47\0"+
    "\1\264\42\0\1\265\54\0\1\266\45\0\1\267\54\0"+
    "\1\270\42\0\1\271\51\0\1\272\45\0\1\273\51\0"+
    "\1\274\47\0\1\275\47\0\1\276\42\0\1\277\54\0"+
    "\1\300\45\0\1\301\54\0\1\302\42\0\1\303\51\0"+
    "\1\304\23\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\4\6\1\305\20\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\1\6\1\306\23\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\1\6\1\307\23\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\1\310\24\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\4\6"+
    "\1\311\20\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\3\6\1\312\21\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\3\6\1\313\21\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\3\6\1\314\21\6"+
    "\4\0\2\6\1\315\1\6\3\0\1\6\7\0\25\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\6\6"+
    "\1\316\16\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\6\6\1\317\16\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\4\6\1\320\20\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\1\321\24\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\4\6\1\322"+
    "\3\6\1\323\14\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\4\6\1\324\20\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\1\325\24\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\12\6\1\326\12\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\10\6"+
    "\1\327\14\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\11\6\1\330\13\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\6\6\1\331\16\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\5\6\1\332\17\6"+
    "\23\0\1\333\52\0\1\334\52\0\1\335\45\0\1\336"+
    "\3\0\1\337\35\0\1\340\63\0\1\341\46\0\1\342"+
    "\44\0\1\343\45\0\1\344\43\0\1\345\52\0\1\346"+
    "\52\0\1\347\47\0\1\350\45\0\1\351\3\0\1\352"+
    "\51\0\1\353\46\0\1\354\44\0\1\355\22\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\5\6\1\356\17\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\3\6"+
    "\1\357\21\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\3\6\1\360\21\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\1\6\1\361\23\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\10\6\1\362\14\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\11\6"+
    "\1\363\13\6\27\0\1\364\24\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\11\6\1\365\13\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\4\6\1\366\20\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\10\6"+
    "\1\237\14\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\5\6\1\367\17\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\3\6\1\370\21\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\11\6\1\371\13\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\7\6"+
    "\1\372\15\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\5\6\1\373\17\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\13\6\1\374\11\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\10\6\1\375\14\6"+
    "\24\0\1\376\44\0\1\377\55\0\1\u0100\46\0\1\u0101"+
    "\55\0\1\u0102\43\0\1\u0103\40\0\1\u0104\64\0\1\u0105"+
    "\41\0\1\u0106\43\0\1\u0107\57\0\1\u0108\42\0\1\u0109"+
    "\46\0\1\u010a\55\0\1\u010b\43\0\1\u010c\55\0\1\u010d"+
    "\15\0\2\6\1\0\1\6\3\0\1\6\7\0\6\6"+
    "\1\u010e\16\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\10\6\1\u010f\14\6\4\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\11\6\1\u0110\13\6\4\0\2\6"+
    "\1\0\1\6\3\0\1\6\7\0\1\u0111\16\6\1\u0112"+
    "\5\6\33\0\1\u0113\20\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\6\6\1\u0114\16\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\6\6\1\u0115\16\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\16\6\1\u0116"+
    "\6\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\10\6\1\u0117\14\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\6\6\1\u0118\16\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\3\6\1\u0119\21\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\6\6\1\u011a"+
    "\16\6\33\0\1\u011b\35\0\1\u011c\67\0\1\u011d\41\0"+
    "\1\u011e\42\0\1\u011f\52\0\1\u0120\47\0\1\u0121\51\0"+
    "\1\u0122\45\0\1\u0123\57\0\1\u0124\41\0\1\u0125\42\0"+
    "\1\u0126\52\0\1\u0127\22\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\4\6\1\u0128\20\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\13\6\1\u0129\11\6\4\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\12\6\1\u012a"+
    "\12\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\11\6\1\u012b\13\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\1\u012c\24\6\25\0\1\u012d\26\0\2\6"+
    "\1\0\1\6\3\0\1\6\5\0\1\u012e\1\0\25\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\13\6"+
    "\1\u012f\11\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\5\6\1\u0130\17\6\36\0\1\u0131\32\0\1\u0132"+
    "\64\0\1\u0133\32\0\1\u0134\56\0\1\u0135\46\0\1\u0136"+
    "\56\0\1\u0137\47\0\1\u0138\41\0\1\u0139\23\0\2\6"+
    "\1\0\1\6\3\0\1\6\5\0\1\u013a\1\0\25\6"+
    "\4\0\2\6\1\0\1\6\3\0\1\6\7\0\1\u013b"+
    "\24\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\1\u013c\24\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\1\u013d\24\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\11\6\1\u013e\13\6\27\0\1\u013f\24\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\3\6\1\u0140"+
    "\21\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\3\6\1\u0141\21\6\23\0\1\u0142\52\0\1\u0143\47\0"+
    "\1\u0144\44\0\1\u0145\52\0\1\u0146\47\0\1\u0147\25\0"+
    "\2\6\1\0\1\6\3\0\1\6\7\0\6\6\1\u0148"+
    "\16\6\4\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\6\6\1\u0149\16\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\12\6\1\u014a\12\6\4\0\2\6\1\0"+
    "\1\6\3\0\1\6\7\0\6\6\1\u014b\16\6\26\0"+
    "\1\u014c\25\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\4\6\1\u014d\20\6\4\0\2\6\1\0\1\6\3\0"+
    "\1\6\7\0\20\6\1\u014e\4\6\31\0\1\u014f\45\0"+
    "\1\u0150\63\0\1\u0151\35\0\1\u0152\45\0\1\u0153\63\0"+
    "\1\u0154\10\0\2\6\1\0\1\6\3\0\1\6\7\0"+
    "\1\u0155\24\6\4\0\2\6\1\0\1\6\3\0\1\6"+
    "\7\0\16\6\1\u0156\6\6\36\0\1\u0157\32\0\1\u0158"+
    "\47\0\1\u0159\47\0\1\u015a\32\0\2\6\1\0\1\6"+
    "\3\0\1\6\7\0\6\6\1\u015b\16\6\44\0\1\u015c"+
    "\7\0\2\6\1\0\1\6\3\0\1\6\7\0\16\6"+
    "\1\u015d\6\6\35\0\1\u015e\47\0\1\u015f\35\0\1\u0160"+
    "\52\0\1\u0161\55\0\1\u0162\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\7\1\1\11\1\1\2\11"+
    "\22\1\1\0\1\1\1\0\1\11\12\0\1\11\1\0"+
    "\1\11\11\0\32\1\24\0\32\1\1\0\1\1\22\0"+
    "\31\1\1\11\16\0\1\11\3\0\10\1\1\0\15\1"+
    "\5\0\1\11\5\0\1\11\5\0\1\11\1\0\6\1"+
    "\1\0\11\1\1\0\1\11\4\0\1\11\4\0\1\11"+
    "\4\0\5\1\1\0\7\1\1\0\1\11\6\0\2\11"+
    "\1\0\1\11\1\0\5\1\1\0\1\11\2\1\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\3\0\1\11\4\1"+
    "\1\0\2\1\6\0\4\1\1\0\2\1\3\0\3\11"+
    "\2\1\1\0\3\11\1\1\1\0\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexGxml(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexGxml(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2288) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return new Symbol(sym.int_literal, new token(yycolumn, yyline, yytext()));
          }
        case 68: break;
        case 56: 
          { return new Symbol(sym.referencia, new token(yycolumn, yyline, yytext()));
          }
        case 69: break;
        case 24: 
          { return new Symbol(sym.datoA2, new token(yycolumn, yyline, yytext()));
          }
        case 70: break;
        case 1: 
          { return new Symbol(sym.double_literal, new token(yycolumn, yyline, yytext()));
          }
        case 71: break;
        case 59: 
          { return new Symbol(sym.multimediaA1, new token(yycolumn, yyline, yytext()));
          }
        case 72: break;
        case 48: 
          { return new Symbol(sym.controlA1, new token(yycolumn, yyline, yytext()));
          }
        case 73: break;
        case 32: 
          { return new Symbol(sym.textoA1, new token(yycolumn, yyline, yytext()));
          }
        case 74: break;
        case 7: 
          { return new Symbol(sym.igual, new token(yycolumn, yyline, yytext()));
          }
        case 75: break;
        case 2: 
          { Template.reporteError_CJS.agregar("Lexico", yyline, yycolumn, "Lexico : No se esperaba el token " +yytext()+" - "+yychar);
          }
        case 76: break;
        case 22: 
          { return new Symbol(sym.tipo, new token(yycolumn, yyline, yytext()));
          }
        case 77: break;
        case 17: 
          { return new Symbol(sym.explicit, new token(yycolumn, yyline, yytext()));
          }
        case 78: break;
        case 25: 
          { return new Symbol(sym.datoA1, new token(yycolumn, yyline, yytext()));
          }
        case 79: break;
        case 64: 
          { return new Symbol(sym.contenedorF1, new token(yycolumn, yyline, yytext()));
          }
        case 80: break;
        case 52: 
          { return new Symbol(sym.defectoF1, new token(yycolumn, yyline, yytext()));
          }
        case 81: break;
        case 23: 
          { return new Symbol(sym.alto, new token(yycolumn, yyline, yytext()));
          }
        case 82: break;
        case 37: 
          { return new Symbol(sym.enviarA2, new token(yycolumn, yyline, yytext()));
          }
        case 83: break;
        case 40: 
          { return new Symbol(sym.botonF1, new token(yycolumn, yyline, yytext()));
          }
        case 84: break;
        case 15: 
          { return new Symbol(sym.string_literal, new token(yycolumn, yyline, yytext()));
          }
        case 85: break;
        case 3: 
          { /* ignorar */
          }
        case 86: break;
        case 4: 
          { return new Symbol(sym.ID, new token(yycolumn, yyline, yytext()));
          }
        case 87: break;
        case 9: 
          { return new Symbol(sym.clla, new token(yycolumn, yyline, yytext()));
          }
        case 88: break;
        case 67: 
          { return new Symbol(sym.autorepro, new token(yycolumn, yyline, yytext()));
          }
        case 89: break;
        case 12: 
          { return new Symbol(sym.menq, new token(yycolumn, yyline, yytext()));
          }
        case 90: break;
        case 54: 
          { return new Symbol(sym.importarF1, new token(yycolumn, yyline, yytext()));
          }
        case 91: break;
        case 44: 
          { return new Symbol(sym.cursiva, new token(yycolumn, yyline, yytext()));
          }
        case 92: break;
        case 38: 
          { return new Symbol(sym.fuente, new token(yycolumn, yyline, yytext()));
          }
        case 93: break;
        case 35: 
          { return new Symbol(sym.maximo, new token(yycolumn, yyline, yytext()));
          }
        case 94: break;
        case 50: 
          { return new Symbol(sym.ventanaF1, new token(yycolumn, yyline, yytext()));
          }
        case 95: break;
        case 36: 
          { return new Symbol(sym.accion, new token(yycolumn, yyline, yytext()));
          }
        case 96: break;
        case 41: 
          { return new Symbol(sym.enviarA1, new token(yycolumn, yyline, yytext()));
          }
        case 97: break;
        case 66: 
          { return new Symbol(sym.accionini, new token(yycolumn, yyline, yytext()));
          }
        case 98: break;
        case 57: 
          { return new Symbol(sym.contenedorA2, new token(yycolumn, yyline, yytext()));
          }
        case 99: break;
        case 45: 
          { return new Symbol(sym.defectoA2, new token(yycolumn, yyline, yytext()));
          }
        case 100: break;
        case 16: 
          { return new Symbol(sym.event, new token(yycolumn, yyline, yytext()));
          }
        case 101: break;
        case 10: 
          { return new Symbol(sym.pyc, new token(yycolumn, yyline, yytext()));
          }
        case 102: break;
        case 65: 
          { return new Symbol(sym.listadatosF1, new token(yycolumn, yyline, yytext()));
          }
        case 103: break;
        case 30: 
          { return new Symbol(sym.botonA2, new token(yycolumn, yyline, yytext()));
          }
        case 104: break;
        case 14: 
          { return new Symbol(sym.y, new token(yycolumn, yyline, yytext()));
          }
        case 105: break;
        case 34: 
          { return new Symbol(sym.minimo, new token(yycolumn, yyline, yytext()));
          }
        case 106: break;
        case 6: 
          { return new Symbol(sym.div, new token(yycolumn, yyline, yytext()));
          }
        case 107: break;
        case 53: 
          { return new Symbol(sym.importarA2, new token(yycolumn, yyline, yytext()));
          }
        case 108: break;
        case 8: 
          { return new Symbol(sym.alla, new token(yycolumn, yyline, yytext()));
          }
        case 109: break;
        case 63: 
          { return new Symbol(sym.multimediaF1, new token(yycolumn, yyline, yytext()));
          }
        case 110: break;
        case 51: 
          { return new Symbol(sym.controlF1, new token(yycolumn, yyline, yytext()));
          }
        case 111: break;
        case 39: 
          { return new Symbol(sym.textoF1, new token(yycolumn, yyline, yytext()));
          }
        case 112: break;
        case 62: 
          { return new Symbol(sym.accionfin, new token(yycolumn, yyline, yytext()));
          }
        case 113: break;
        case 60: 
          { return new Symbol(sym.contenedorA1, new token(yycolumn, yyline, yytext()));
          }
        case 114: break;
        case 49: 
          { return new Symbol(sym.defectoA1, new token(yycolumn, yyline, yytext()));
          }
        case 115: break;
        case 20: 
          { return new Symbol(sym.tam, new token(yycolumn, yyline, yytext()));
          }
        case 116: break;
        case 33: 
          { return new Symbol(sym.botonA1, new token(yycolumn, yyline, yytext()));
          }
        case 117: break;
        case 31: 
          { return new Symbol(sym.datoF1, new token(yycolumn, yyline, yytext()));
          }
        case 118: break;
        case 13: 
          { return new Symbol(sym.x, new token(yycolumn, yyline, yytext()));
          }
        case 119: break;
        case 11: 
          { return new Symbol(sym.mayq, new token(yycolumn, yyline, yytext()));
          }
        case 120: break;
        case 58: 
          { return new Symbol(sym.listadatosA2, new token(yycolumn, yyline, yytext()));
          }
        case 121: break;
        case 47: 
          { return new Symbol(sym.ventanaA1, new token(yycolumn, yyline, yytext()));
          }
        case 122: break;
        case 21: 
          { return new Symbol(sym.path, new token(yycolumn, yyline, yytext()));
          }
        case 123: break;
        case 27: 
          { return new Symbol(sym.ancho, new token(yycolumn, yyline, yytext()));
          }
        case 124: break;
        case 42: 
          { return new Symbol(sym.negrita, new token(yycolumn, yyline, yytext()));
          }
        case 125: break;
        case 28: 
          { return new Symbol(sym.color, new token(yycolumn, yyline, yytext()));
          }
        case 126: break;
        case 55: 
          { return new Symbol(sym.multimediaA2, new token(yycolumn, yyline, yytext()));
          }
        case 127: break;
        case 43: 
          { return new Symbol(sym.controlA2, new token(yycolumn, yyline, yytext()));
          }
        case 128: break;
        case 26: 
          { return new Symbol(sym.textoA2, new token(yycolumn, yyline, yytext()));
          }
        case 129: break;
        case 46: 
          { return new Symbol(sym.enviarF1, new token(yycolumn, yyline, yytext()));
          }
        case 130: break;
        case 29: 
          { return new Symbol(sym.borde, new token(yycolumn, yyline, yytext()));
          }
        case 131: break;
        case 18: 
          { return new Symbol(sym.id, new token(yycolumn, yyline, yytext()));
          }
        case 132: break;
        case 61: 
          { return new Symbol(sym.listadatosA1, new token(yycolumn, yyline, yytext()));
          }
        case 133: break;
        case 19: 
          { 
          }
        case 134: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
