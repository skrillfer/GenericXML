/* The following code was generated by JFlex 1.4.3 on 15/02/19 08:34 PM */


package Analizadores.Gxml;


import java.util.LinkedList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15/02/19 08:34 PM from the specification file
 * <tt>src/Analizadores/Gxml/lexicogxml.flex</tt>
 */
public class LexGxml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\0"+
    "\1\6\1\0\1\4\3\0\2\7\3\0\1\44\1\0\1\10\12\5"+
    "\1\0\1\14\1\16\1\11\1\15\2\0\1\25\1\40\1\31\1\32"+
    "\1\27\1\35\1\43\1\41\1\17\2\4\1\34\1\20\1\30\1\22"+
    "\1\21\1\4\1\23\1\36\1\24\1\37\1\26\1\4\1\33\1\42"+
    "\1\4\4\0\1\4\1\0\1\25\1\40\1\31\1\32\1\27\1\35"+
    "\1\43\1\41\1\17\2\4\1\34\1\20\1\30\1\22\1\21\1\4"+
    "\1\23\1\36\1\24\1\37\1\26\1\4\1\33\1\42\1\4\1\12"+
    "\1\5\1\13\1\0\41\5\2\0\4\4\4\0\1\4\2\0\1\5"+
    "\7\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4"+
    "\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\21\0\160\5"+
    "\5\4\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0"+
    "\1\4\1\0\24\4\1\0\123\4\1\0\213\4\1\0\5\5\2\0"+
    "\236\4\11\0\46\4\2\0\1\4\7\0\47\4\7\0\1\4\1\0"+
    "\55\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0"+
    "\33\4\5\0\3\4\15\0\5\5\6\0\1\4\4\0\13\5\5\0"+
    "\53\4\37\5\4\0\2\4\1\5\143\4\1\0\1\4\10\5\1\0"+
    "\6\5\2\4\2\5\1\0\4\5\2\4\12\5\3\4\2\0\1\4"+
    "\17\0\1\5\1\4\1\5\36\4\33\5\2\0\131\4\13\5\1\4"+
    "\16\0\12\5\41\4\11\5\2\4\4\0\1\4\5\0\26\4\4\5"+
    "\1\4\11\5\1\4\3\5\1\4\5\5\22\0\31\4\3\5\104\0"+
    "\1\4\1\0\13\4\67\0\33\5\1\0\4\5\66\4\3\5\1\4"+
    "\22\5\1\4\7\5\12\4\2\5\2\0\12\5\1\0\7\4\1\0"+
    "\7\4\1\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5\2\0"+
    "\2\5\2\0\3\5\1\4\10\0\1\5\4\0\2\4\1\0\3\4"+
    "\2\5\2\0\12\5\4\4\7\0\1\4\5\0\3\5\1\0\6\4"+
    "\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4"+
    "\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5"+
    "\3\0\1\5\7\0\4\4\1\0\1\4\7\0\14\5\3\4\1\5"+
    "\13\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0\3\5"+
    "\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5\1\0"+
    "\1\4\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\7\5\2\0"+
    "\2\5\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4\2\5"+
    "\2\0\12\5\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0"+
    "\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0"+
    "\2\4\3\0\3\4\3\0\14\4\4\0\5\5\3\0\3\5\1\0"+
    "\4\5\2\0\1\4\6\0\1\5\16\0\12\5\11\0\1\4\7\0"+
    "\3\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\3\0\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5"+
    "\1\0\2\4\6\0\2\4\2\5\2\0\12\5\22\0\2\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0"+
    "\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0"+
    "\1\4\1\0\2\4\2\5\2\0\12\5\1\0\2\4\17\0\2\5"+
    "\1\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4\7\5\1\0"+
    "\3\5\1\0\4\5\1\4\10\0\1\5\10\0\2\4\2\5\2\0"+
    "\12\5\12\0\6\4\2\0\2\5\1\0\22\4\3\0\30\4\1\0"+
    "\11\4\1\0\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0"+
    "\1\5\1\0\10\5\22\0\2\5\15\0\60\4\1\5\2\4\7\5"+
    "\4\0\10\4\10\5\1\0\12\5\47\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0"+
    "\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5"+
    "\2\4\6\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0"+
    "\6\5\2\0\12\5\2\0\4\4\40\0\1\4\27\0\2\5\6\0"+
    "\12\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4"+
    "\1\0\44\4\4\0\24\5\1\0\2\5\5\4\13\5\1\0\44\5"+
    "\11\0\1\5\71\0\53\4\24\5\1\4\12\5\6\0\6\4\4\5"+
    "\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5\15\4\14\5"+
    "\1\4\17\5\2\0\46\4\1\0\1\4\5\0\1\4\2\0\53\4"+
    "\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4"+
    "\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4"+
    "\2\0\103\4\2\0\3\5\40\0\20\4\20\0\125\4\14\0\u026c\4"+
    "\2\0\21\4\1\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4"+
    "\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4\2\5\14\0"+
    "\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5\3\0\1\4"+
    "\3\0\2\4\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0"+
    "\130\4\10\0\51\4\1\5\1\4\5\0\106\4\12\0\35\4\3\0"+
    "\14\5\4\0\14\5\12\0\12\5\36\4\2\0\5\4\13\0\54\4"+
    "\4\0\21\5\7\4\2\5\6\0\12\5\46\0\27\4\5\5\4\0"+
    "\65\4\12\5\1\0\35\5\2\0\13\5\6\0\12\5\15\0\1\4"+
    "\130\0\5\5\57\4\21\5\7\4\4\0\12\5\21\0\11\5\14\0"+
    "\3\5\36\4\15\5\2\4\12\5\54\4\16\5\14\0\44\4\24\5"+
    "\10\0\12\5\3\0\3\4\12\5\44\4\122\0\3\5\1\0\25\5"+
    "\4\4\1\5\4\4\3\5\2\4\11\0\300\4\47\5\25\0\4\5"+
    "\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\16\0\5\5\32\0"+
    "\5\5\20\0\2\4\23\0\1\4\13\0\5\5\5\0\6\5\1\0"+
    "\1\4\15\0\1\4\20\0\15\4\3\0\33\4\25\0\15\5\4\0"+
    "\1\5\3\0\14\5\21\0\1\4\4\0\1\4\2\0\12\4\1\0"+
    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\21\0"+
    "\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\5"+
    "\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0\70\4\7\0"+
    "\1\4\17\0\1\5\27\4\11\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\40\5\57\0\1\4\u01d5\0\3\4\31\0\11\4\6\5\1\0"+
    "\5\4\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0"+
    "\132\4\1\0\4\4\5\0\51\4\3\0\136\4\21\0\33\4\65\0"+
    "\20\4\u0200\0\u19b6\4\112\0\u51cd\4\63\0\u048d\4\103\0\56\4\2\0"+
    "\u010d\4\3\0\20\4\12\5\2\4\24\0\57\4\1\5\4\0\12\5"+
    "\1\0\31\4\7\0\1\5\120\4\2\5\45\0\11\4\2\0\147\4"+
    "\2\0\4\4\1\0\4\4\14\0\13\4\115\0\12\4\1\5\3\4"+
    "\1\5\4\4\1\5\27\4\5\5\20\0\1\4\7\0\64\4\14\0"+
    "\2\5\62\4\21\5\13\0\12\5\6\0\22\5\6\4\3\0\1\4"+
    "\4\0\12\5\34\4\10\5\2\0\27\4\15\5\14\0\35\4\3\0"+
    "\4\5\57\4\16\5\16\0\1\4\12\5\46\0\51\4\16\5\11\0"+
    "\3\4\1\5\10\4\2\5\2\0\12\5\6\0\27\4\3\0\1\4"+
    "\1\5\4\0\60\4\1\5\1\4\3\5\2\4\2\5\5\4\2\5"+
    "\1\4\1\5\1\4\30\0\3\4\2\0\13\4\5\5\2\0\3\4"+
    "\2\5\12\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0"+
    "\7\4\221\0\43\4\10\5\1\0\2\5\2\0\12\5\6\0\u2ba4\4"+
    "\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4"+
    "\14\0\5\4\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4"+
    "\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\5\20\0\7\5"+
    "\14\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4"+
    "\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\4\4\0\1\4"+
    "\1\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4"+
    "\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\5\1\0\1\5"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\13\3\1\13\2\3\1\14"+
    "\1\0\1\15\7\0\1\16\10\0\1\3\1\17\27\3"+
    "\20\0\11\3\1\20\21\3\20\0\6\3\1\21\1\3"+
    "\1\22\3\3\1\23\11\3\1\24\3\3\15\0\1\25"+
    "\2\0\7\3\1\26\1\27\1\3\1\0\1\30\6\3"+
    "\1\31\4\3\5\0\1\32\4\0\1\33\6\0\1\3"+
    "\1\34\1\35\1\36\1\3\1\37\1\3\1\40\1\0"+
    "\1\3\1\41\6\3\1\42\1\0\1\43\10\0\1\44"+
    "\4\0\3\3\1\0\1\3\1\45\1\46\1\3\1\47"+
    "\1\50\1\3\1\0\1\51\6\0\1\52\1\53\1\0"+
    "\1\54\1\0\3\3\1\0\1\55\2\3\1\0\1\56"+
    "\1\0\1\57\1\0\1\60\3\0\1\61\2\3\1\0"+
    "\2\3\6\0\1\62\1\63\1\0\1\64\1\65\3\0"+
    "\1\66\1\67\1\70\1\0\1\71\1\72\1\73\5\0"+
    "\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\45\0\224\0\271\0\336"+
    "\0\45\0\45\0\45\0\45\0\u0103\0\u0128\0\u014d\0\u0172"+
    "\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a"+
    "\0\u02bf\0\224\0\u02e4\0\u0309\0\224\0\271\0\45\0\u032e"+
    "\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u0103\0\45\0\u040c"+
    "\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534"+
    "\0\224\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637"+
    "\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a\0\u075f"+
    "\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887"+
    "\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af"+
    "\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7"+
    "\0\u0afc\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff"+
    "\0\u0c24\0\224\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02"+
    "\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a"+
    "\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52"+
    "\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a"+
    "\0\u109f\0\u10c4\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2"+
    "\0\u11c7\0\224\0\u11ec\0\224\0\u1211\0\u1236\0\u125b\0\224"+
    "\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383"+
    "\0\u13a8\0\224\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486"+
    "\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae"+
    "\0\u15d3\0\u15f8\0\45\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1"+
    "\0\u16d6\0\u16fb\0\u1720\0\u1745\0\224\0\224\0\u176a\0\u178f"+
    "\0\224\0\u17b4\0\u17d9\0\u17fe\0\u1823\0\u1848\0\u186d\0\224"+
    "\0\u1892\0\u18b7\0\u18dc\0\u1901\0\u1926\0\u194b\0\u1970\0\u1995"+
    "\0\u19ba\0\45\0\u19df\0\u1a04\0\u1a29\0\u1a4e\0\45\0\u1a73"+
    "\0\u1a98\0\u1abd\0\u1ae2\0\u1b07\0\u1b2c\0\u1b51\0\224\0\224"+
    "\0\224\0\u1b76\0\224\0\u1b9b\0\224\0\u1bc0\0\u1be5\0\224"+
    "\0\u1c0a\0\u1c2f\0\u1c54\0\u1c79\0\u1c9e\0\u1cc3\0\224\0\u1ce8"+
    "\0\45\0\u1d0d\0\u1d32\0\u1d57\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb"+
    "\0\u1e10\0\45\0\u1e35\0\u1e5a\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee"+
    "\0\u1f13\0\u1f38\0\u1f5d\0\224\0\224\0\u1f82\0\224\0\224"+
    "\0\u1fa7\0\u1fcc\0\45\0\u1ff1\0\u2016\0\u203b\0\u2060\0\u2085"+
    "\0\u20aa\0\45\0\45\0\u20cf\0\45\0\u20f4\0\u2119\0\u213e"+
    "\0\u2163\0\u2188\0\45\0\u21ad\0\u21d2\0\u21f7\0\45\0\u221c"+
    "\0\45\0\u2241\0\45\0\u2266\0\u228b\0\u22b0\0\45\0\u22d5"+
    "\0\u22fa\0\u231f\0\u2344\0\u2369\0\u238e\0\u23b3\0\u23d8\0\u23fd"+
    "\0\u2422\0\u2447\0\224\0\224\0\u246c\0\224\0\224\0\u2491"+
    "\0\u24b6\0\u24db\0\45\0\45\0\45\0\u2500\0\45\0\45"+
    "\0\45\0\u2525\0\u254a\0\u256f\0\u2594\0\u25b9\0\45";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\2"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\6\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\4\6\1\35"+
    "\1\6\1\2\47\0\1\5\43\0\1\5\47\0\2\6"+
    "\11\0\25\6\1\0\6\36\1\37\1\0\35\36\20\0"+
    "\1\40\3\0\1\41\2\0\1\42\1\0\1\43\1\44"+
    "\1\0\1\45\10\0\16\46\1\47\26\46\17\0\1\50"+
    "\1\51\3\0\1\52\1\0\1\53\1\54\1\0\1\55"+
    "\1\56\1\0\1\57\14\0\2\6\11\0\1\6\1\60"+
    "\11\6\1\61\11\6\5\0\2\6\11\0\1\62\5\6"+
    "\1\63\11\6\1\64\4\6\5\0\2\6\11\0\6\6"+
    "\1\65\16\6\5\0\2\6\11\0\10\6\1\66\14\6"+
    "\5\0\2\6\11\0\1\67\5\6\1\70\1\6\1\71"+
    "\14\6\5\0\2\6\11\0\11\6\1\72\1\73\2\6"+
    "\1\74\2\6\1\75\4\6\5\0\2\6\11\0\1\76"+
    "\7\6\1\77\14\6\5\0\2\6\11\0\11\6\1\100"+
    "\13\6\5\0\2\6\11\0\3\6\1\101\4\6\1\102"+
    "\14\6\5\0\2\6\11\0\3\6\1\103\14\6\1\104"+
    "\4\6\5\0\2\6\11\0\6\6\1\105\1\6\1\106"+
    "\14\6\5\0\2\6\11\0\1\107\24\6\5\0\2\6"+
    "\11\0\20\6\1\110\4\6\40\0\1\111\34\0\1\112"+
    "\45\0\1\113\36\0\1\114\47\0\1\115\1\0\1\116"+
    "\34\0\1\117\45\0\1\120\63\0\1\121\34\0\1\122"+
    "\44\0\1\123\45\0\1\124\36\0\1\125\47\0\1\126"+
    "\1\0\1\127\34\0\1\130\31\0\2\6\11\0\2\6"+
    "\1\131\3\6\1\132\16\6\5\0\2\6\11\0\11\6"+
    "\1\133\13\6\5\0\2\6\11\0\14\6\1\134\10\6"+
    "\5\0\2\6\11\0\15\6\1\135\1\6\1\136\5\6"+
    "\5\0\2\6\11\0\5\6\1\137\17\6\5\0\2\6"+
    "\11\0\16\6\1\140\6\6\5\0\2\6\11\0\2\6"+
    "\1\141\22\6\5\0\2\6\11\0\1\6\1\142\23\6"+
    "\5\0\2\6\11\0\14\6\1\143\10\6\5\0\2\6"+
    "\11\0\12\6\1\144\12\6\5\0\2\6\11\0\12\6"+
    "\1\145\12\6\5\0\2\6\11\0\5\6\1\146\17\6"+
    "\5\0\2\6\11\0\5\6\1\147\17\6\5\0\2\6"+
    "\11\0\13\6\1\150\11\6\5\0\2\6\11\0\11\6"+
    "\1\151\13\6\5\0\2\6\11\0\7\6\1\152\15\6"+
    "\5\0\2\6\11\0\1\6\1\153\23\6\5\0\2\6"+
    "\11\0\24\6\1\154\5\0\2\6\11\0\11\6\1\155"+
    "\3\6\1\156\7\6\5\0\2\6\11\0\4\6\1\157"+
    "\20\6\5\0\2\6\11\0\5\6\1\160\17\6\5\0"+
    "\2\6\11\0\16\6\1\161\6\6\5\0\2\6\11\0"+
    "\17\6\1\162\5\6\5\0\2\6\11\0\10\6\1\163"+
    "\14\6\35\0\1\164\43\0\1\165\37\0\1\166\46\0"+
    "\1\167\40\0\1\170\55\0\1\171\45\0\1\172\27\0"+
    "\1\173\57\0\1\174\43\0\1\175\41\0\1\176\42\0"+
    "\1\177\46\0\1\200\40\0\1\201\55\0\1\202\45\0"+
    "\1\203\12\0\2\6\11\0\3\6\1\204\21\6\5\0"+
    "\2\6\11\0\24\6\1\205\5\0\2\6\11\0\1\206"+
    "\24\6\5\0\2\6\11\0\1\207\24\6\5\0\2\6"+
    "\11\0\5\6\1\210\17\6\5\0\2\6\11\0\1\211"+
    "\24\6\5\0\2\6\11\0\22\6\1\212\2\6\5\0"+
    "\2\6\11\0\10\6\1\213\14\6\5\0\2\6\11\0"+
    "\3\6\1\214\21\6\5\0\2\6\11\0\5\6\1\215"+
    "\17\6\5\0\2\6\11\0\22\6\1\216\2\6\5\0"+
    "\2\6\11\0\1\217\24\6\5\0\2\6\11\0\3\6"+
    "\1\220\21\6\5\0\2\6\11\0\3\6\1\221\21\6"+
    "\5\0\2\6\11\0\10\6\1\222\14\6\5\0\2\6"+
    "\11\0\5\6\1\223\17\6\5\0\2\6\11\0\1\224"+
    "\24\6\5\0\2\6\11\0\21\6\1\225\3\6\5\0"+
    "\2\6\11\0\4\6\1\226\20\6\5\0\2\6\11\0"+
    "\5\6\1\227\17\6\5\0\2\6\11\0\3\6\1\230"+
    "\21\6\5\0\2\6\11\0\17\6\1\231\5\6\5\0"+
    "\2\6\11\0\3\6\1\232\21\6\5\0\2\6\11\0"+
    "\10\6\1\233\14\6\5\0\2\6\11\0\5\6\1\234"+
    "\17\6\5\0\2\6\11\0\11\6\1\235\13\6\25\0"+
    "\1\236\44\0\1\237\37\0\1\240\51\0\1\241\42\0"+
    "\1\242\51\0\1\243\41\0\1\244\42\0\1\245\46\0"+
    "\1\246\44\0\1\247\44\0\1\250\37\0\1\251\51\0"+
    "\1\252\42\0\1\253\51\0\1\254\41\0\1\255\24\0"+
    "\2\6\11\0\4\6\1\256\20\6\5\0\2\6\11\0"+
    "\10\6\1\257\14\6\5\0\2\6\11\0\1\6\1\260"+
    "\23\6\5\0\2\6\11\0\1\6\1\261\23\6\5\0"+
    "\2\6\11\0\1\262\24\6\5\0\2\6\11\0\12\6"+
    "\1\263\12\6\5\0\2\6\11\0\4\6\1\264\20\6"+
    "\5\0\2\6\11\0\3\6\1\265\21\6\5\0\2\6"+
    "\11\0\3\6\1\266\21\6\5\0\2\6\11\0\3\6"+
    "\1\267\21\6\5\0\2\6\11\0\25\6\1\270\4\0"+
    "\2\6\11\0\3\6\1\271\21\6\5\0\2\6\11\0"+
    "\6\6\1\272\16\6\5\0\2\6\11\0\6\6\1\273"+
    "\16\6\5\0\2\6\11\0\4\6\1\274\20\6\5\0"+
    "\2\6\11\0\1\275\24\6\5\0\2\6\11\0\4\6"+
    "\1\276\3\6\1\277\14\6\5\0\2\6\11\0\4\6"+
    "\1\300\20\6\5\0\2\6\11\0\1\301\24\6\5\0"+
    "\2\6\11\0\12\6\1\302\12\6\5\0\2\6\11\0"+
    "\6\6\1\303\16\6\5\0\2\6\11\0\5\6\1\304"+
    "\17\6\20\0\1\305\47\0\1\306\47\0\1\307\42\0"+
    "\1\310\3\0\1\311\32\0\1\312\60\0\1\313\40\0"+
    "\1\314\42\0\1\315\40\0\1\316\47\0\1\317\47\0"+
    "\1\320\44\0\1\321\42\0\1\322\3\0\1\323\46\0"+
    "\1\324\40\0\1\325\23\0\2\6\11\0\5\6\1\326"+
    "\17\6\5\0\2\6\11\0\11\6\1\327\13\6\5\0"+
    "\2\6\11\0\3\6\1\330\21\6\5\0\2\6\11\0"+
    "\3\6\1\331\21\6\5\0\2\6\11\0\1\6\1\332"+
    "\23\6\5\0\2\6\11\0\6\6\1\333\16\6\5\0"+
    "\2\6\11\0\10\6\1\334\14\6\5\0\2\6\11\0"+
    "\11\6\1\335\13\6\24\0\1\336\25\0\2\6\11\0"+
    "\11\6\1\337\13\6\5\0\2\6\11\0\4\6\1\340"+
    "\20\6\5\0\2\6\11\0\10\6\1\214\14\6\5\0"+
    "\2\6\11\0\5\6\1\341\17\6\5\0\2\6\11\0"+
    "\3\6\1\342\21\6\5\0\2\6\11\0\11\6\1\343"+
    "\13\6\5\0\2\6\11\0\7\6\1\344\15\6\5\0"+
    "\2\6\11\0\5\6\1\345\17\6\5\0\2\6\11\0"+
    "\13\6\1\346\11\6\5\0\2\6\11\0\10\6\1\347"+
    "\14\6\21\0\1\350\41\0\1\351\52\0\1\352\43\0"+
    "\1\353\52\0\1\354\40\0\1\355\52\0\1\356\36\0"+
    "\1\357\40\0\1\360\54\0\1\361\37\0\1\362\43\0"+
    "\1\363\52\0\1\364\40\0\1\365\52\0\1\366\16\0"+
    "\2\6\11\0\6\6\1\367\16\6\5\0\2\6\11\0"+
    "\10\6\1\370\14\6\5\0\2\6\11\0\11\6\1\371"+
    "\13\6\30\0\1\372\21\0\2\6\11\0\6\6\1\373"+
    "\16\6\5\0\2\6\11\0\6\6\1\374\16\6\5\0"+
    "\2\6\11\0\15\6\1\375\7\6\5\0\2\6\11\0"+
    "\10\6\1\376\14\6\5\0\2\6\11\0\6\6\1\377"+
    "\16\6\5\0\2\6\11\0\3\6\1\u0100\21\6\5\0"+
    "\2\6\11\0\6\6\1\u0101\16\6\30\0\1\u0102\32\0"+
    "\1\u0103\63\0\1\u0104\37\0\1\u0105\37\0\1\u0106\47\0"+
    "\1\u0107\44\0\1\u0108\46\0\1\u0109\42\0\1\u010a\53\0"+
    "\1\u010b\37\0\1\u010c\37\0\1\u010d\47\0\1\u010e\23\0"+
    "\2\6\11\0\4\6\1\u010f\20\6\5\0\2\6\11\0"+
    "\13\6\1\u0110\11\6\5\0\2\6\11\0\12\6\1\u0111"+
    "\12\6\22\0\1\u0112\27\0\2\6\7\0\1\u0113\1\0"+
    "\25\6\5\0\2\6\11\0\13\6\1\u0114\11\6\5\0"+
    "\2\6\11\0\5\6\1\u0115\17\6\33\0\1\u0116\27\0"+
    "\1\u0117\61\0\1\u0118\27\0\1\u0119\53\0\1\u011a\43\0"+
    "\1\u011b\53\0\1\u011c\44\0\1\u011d\36\0\1\u011e\24\0"+
    "\2\6\7\0\1\u011f\1\0\25\6\5\0\2\6\11\0"+
    "\1\u0120\24\6\5\0\2\6\11\0\1\u0121\24\6\24\0"+
    "\1\u0122\25\0\2\6\11\0\3\6\1\u0123\21\6\5\0"+
    "\2\6\11\0\3\6\1\u0124\21\6\20\0\1\u0125\47\0"+
    "\1\u0126\44\0\1\u0127\41\0\1\u0128\47\0\1\u0129\44\0"+
    "\1\u012a\26\0\2\6\11\0\6\6\1\u012b\16\6\5\0"+
    "\2\6\11\0\6\6\1\u012c\16\6\23\0\1\u012d\26\0"+
    "\2\6\11\0\4\6\1\u012e\20\6\5\0\2\6\11\0"+
    "\17\6\1\u012f\5\6\26\0\1\u0130\42\0\1\u0131\57\0"+
    "\1\u0132\33\0\1\u0133\42\0\1\u0134\57\0\1\u0135\40\0"+
    "\1\u0136\27\0\1\u0137\44\0\1\u0138\44\0\1\u0139\66\0"+
    "\1\u013a\36\0\1\u013b\44\0\1\u013c\32\0\1\u013d\47\0"+
    "\1\u013e\52\0\1\u013f\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9694];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\4\11\21\1\1\0"+
    "\1\11\7\0\1\11\10\0\31\1\20\0\33\1\20\0"+
    "\32\1\15\0\1\11\2\0\12\1\1\0\14\1\5\0"+
    "\1\11\4\0\1\11\6\0\10\1\1\0\11\1\1\0"+
    "\1\11\10\0\1\11\4\0\3\1\1\0\7\1\1\0"+
    "\1\11\6\0\2\11\1\0\1\11\1\0\3\1\1\0"+
    "\1\11\2\1\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\3\0\1\11\2\1\1\0\2\1\6\0\2\1\1\0"+
    "\2\1\3\0\3\11\1\0\3\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexGxml(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexGxml(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2282) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { return new Symbol(sym.referencia, new token(yycolumn, yyline, yytext()));
          }
        case 61: break;
        case 50: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.multimediaA2, new token(yycolumn, yyline, yytext()));
          }
        case 62: break;
        case 43: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.controlA1, new token(yycolumn, yyline, yytext()));
          }
        case 63: break;
        case 56: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.listadatosA1, new token(yycolumn, yyline, yytext()));
          }
        case 64: break;
        case 41: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.enviarF1, new token(yycolumn, yyline, yytext()));
          }
        case 65: break;
        case 26: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.datoF1, new token(yycolumn, yyline, yytext()));
          }
        case 66: break;
        case 47: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.defectoF1, new token(yycolumn, yyline, yytext()));
          }
        case 67: break;
        case 24: 
          { return new Symbol(sym.video, new token(yycolumn, yyline, yytext()));
          }
        case 68: break;
        case 5: 
          { return new Symbol(sym.igual, new token(yycolumn, yyline, yytext()));
          }
        case 69: break;
        case 18: 
          { return new Symbol(sym.tipo, new token(yycolumn, yyline, yytext()));
          }
        case 70: break;
        case 54: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.multimediaA1, new token(yycolumn, yyline, yytext()));
          }
        case 71: break;
        case 19: 
          { return new Symbol(sym.alto, new token(yycolumn, yyline, yytext()));
          }
        case 72: break;
        case 1: 
          { System.out.println(yyline+","+yycolumn+"=["+yytext()+"],"+yychar);
          }
        case 73: break;
        case 13: 
          { return new Symbol(sym.string_literal, new token(yycolumn, yyline, yytext()));
          }
        case 74: break;
        case 45: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.ventanaF1, new token(yycolumn, yyline, yytext()));
          }
        case 75: break;
        case 14: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.explicit, new token(yycolumn, yyline, yytext()));
          }
        case 76: break;
        case 10: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.menq, new token(yycolumn, yyline, yytext()));
          }
        case 77: break;
        case 2: 
          { /* ignorar */
          }
        case 78: break;
        case 58: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.contenedorF1, new token(yycolumn, yyline, yytext()));
          }
        case 79: break;
        case 3: 
          { return new Symbol(sym.ID, new token(yycolumn, yyline, yytext()));
          }
        case 80: break;
        case 7: 
          { return new Symbol(sym.clla, new token(yycolumn, yyline, yytext()));
          }
        case 81: break;
        case 60: 
          { return new Symbol(sym.autorepro, new token(yycolumn, yyline, yytext()));
          }
        case 82: break;
        case 49: 
          { return new Symbol(sym.importarF1, new token(yycolumn, yyline, yytext()));
          }
        case 83: break;
        case 39: 
          { return new Symbol(sym.cursiva, new token(yycolumn, yyline, yytext()));
          }
        case 84: break;
        case 33: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.enviarA2, new token(yycolumn, yyline, yytext()));
          }
        case 85: break;
        case 34: 
          { return new Symbol(sym.fuente, new token(yycolumn, yyline, yytext()));
          }
        case 86: break;
        case 30: 
          { return new Symbol(sym.maximo, new token(yycolumn, yyline, yytext()));
          }
        case 87: break;
        case 32: 
          { return new Symbol(sym.accion, new token(yycolumn, yyline, yytext()));
          }
        case 88: break;
        case 20: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.datoA2, new token(yycolumn, yyline, yytext()));
          }
        case 89: break;
        case 40: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.defectoA2, new token(yycolumn, yyline, yytext()));
          }
        case 90: break;
        case 28: 
          { return new Symbol(sym.imagen, new token(yycolumn, yyline, yytext()));
          }
        case 91: break;
        case 35: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.textoF1, new token(yycolumn, yyline, yytext()));
          }
        case 92: break;
        case 31: 
          { return new Symbol(sym.musica, new token(yycolumn, yyline, yytext()));
          }
        case 93: break;
        case 8: 
          { return new Symbol(sym.pyc, new token(yycolumn, yyline, yytext()));
          }
        case 94: break;
        case 36: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.enviarA1, new token(yycolumn, yyline, yytext()));
          }
        case 95: break;
        case 46: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.controlF1, new token(yycolumn, yyline, yytext()));
          }
        case 96: break;
        case 12: 
          { return new Symbol(sym.y, new token(yycolumn, yyline, yytext()));
          }
        case 97: break;
        case 21: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.datoA1, new token(yycolumn, yyline, yytext()));
          }
        case 98: break;
        case 44: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.defectoA1, new token(yycolumn, yyline, yytext()));
          }
        case 99: break;
        case 29: 
          { return new Symbol(sym.minimo, new token(yycolumn, yyline, yytext()));
          }
        case 100: break;
        case 4: 
          { return new Symbol(sym.div, new token(yycolumn, yyline, yytext()));
          }
        case 101: break;
        case 52: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.contenedorA2, new token(yycolumn, yyline, yytext()));
          }
        case 102: break;
        case 59: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.listadatosF1, new token(yycolumn, yyline, yytext()));
          }
        case 103: break;
        case 48: 
          { return new Symbol(sym.importarA2, new token(yycolumn, yyline, yytext()));
          }
        case 104: break;
        case 6: 
          { return new Symbol(sym.alla, new token(yycolumn, yyline, yytext()));
          }
        case 105: break;
        case 16: 
          { return new Symbol(sym.tam, new token(yycolumn, yyline, yytext()));
          }
        case 106: break;
        case 42: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.ventanaA1, new token(yycolumn, yyline, yytext()));
          }
        case 107: break;
        case 11: 
          { return new Symbol(sym.x, new token(yycolumn, yyline, yytext()));
          }
        case 108: break;
        case 22: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.textoA2, new token(yycolumn, yyline, yytext()));
          }
        case 109: break;
        case 57: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.multimediaF1, new token(yycolumn, yyline, yytext()));
          }
        case 110: break;
        case 9: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.mayq, new token(yycolumn, yyline, yytext()));
          }
        case 111: break;
        case 55: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.contenedorA1, new token(yycolumn, yyline, yytext()));
          }
        case 112: break;
        case 17: 
          { return new Symbol(sym.path, new token(yycolumn, yyline, yytext()));
          }
        case 113: break;
        case 23: 
          { return new Symbol(sym.ancho, new token(yycolumn, yyline, yytext()));
          }
        case 114: break;
        case 38: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.controlA2, new token(yycolumn, yyline, yytext()));
          }
        case 115: break;
        case 37: 
          { return new Symbol(sym.negrita, new token(yycolumn, yyline, yytext()));
          }
        case 116: break;
        case 25: 
          { return new Symbol(sym.color, new token(yycolumn, yyline, yytext()));
          }
        case 117: break;
        case 53: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.listadatosA2, new token(yycolumn, yyline, yytext()));
          }
        case 118: break;
        case 27: 
          { System.out.println("tk:"+yytext()); return new Symbol(sym.textoA1, new token(yycolumn, yyline, yytext()));
          }
        case 119: break;
        case 15: 
          { return new Symbol(sym.id, new token(yycolumn, yyline, yytext()));
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
