
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 15 20:56:31 CST 2019
//----------------------------------------------------

package Analizadores.Gxml;

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 15 20:56:31 CST 2019
  */
public class SintacticoGxml extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoGxml() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\007" +
    "\002\000\002\007\003\000\002\006\004\000\002\006\003" +
    "\000\002\010\006\000\002\016\006\000\002\016\004\000" +
    "\002\021\004\000\002\021\003\000\002\023\005\000\002" +
    "\022\005\000\002\017\003\000\002\017\005\000\002\020" +
    "\004\000\002\020\003\000\002\030\006\000\002\030\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\027\006\000\002" +
    "\027\006\000\002\027\006\000\002\027\006\000\002\027" +
    "\006\000\002\027\006\000\002\027\006\000\002\031\003" +
    "\000\002\031\005\000\002\003\002\000\002\003\003\000" +
    "\002\004\004\000\002\004\003\000\002\024\006\000\002" +
    "\025\006\000\002\011\002\000\002\011\003\000\002\012" +
    "\004\000\002\012\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\013\005\000\002\014\005\000" +
    "\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\010\002\uffe0\005\004\010\uffe0\001\002\000" +
    "\004\050\166\001\002\000\006\002\uffff\010\017\001\002" +
    "\000\004\002\016\001\002\000\010\002\uffdf\005\011\010" +
    "\uffdf\001\002\000\010\002\uffdd\005\uffdd\010\uffdd\001\002" +
    "\000\004\050\013\001\002\000\010\002\uffde\005\uffde\010" +
    "\uffde\001\002\000\004\051\014\001\002\000\004\006\015" +
    "\001\002\000\010\002\uffdb\005\uffdb\010\uffdb\001\002\000" +
    "\004\002\001\001\002\000\012\021\024\022\034\023\027" +
    "\050\uffda\001\002\000\006\002\ufffc\010\ufffc\001\002\000" +
    "\006\002\ufffe\010\017\001\002\000\004\002\000\001\002" +
    "\000\006\002\ufffd\010\ufffd\001\002\000\004\053\164\001" +
    "\002\000\012\021\uffd7\022\uffd7\023\uffd7\050\uffd7\001\002" +
    "\000\012\021\uffd5\022\uffd5\023\uffd5\050\uffd5\001\002\000" +
    "\004\053\162\001\002\000\004\050\040\001\002\000\012" +
    "\021\024\022\034\023\027\050\uffd9\001\002\000\012\021" +
    "\uffd4\022\uffd4\023\uffd4\050\uffd4\001\002\000\012\021\uffd6" +
    "\022\uffd6\023\uffd6\050\uffd6\001\002\000\004\053\035\001" +
    "\002\000\004\052\036\001\002\000\012\021\uffd2\022\uffd2" +
    "\023\uffd2\050\uffd2\001\002\000\012\021\uffd8\022\uffd8\023" +
    "\uffd8\050\uffd8\001\002\000\006\013\042\051\045\001\002" +
    "\000\006\002\ufffb\010\ufffb\001\002\000\004\050\056\001" +
    "\002\000\006\012\051\054\047\001\002\000\006\012\ufff7" +
    "\054\ufff7\001\002\000\004\011\046\001\002\000\006\002" +
    "\ufff9\010\ufff9\001\002\000\004\051\054\001\002\000\006" +
    "\012\ufff8\054\ufff8\001\002\000\004\050\052\001\002\000" +
    "\004\014\053\001\002\000\006\012\ufff6\054\ufff6\001\002" +
    "\000\004\011\055\001\002\000\006\002\ufffa\010\ufffa\001" +
    "\002\000\022\014\060\057\064\062\070\065\061\070\071" +
    "\073\057\076\063\101\067\001\002\000\012\021\024\022" +
    "\034\023\027\050\uffda\001\002\000\006\012\ufff4\054\ufff4" +
    "\001\002\000\012\021\024\022\034\023\027\050\uffda\001" +
    "\002\000\006\012\ufff5\054\ufff5\001\002\000\012\021\024" +
    "\022\034\023\027\050\uffda\001\002\000\012\021\024\022" +
    "\034\023\027\050\uffda\001\002\000\022\054\ufff1\056\ufff1" +
    "\061\ufff1\064\ufff1\067\ufff1\072\ufff1\075\ufff1\100\ufff1\001" +
    "\002\000\022\054\104\056\110\061\112\064\105\067\113" +
    "\072\103\075\106\100\111\001\002\000\012\021\024\022" +
    "\034\023\027\050\uffda\001\002\000\012\021\024\022\034" +
    "\023\027\050\uffda\001\002\000\012\021\024\022\034\023" +
    "\027\050\uffda\001\002\000\004\050\073\001\002\000\004" +
    "\071\074\001\002\000\022\054\uffe6\056\uffe6\061\uffe6\064" +
    "\uffe6\067\uffe6\072\uffe6\075\uffe6\100\uffe6\001\002\000\004" +
    "\050\076\001\002\000\004\063\077\001\002\000\022\054" +
    "\uffe8\056\uffe8\061\uffe8\064\uffe8\067\uffe8\072\uffe8\075\uffe8" +
    "\100\uffe8\001\002\000\004\050\101\001\002\000\004\102" +
    "\102\001\002\000\022\054\uffe3\056\uffe3\061\uffe3\064\uffe3" +
    "\067\uffe3\072\uffe3\075\uffe3\100\uffe3\001\002\000\012\021" +
    "\024\022\034\023\027\050\uffda\001\002\000\004\014\136" +
    "\001\002\000\012\021\024\022\034\023\027\050\uffda\001" +
    "\002\000\012\021\024\022\034\023\027\050\uffda\001\002" +
    "\000\022\054\ufff2\056\ufff2\061\ufff2\064\ufff2\067\ufff2\072" +
    "\ufff2\075\ufff2\100\ufff2\001\002\000\012\021\024\022\034" +
    "\023\027\050\uffda\001\002\000\012\021\024\022\034\023" +
    "\027\050\uffda\001\002\000\012\021\024\022\034\023\027" +
    "\050\uffda\001\002\000\012\021\024\022\034\023\027\050" +
    "\uffda\001\002\000\004\050\115\001\002\000\004\071\116" +
    "\001\002\000\022\054\uffed\056\uffed\061\uffed\064\uffed\067" +
    "\uffed\072\uffed\075\uffed\100\uffed\001\002\000\004\050\120" +
    "\001\002\000\004\063\121\001\002\000\022\054\uffef\056" +
    "\uffef\061\uffef\064\uffef\067\uffef\072\uffef\075\uffef\100\uffef" +
    "\001\002\000\004\050\123\001\002\000\004\102\124\001" +
    "\002\000\022\054\uffea\056\uffea\061\uffea\064\uffea\067\uffea" +
    "\072\uffea\075\uffea\100\uffea\001\002\000\004\050\126\001" +
    "\002\000\004\060\127\001\002\000\022\054\ufff0\056\ufff0" +
    "\061\ufff0\064\ufff0\067\ufff0\072\ufff0\075\ufff0\100\ufff0\001" +
    "\002\000\004\050\131\001\002\000\004\077\132\001\002" +
    "\000\022\054\uffeb\056\uffeb\061\uffeb\064\uffeb\067\uffeb\072" +
    "\uffeb\075\uffeb\100\uffeb\001\002\000\004\050\134\001\002" +
    "\000\004\066\135\001\002\000\022\054\uffee\056\uffee\061" +
    "\uffee\064\uffee\067\uffee\072\uffee\075\uffee\100\uffee\001\002" +
    "\000\006\012\ufff3\054\ufff3\001\002\000\004\050\140\001" +
    "\002\000\022\057\064\062\070\065\061\070\071\073\057" +
    "\074\141\076\063\101\067\001\002\000\022\054\uffe2\056" +
    "\uffe2\061\uffe2\064\uffe2\067\uffe2\072\uffe2\075\uffe2\100\uffe2" +
    "\001\002\000\022\054\uffec\056\uffec\061\uffec\064\uffec\067" +
    "\uffec\072\uffec\075\uffec\100\uffec\001\002\000\022\054\144" +
    "\056\110\061\112\064\105\067\113\072\103\075\106\100" +
    "\111\001\002\000\004\074\145\001\002\000\022\054\uffe1" +
    "\056\uffe1\061\uffe1\064\uffe1\067\uffe1\072\uffe1\075\uffe1\100" +
    "\uffe1\001\002\000\004\050\147\001\002\000\004\060\150" +
    "\001\002\000\022\054\uffe9\056\uffe9\061\uffe9\064\uffe9\067" +
    "\uffe9\072\uffe9\075\uffe9\100\uffe9\001\002\000\004\050\152" +
    "\001\002\000\004\077\153\001\002\000\022\054\uffe4\056" +
    "\uffe4\061\uffe4\064\uffe4\067\uffe4\072\uffe4\075\uffe4\100\uffe4" +
    "\001\002\000\004\050\155\001\002\000\004\066\156\001" +
    "\002\000\022\054\uffe7\056\uffe7\061\uffe7\064\uffe7\067\uffe7" +
    "\072\uffe7\075\uffe7\100\uffe7\001\002\000\004\050\160\001" +
    "\002\000\022\057\064\062\070\065\061\070\071\073\057" +
    "\074\141\076\063\101\067\001\002\000\022\054\uffe5\056" +
    "\uffe5\061\uffe5\064\uffe5\067\uffe5\072\uffe5\075\uffe5\100\uffe5" +
    "\001\002\000\004\052\163\001\002\000\012\021\uffd1\022" +
    "\uffd1\023\uffd1\050\uffd1\001\002\000\004\052\165\001\002" +
    "\000\012\021\uffd3\022\uffd3\023\uffd3\050\uffd3\001\002\000" +
    "\004\051\167\001\002\000\004\006\170\001\002\000\010" +
    "\002\uffdc\005\uffdc\010\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\012\002\005\003\004\004\006\024\007\001" +
    "\001\000\002\001\001\000\010\006\020\007\021\010\017" +
    "\001\001\000\002\001\001\000\004\025\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\027\012\030\013\032\014\025\015\031" +
    "\026\024\001\001\000\002\001\001\000\004\010\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\032\014\025\015\031\026\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\040\021\042\022\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\061\020\065\027\064\001\001\000\016\011\156" +
    "\012\030\013\032\014\025\015\031\026\024\001\001\000" +
    "\002\001\001\000\016\011\153\012\030\013\032\014\025" +
    "\015\031\026\024\001\001\000\002\001\001\000\016\011" +
    "\150\012\030\013\032\014\025\015\031\026\024\001\001" +
    "\000\016\011\145\012\030\013\032\014\025\015\031\026" +
    "\024\001\001\000\002\001\001\000\004\030\106\001\001" +
    "\000\016\011\077\012\030\013\032\014\025\015\031\026" +
    "\024\001\001\000\016\011\074\012\030\013\032\014\025" +
    "\015\031\026\024\001\001\000\016\011\071\012\030\013" +
    "\032\014\025\015\031\026\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\136\012\030\013" +
    "\032\014\025\015\031\026\024\001\001\000\002\001\001" +
    "\000\016\011\132\012\030\013\032\014\025\015\031\026" +
    "\024\001\001\000\016\011\127\012\030\013\032\014\025" +
    "\015\031\026\024\001\001\000\002\001\001\000\016\011" +
    "\124\012\030\013\032\014\025\015\031\026\024\001\001" +
    "\000\016\011\121\012\030\013\032\014\025\015\031\026" +
    "\024\001\001\000\016\011\116\012\030\013\032\014\025" +
    "\015\031\026\024\001\001\000\016\011\113\012\030\013" +
    "\032\014\025\015\031\026\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\142\027\064\031\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\142\027\064\031\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoGxml$actions {


    //se declaran variables globales etc.
        public int Index=1;

  private final SintacticoGxml parser;

  /** Constructor */
  CUP$SintacticoGxml$actions(SintacticoGxml parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGxml$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ATT_ANCHO ::= ancho igual string_literal 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("ancho",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna()); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATT_ANCHO",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ATT_ALTO ::= alto igual string_literal 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("alto",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna()); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATT_ALTO",10, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ATT_ID ::= id igual string_literal 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 System.out.println(y.getCadena()); RESULT = parser.crearNodo("id",y.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATT_ID",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ATT ::= ATT_ANCHO 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = r;   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATT",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATT ::= ATT_ALTO 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = r;   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATT",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATT ::= ATT_ID 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = r;   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATT",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LIST_ATTS ::= ATT 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTS",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LIST_ATTS ::= LIST_ATTS ATT 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTS",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LIST_ATTSTART ::= LIST_ATTS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTSTART",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIST_ATTSTART ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTSTART",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IM2 ::= importarA2 explicit div importarF1 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 System.out.println(x.getCadena()); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IM2",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IM1 ::= importarA2 explicit div importarF1 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 System.out.println(x.getCadena()); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IM1",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IMPORTS ::= IM1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMPORTS ::= IMPORTS IM2 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENCABEZADO ::= IMPORTS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ENCABEZADO ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOListaDatos ::= CONTENIDOCUERPO menq listadatosF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOListaDatos",23, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOListaDatos ::= listadatosF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOListaDatos",23, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ETIQUETASforma1 ::= multimediaA2 LIST_ATTSTART explicit multimediaF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ETIQUETASforma1 ::= enviarA2 LIST_ATTSTART explicit enviarF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ETIQUETASforma1 ::= listadatosA2 LIST_ATTSTART explicit CONTENIDOListaDatos 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ETIQUETASforma1 ::= defectoA2 LIST_ATTSTART explicit defectoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIQUETASforma1 ::= datoA2 LIST_ATTSTART explicit datoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ETIQUETASforma1 ::= controlA2 LIST_ATTSTART explicit controlF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ETIQUETASforma1 ::= textoA2 LIST_ATTSTART explicit textoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ETIQUETASforma2 ::= multimediaA1 LIST_ATTSTART explicit multimediaF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ETIQUETASforma2 ::= enviarA1 LIST_ATTSTART explicit enviarF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ETIQUETASforma2 ::= listadatosA1 LIST_ATTSTART explicit CONTENIDOListaDatos 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ETIQUETASforma2 ::= defectoA1 LIST_ATTSTART explicit defectoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ETIQUETASforma2 ::= datoA1 LIST_ATTSTART explicit datoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETIQUETASforma2 ::= controlA1 LIST_ATTSTART explicit controlF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETIQUETASforma2 ::= textoA1 LIST_ATTSTART explicit textoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDOCUERPO ::= ETIQUETASforma1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDOCUERPO ::= CONTENIDOCUERPO ETIQUETASforma2 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDOCUERPOS ::= CONTENIDOCUERPO menq contenedorF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPOS",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDOCUERPOS ::= contenedorF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPOS",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTR1 ::= contenedorA2 explicit CONTENIDOCUERPOS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTR1",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTR2 ::= contenedorA1 explicit contenedorF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTR2",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_CONTENEDORES ::= CONTR1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_CONTENEDORES",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_CONTENEDORES ::= L_CONTENEDORES CONTR2 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_CONTENEDORES",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDOVENTANA ::= div ventanaF1 
            {
              Nodo RESULT =null;
		 System.out.println("VENTANA:"); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOVENTANA",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOVENTANA ::= L_CONTENEDORES menq div ventanaF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOVENTANA",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VENTANAX ::= ventanaA1 LIST_ATTSTART explicit CONTENIDOVENTANA 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAX",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_VENTANAS ::= VENTANAX 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_VENTANAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_VENTANAS ::= L_VENTANAS VENTANAX 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_VENTANAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VENTANAS ::= L_VENTANAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VENTANAS ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENCABEZADO VENTANAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGxml$parser.done_parsing();
          return CUP$SintacticoGxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

