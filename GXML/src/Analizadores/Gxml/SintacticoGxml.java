
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 15 23:12:07 CST 2019
//----------------------------------------------------

package Analizadores.Gxml;

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 15 23:12:07 CST 2019
  */
public class SintacticoGxml extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoGxml() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\004\000\002\006" +
    "\002\000\002\006\003\000\002\005\004\000\002\005\003" +
    "\000\002\007\006\000\002\012\006\000\002\012\004\000" +
    "\002\013\004\000\002\013\003\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\006\000\002\020\003\000\002\020" +
    "\005\000\002\021\003\000\002\021\005\000\002\022\003" +
    "\000\002\022\005\000\002\003\002\000\002\003\003\000" +
    "\002\004\004\000\002\004\003\000\002\014\006\000\002" +
    "\010\002\000\002\010\003\000\002\011\004\000\002\011" +
    "\003\000\002\015\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\010\002\uffe0\004\004\006\uffe0\001\002\000" +
    "\004\043\206\001\002\000\006\002\uffff\006\013\001\002" +
    "\000\004\002\012\001\002\000\010\002\uffdf\004\004\006" +
    "\uffdf\001\002\000\010\002\uffdd\004\uffdd\006\uffdd\001\002" +
    "\000\010\002\uffde\004\uffde\006\uffde\001\002\000\004\002" +
    "\001\001\002\000\056\013\022\014\021\015\036\016\026" +
    "\017\020\020\046\021\045\022\040\023\031\024\030\025" +
    "\044\026\023\027\047\030\027\031\024\032\037\033\025" +
    "\034\043\035\035\036\034\043\uffdb\101\050\001\002\000" +
    "\006\002\ufffc\006\ufffc\001\002\000\006\002\ufffe\006\013" +
    "\001\002\000\004\002\000\001\002\000\006\002\ufffd\006" +
    "\ufffd\001\002\000\004\046\uffcf\001\002\000\004\046\uffcd" +
    "\001\002\000\004\046\uffd5\001\002\000\004\046\uffc8\001" +
    "\002\000\004\046\uffc5\001\002\000\004\046\uffd3\001\002" +
    "\000\004\046\uffd0\001\002\000\004\046\uffc6\001\002\000" +
    "\004\046\uffd1\001\002\000\004\046\uffd2\001\002\000\056" +
    "\013\022\014\021\015\036\016\026\017\020\020\046\021" +
    "\045\022\040\023\031\024\030\025\044\026\023\027\047" +
    "\030\027\031\024\032\037\033\025\034\043\035\035\036" +
    "\034\043\uffda\101\050\001\002\000\004\043\057\001\002" +
    "\000\004\046\uffc2\001\002\000\004\046\uffc3\001\002\000" +
    "\004\046\uffd6\001\002\000\004\046\uffd4\001\002\000\004" +
    "\046\uffca\001\002\000\056\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\043\uffd8\101\uffd8\001\002" +
    "\000\004\046\051\001\002\000\004\046\uffc4\001\002\000" +
    "\004\046\uffc9\001\002\000\004\046\uffcb\001\002\000\004" +
    "\046\uffcc\001\002\000\004\046\uffc7\001\002\000\004\046" +
    "\uffce\001\002\000\012\045\053\076\055\077\056\100\052" +
    "\001\002\000\056\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\043\uffbe\101\uffbe\001\002\000\056" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\043\uffc1\101\uffc1\001\002\000\056\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\043\uffd7\101" +
    "\uffd7\001\002\000\056\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\043\uffc0\101\uffc0\001\002\000" +
    "\056\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\043\uffbf\101\uffbf\001\002\000\024\011\071\044" +
    "\060\052\065\055\072\060\062\063\073\066\061\071\064" +
    "\074\070\001\002\000\004\007\204\001\002\000\056\013" +
    "\022\014\021\015\036\016\026\017\020\020\046\021\045" +
    "\022\040\023\031\024\030\025\044\026\023\027\047\030" +
    "\027\031\024\032\037\033\025\034\043\035\035\036\034" +
    "\043\uffdb\101\050\001\002\000\056\013\022\014\021\015" +
    "\036\016\026\017\020\020\046\021\045\022\040\023\031" +
    "\024\030\025\044\026\023\027\047\030\027\031\024\032" +
    "\037\033\025\034\043\035\035\036\034\043\uffdb\101\050" +
    "\001\002\000\006\002\ufffb\006\ufffb\001\002\000\056\013" +
    "\022\014\021\015\036\016\026\017\020\020\046\021\045" +
    "\022\040\023\031\024\030\025\044\026\023\027\047\030" +
    "\027\031\024\032\037\033\025\034\043\035\035\036\034" +
    "\043\uffdb\101\050\001\002\000\056\013\022\014\021\015" +
    "\036\016\026\017\020\020\046\021\045\022\040\023\031" +
    "\024\030\025\044\026\023\027\047\030\027\031\024\032" +
    "\037\033\025\034\043\035\035\036\034\043\uffdb\101\050" +
    "\001\002\000\024\010\ufff7\047\ufff7\051\ufff7\054\ufff7\057" +
    "\ufff7\062\ufff7\065\ufff7\070\ufff7\073\ufff7\001\002\000\024" +
    "\010\114\047\165\051\111\054\113\057\106\062\115\065" +
    "\104\070\107\073\112\001\002\000\056\013\022\014\021" +
    "\015\036\016\026\017\020\020\046\021\045\022\040\023" +
    "\031\024\030\025\044\026\023\027\047\030\027\031\024" +
    "\032\037\033\025\034\043\035\035\036\034\043\uffdb\101" +
    "\050\001\002\000\056\013\022\014\021\015\036\016\026" +
    "\017\020\020\046\021\045\022\040\023\031\024\030\025" +
    "\044\026\023\027\047\030\027\031\024\032\037\033\025" +
    "\034\043\035\035\036\034\043\uffdb\101\050\001\002\000" +
    "\056\013\022\014\021\015\036\016\026\017\020\020\046" +
    "\021\045\022\040\023\031\024\030\025\044\026\023\027" +
    "\047\030\027\031\024\032\037\033\025\034\043\035\035" +
    "\036\034\043\uffdb\101\050\001\002\000\056\013\022\014" +
    "\021\015\036\016\026\017\020\020\046\021\045\022\040" +
    "\023\031\024\030\025\044\026\023\027\047\030\027\031" +
    "\024\032\037\033\025\034\043\035\035\036\034\043\uffdb" +
    "\101\050\001\002\000\004\043\075\001\002\000\004\064" +
    "\076\001\002\000\024\010\uffeb\047\uffeb\051\uffeb\054\uffeb" +
    "\057\uffeb\062\uffeb\065\uffeb\070\uffeb\073\uffeb\001\002\000" +
    "\004\043\100\001\002\000\024\011\071\052\065\055\072" +
    "\056\102\060\062\063\073\066\061\071\064\074\070\001" +
    "\002\000\024\010\uffed\047\uffed\051\uffed\054\uffed\057\uffed" +
    "\062\uffed\065\uffed\070\uffed\073\uffed\001\002\000\024\010" +
    "\uffe4\047\uffe4\051\uffe4\054\uffe4\057\uffe4\062\uffe4\065\uffe4" +
    "\070\uffe4\073\uffe4\001\002\000\024\010\114\047\105\051" +
    "\111\054\113\057\106\062\115\065\104\070\107\073\112" +
    "\001\002\000\056\013\022\014\021\015\036\016\026\017" +
    "\020\020\046\021\045\022\040\023\031\024\030\025\044" +
    "\026\023\027\047\030\027\031\024\032\037\033\025\034" +
    "\043\035\035\036\034\043\uffdb\101\050\001\002\000\004" +
    "\056\147\001\002\000\056\013\022\014\021\015\036\016" +
    "\026\017\020\020\046\021\045\022\040\023\031\024\030" +
    "\025\044\026\023\027\047\030\027\031\024\032\037\033" +
    "\025\034\043\035\035\036\034\043\uffdb\101\050\001\002" +
    "\000\056\013\022\014\021\015\036\016\026\017\020\020" +
    "\046\021\045\022\040\023\031\024\030\025\044\026\023" +
    "\027\047\030\027\031\024\032\037\033\025\034\043\035" +
    "\035\036\034\043\uffdb\101\050\001\002\000\024\010\ufff8" +
    "\047\ufff8\051\ufff8\054\ufff8\057\ufff8\062\ufff8\065\ufff8\070" +
    "\ufff8\073\ufff8\001\002\000\056\013\022\014\021\015\036" +
    "\016\026\017\020\020\046\021\045\022\040\023\031\024" +
    "\030\025\044\026\023\027\047\030\027\031\024\032\037" +
    "\033\025\034\043\035\035\036\034\043\uffdb\101\050\001" +
    "\002\000\056\013\022\014\021\015\036\016\026\017\020" +
    "\020\046\021\045\022\040\023\031\024\030\025\044\026" +
    "\023\027\047\030\027\031\024\032\037\033\025\034\043" +
    "\035\035\036\034\043\uffdb\101\050\001\002\000\056\013" +
    "\022\014\021\015\036\016\026\017\020\020\046\021\045" +
    "\022\040\023\031\024\030\025\044\026\023\027\047\030" +
    "\027\031\024\032\037\033\025\034\043\035\035\036\034" +
    "\043\uffdb\101\050\001\002\000\056\013\022\014\021\015" +
    "\036\016\026\017\020\020\046\021\045\022\040\023\031" +
    "\024\030\025\044\026\023\027\047\030\027\031\024\032" +
    "\037\033\025\034\043\035\035\036\034\043\uffdb\101\050" +
    "\001\002\000\056\013\022\014\021\015\036\016\026\017" +
    "\020\020\046\021\045\022\040\023\031\024\030\025\044" +
    "\026\023\027\047\030\027\031\024\032\037\033\025\034" +
    "\043\035\035\036\034\043\uffdb\101\050\001\002\000\004" +
    "\043\117\001\002\000\004\064\120\001\002\000\024\010" +
    "\ufff3\047\ufff3\051\ufff3\054\ufff3\057\ufff3\062\ufff3\065\ufff3" +
    "\070\ufff3\073\ufff3\001\002\000\004\043\122\001\002\000" +
    "\024\011\071\012\123\052\065\055\072\060\062\063\073" +
    "\066\061\071\064\074\070\001\002\000\024\010\uffe2\047" +
    "\uffe2\051\uffe2\054\uffe2\057\uffe2\062\uffe2\065\uffe2\070\uffe2" +
    "\073\uffe2\001\002\000\024\010\uffef\047\uffef\051\uffef\054" +
    "\uffef\057\uffef\062\uffef\065\uffef\070\uffef\073\uffef\001\002" +
    "\000\024\010\114\047\126\051\111\054\113\057\106\062" +
    "\115\065\104\070\107\073\112\001\002\000\004\012\127" +
    "\001\002\000\024\010\uffe1\047\uffe1\051\uffe1\054\uffe1\057" +
    "\uffe1\062\uffe1\065\uffe1\070\uffe1\073\uffe1\001\002\000\004" +
    "\043\131\001\002\000\024\011\071\052\065\055\072\056" +
    "\102\060\062\063\073\066\061\071\064\074\070\001\002" +
    "\000\024\010\ufff5\047\ufff5\051\ufff5\054\ufff5\057\ufff5\062" +
    "\ufff5\065\ufff5\070\ufff5\073\ufff5\001\002\000\004\043\134" +
    "\001\002\000\004\075\135\001\002\000\024\010\ufff0\047" +
    "\ufff0\051\ufff0\054\ufff0\057\ufff0\062\ufff0\065\ufff0\070\ufff0" +
    "\073\ufff0\001\002\000\004\043\137\001\002\000\004\053" +
    "\140\001\002\000\024\010\ufff6\047\ufff6\051\ufff6\054\ufff6" +
    "\057\ufff6\062\ufff6\065\ufff6\070\ufff6\073\ufff6\001\002\000" +
    "\004\043\142\001\002\000\004\072\143\001\002\000\024" +
    "\010\ufff1\047\ufff1\051\ufff1\054\ufff1\057\ufff1\062\ufff1\065" +
    "\ufff1\070\ufff1\073\ufff1\001\002\000\004\043\145\001\002" +
    "\000\004\061\146\001\002\000\024\010\ufff4\047\ufff4\051" +
    "\ufff4\054\ufff4\057\ufff4\062\ufff4\065\ufff4\070\ufff4\073\ufff4" +
    "\001\002\000\024\010\uffe3\047\uffe3\051\uffe3\054\uffe3\057" +
    "\uffe3\062\uffe3\065\uffe3\070\uffe3\073\uffe3\001\002\000\004" +
    "\043\151\001\002\000\024\011\071\052\065\055\072\060" +
    "\062\063\073\066\061\067\152\071\064\074\070\001\002" +
    "\000\024\010\uffe6\047\uffe6\051\uffe6\054\uffe6\057\uffe6\062" +
    "\uffe6\065\uffe6\070\uffe6\073\uffe6\001\002\000\024\010\ufff2" +
    "\047\ufff2\051\ufff2\054\ufff2\057\ufff2\062\ufff2\065\ufff2\070" +
    "\ufff2\073\ufff2\001\002\000\024\010\114\047\155\051\111" +
    "\054\113\057\106\062\115\065\104\070\107\073\112\001" +
    "\002\000\004\067\156\001\002\000\024\010\uffe5\047\uffe5" +
    "\051\uffe5\054\uffe5\057\uffe5\062\uffe5\065\uffe5\070\uffe5\073" +
    "\uffe5\001\002\000\004\043\160\001\002\000\024\011\071" +
    "\012\123\052\065\055\072\060\062\063\073\066\061\071" +
    "\064\074\070\001\002\000\024\010\uffe7\047\uffe7\051\uffe7" +
    "\054\uffe7\057\uffe7\062\uffe7\065\uffe7\070\uffe7\073\uffe7\001" +
    "\002\000\004\043\163\001\002\000\004\075\164\001\002" +
    "\000\024\010\uffe8\047\uffe8\051\uffe8\054\uffe8\057\uffe8\062" +
    "\uffe8\065\uffe8\070\uffe8\073\uffe8\001\002\000\004\044\166" +
    "\001\002\000\004\007\167\001\002\000\006\002\ufffa\006" +
    "\ufffa\001\002\000\004\043\171\001\002\000\004\053\172" +
    "\001\002\000\024\010\uffee\047\uffee\051\uffee\054\uffee\057" +
    "\uffee\062\uffee\065\uffee\070\uffee\073\uffee\001\002\000\004" +
    "\043\174\001\002\000\004\072\175\001\002\000\024\010" +
    "\uffe9\047\uffe9\051\uffe9\054\uffe9\057\uffe9\062\uffe9\065\uffe9" +
    "\070\uffe9\073\uffe9\001\002\000\004\043\177\001\002\000" +
    "\004\061\200\001\002\000\024\010\uffec\047\uffec\051\uffec" +
    "\054\uffec\057\uffec\062\uffec\065\uffec\070\uffec\073\uffec\001" +
    "\002\000\004\043\202\001\002\000\024\011\071\052\065" +
    "\055\072\060\062\063\073\066\061\067\152\071\064\074" +
    "\070\001\002\000\024\010\uffea\047\uffea\051\uffea\054\uffea" +
    "\057\uffea\062\uffea\065\uffea\070\uffea\073\uffea\001\002\000" +
    "\006\002\ufff9\006\ufff9\001\002\000\056\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\043\uffd9\101" +
    "\uffd9\001\002\000\004\044\207\001\002\000\004\005\210" +
    "\001\002\000\010\002\uffdc\004\uffdc\006\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\012\002\005\003\004\004\006\014\007\001" +
    "\001\000\002\001\001\000\010\005\014\006\015\007\013" +
    "\001\001\000\002\001\001\000\004\014\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\032\011\031\015\040\024\041\001\001\000\002\001" +
    "\001\000\004\007\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\204\024\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\062\013\066\016\065\001\001\000" +
    "\002\001\001\000\012\010\200\011\031\015\040\024\041" +
    "\001\001\000\012\010\175\011\031\015\040\024\041\001" +
    "\001\000\002\001\001\000\012\010\172\011\031\015\040" +
    "\024\041\001\001\000\012\010\167\011\031\015\040\024" +
    "\041\001\001\000\002\001\001\000\004\017\107\001\001" +
    "\000\012\010\161\011\031\015\040\024\041\001\001\000" +
    "\012\010\156\011\031\015\040\024\041\001\001\000\012" +
    "\010\076\011\031\015\040\024\041\001\001\000\012\010" +
    "\073\011\031\015\040\024\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\102\016\065\021\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\107\001\001\000\012\010" +
    "\147\011\031\015\040\024\041\001\001\000\002\001\001" +
    "\000\012\010\143\011\031\015\040\024\041\001\001\000" +
    "\012\010\140\011\031\015\040\024\041\001\001\000\002" +
    "\001\001\000\012\010\135\011\031\015\040\024\041\001" +
    "\001\000\012\010\132\011\031\015\040\024\041\001\001" +
    "\000\012\010\127\011\031\015\040\024\041\001\001\000" +
    "\012\010\120\011\031\015\040\024\041\001\001\000\012" +
    "\010\115\011\031\015\040\024\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\124\016\065\022\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\102\016\065\021\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\153\016\065\020\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\124\016\065\022\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\153\016\065\020\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoGxml$actions {


    //se declaran variables globales etc.
        public int Index=1;

  private final SintacticoGxml parser;

  /** Constructor */
  CUP$SintacticoGxml$actions(SintacticoGxml parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGxml$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALOR ::= bool_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("bool_literal",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR ::= double_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("double_literal",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALOR ::= int_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("int_literal",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR ::= string_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("string_literal",m.getCadena().substring(1, m.getCadena().length()-1),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATRIBUTO ::= autorepro 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("autorepro",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATRIBUTO ::= path 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("path",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ATRIBUTO ::= referencia 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("referencia",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ATRIBUTO ::= accion 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("accion",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATRIBUTO ::= minimo 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("minimo",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATRIBUTO ::= maximo 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("maximo",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATRIBUTO ::= cursiva 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("cursiva",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATRIBUTO ::= negrita 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("negrita",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATRIBUTO ::= color 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("color",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIBUTO ::= tam 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("tam",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUTO ::= fuente 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("fuente",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUTO ::= nombre 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("nombre",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUTO ::= borde 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("borde",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ATRIBUTO ::= ancho 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("ancho",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ATRIBUTO ::= alto 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("alto",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ATRIBUTO ::= y 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("y",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ATRIBUTO ::= x 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("x",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ATRIBUTO ::= accionfin 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("accionfin",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ATRIBUTO ::= accionini 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("accionini",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATRIBUTO ::= tipo 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("tipo",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATRIBUTO ::= id 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATT ::= ATRIBUTO igual VALOR 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 
                        RESULT = parser.crearNodo("atributo","",m.linea,m.columna);   
                        RESULT.add(m);
                        RESULT.add(n);
                   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATT",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LIST_ATTS ::= ATT 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LIST_ATTS ::= LIST_ATTS ATT 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIST_ATTSTART ::= LIST_ATTS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTSTART",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LIST_ATTSTART ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTSTART",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IM1 ::= importarA2 explicit div importarF1 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 System.out.println(x.getCadena()); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IM1",10, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IMPORTS ::= IM1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMPORTS ::= IMPORTS IM1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENCABEZADO ::= IMPORTS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ENCABEZADO ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOContenedor ::= CONTENIDOCUERPO menq contenedorF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOContenedor",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOContenedor ::= contenedorF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOContenedor",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOControl ::= CONTENIDOCUERPO menq controlF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOControl",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDOControl ::= controlF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOControl",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOListaDatos ::= CONTENIDOCUERPO menq listadatosF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOListaDatos",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOListaDatos ::= listadatosF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOListaDatos",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIQUETASforma1 ::= contenedorA2 LIST_ATTSTART explicit CONTENIDOContenedor 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ETIQUETASforma1 ::= multimediaA2 LIST_ATTSTART explicit multimediaF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ETIQUETASforma1 ::= enviarA2 LIST_ATTSTART explicit enviarF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ETIQUETASforma1 ::= listadatosA2 LIST_ATTSTART explicit CONTENIDOListaDatos 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ETIQUETASforma1 ::= defectoA2 LIST_ATTSTART explicit defectoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ETIQUETASforma1 ::= datoA2 LIST_ATTSTART explicit datoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ETIQUETASforma1 ::= controlA2 LIST_ATTSTART explicit CONTENIDOControl 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ETIQUETASforma1 ::= textoA2 LIST_ATTSTART explicit textoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETIQUETASforma2 ::= contenedorA1 LIST_ATTSTART explicit CONTENIDOContenedor 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETIQUETASforma2 ::= multimediaA1 LIST_ATTSTART explicit multimediaF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ETIQUETASforma2 ::= enviarA1 LIST_ATTSTART explicit enviarF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ETIQUETASforma2 ::= listadatosA1 LIST_ATTSTART explicit CONTENIDOListaDatos 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ETIQUETASforma2 ::= defectoA1 LIST_ATTSTART explicit defectoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ETIQUETASforma2 ::= datoA1 LIST_ATTSTART explicit datoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ETIQUETASforma2 ::= controlA1 LIST_ATTSTART explicit CONTENIDOControl 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ETIQUETASforma2 ::= textoA1 LIST_ATTSTART explicit textoF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDOCUERPO ::= ETIQUETASforma1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDOCUERPO ::= CONTENIDOCUERPO ETIQUETASforma2 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDOVENTANA ::= div ventanaF1 
            {
              Nodo RESULT =null;
		 System.out.println("VENTANA:"); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOVENTANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOVENTANA ::= CONTENIDOCUERPO menq div ventanaF1 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOVENTANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VENTANAX ::= ventanaA1 LIST_ATTSTART explicit CONTENIDOVENTANA 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAX",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_VENTANAS ::= VENTANAX 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_VENTANAS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_VENTANAS ::= L_VENTANAS VENTANAX 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_VENTANAS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VENTANAS ::= L_VENTANAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VENTANAS ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENCABEZADO VENTANAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGxml$parser.done_parsing();
          return CUP$SintacticoGxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

