
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 21 00:56:06 CST 2019
//----------------------------------------------------

package Analizadores.Gxml;

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 21 00:56:06 CST 2019
  */
public class SintacticoGxml extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoGxml() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\014\006\000\002\006\002\000\002\006\003\000" +
    "\002\005\004\000\002\005\003\000\002\007\006\000\002" +
    "\012\006\000\002\012\004\000\002\013\004\000\002\013" +
    "\003\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\024\003\000" +
    "\002\024\005\000\002\023\003\000\002\023\005\000\002" +
    "\020\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\005\000\002\022\003\000\002\022\005\000\002\010\002" +
    "\000\002\010\003\000\002\011\004\000\002\011\003\000" +
    "\002\015\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\010\002\uffff\004\004\006\uffff\001\002\000" +
    "\004\043\227\001\002\000\006\002\ufffa\006\013\001\002" +
    "\000\004\002\012\001\002\000\010\002\ufffe\004\004\006" +
    "\ufffe\001\002\000\010\002\ufffc\004\ufffc\006\ufffc\001\002" +
    "\000\010\002\ufffd\004\ufffd\006\ufffd\001\002\000\004\002" +
    "\001\001\002\000\056\013\022\014\021\015\035\016\026" +
    "\017\020\020\046\021\045\022\040\023\031\024\030\025" +
    "\044\026\023\027\047\030\027\031\024\032\037\033\025" +
    "\034\042\035\036\036\034\043\uffd5\101\050\001\002\000" +
    "\006\002\ufff7\006\ufff7\001\002\000\006\002\ufff9\006\013" +
    "\001\002\000\004\002\000\001\002\000\006\002\ufff8\006" +
    "\ufff8\001\002\000\004\046\uffc9\001\002\000\004\046\uffc7" +
    "\001\002\000\004\046\uffcf\001\002\000\004\046\uffc2\001" +
    "\002\000\004\046\uffbf\001\002\000\004\046\uffcd\001\002" +
    "\000\004\046\uffca\001\002\000\004\046\uffc0\001\002\000" +
    "\004\046\uffcb\001\002\000\004\046\uffcc\001\002\000\056" +
    "\013\022\014\021\015\035\016\026\017\020\020\046\021" +
    "\045\022\040\023\031\024\030\025\044\026\023\027\047" +
    "\030\027\031\024\032\037\033\025\034\042\035\036\036" +
    "\034\043\uffd4\101\050\001\002\000\004\043\060\001\002" +
    "\000\004\046\uffbc\001\002\000\004\046\uffd0\001\002\000" +
    "\004\046\uffbd\001\002\000\004\046\uffce\001\002\000\004" +
    "\046\uffc4\001\002\000\056\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\043\uffd2\101\uffd2\001\002" +
    "\000\004\046\uffbe\001\002\000\004\046\051\001\002\000" +
    "\004\046\uffc3\001\002\000\004\046\uffc5\001\002\000\004" +
    "\046\uffc6\001\002\000\004\046\uffc1\001\002\000\004\046" +
    "\uffc8\001\002\000\014\045\053\076\056\077\057\100\052" +
    "\102\055\001\002\000\056\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\043\uffb8\101\uffb8\001\002" +
    "\000\056\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\043\uffbb\101\uffbb\001\002\000\056\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\043" +
    "\uffd1\101\uffd1\001\002\000\056\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\043\uffb7\101\uffb7\001" +
    "\002\000\056\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\043\uffba\101\uffba\001\002\000\056\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\043\uffb9\101\uffb9\001\002\000\026\011\074\044\061\052" +
    "\067\055\073\060\063\063\075\066\062\071\065\074\072" +
    "\104\064\001\002\000\004\007\225\001\002\000\056\013" +
    "\022\014\021\015\035\016\026\017\020\020\046\021\045" +
    "\022\040\023\031\024\030\025\044\026\023\027\047\030" +
    "\027\031\024\032\037\033\025\034\042\035\036\036\034" +
    "\043\uffd5\101\050\001\002\000\056\013\022\014\021\015" +
    "\035\016\026\017\020\020\046\021\045\022\040\023\031" +
    "\024\030\025\044\026\023\027\047\030\027\031\024\032" +
    "\037\033\025\034\042\035\036\036\034\043\uffd5\101\050" +
    "\001\002\000\056\013\022\014\021\015\035\016\026\017" +
    "\020\020\046\021\045\022\040\023\031\024\030\025\044" +
    "\026\023\027\047\030\027\031\024\032\037\033\025\034" +
    "\042\035\036\036\034\043\uffd5\101\050\001\002\000\056" +
    "\013\022\014\021\015\035\016\026\017\020\020\046\021" +
    "\045\022\040\023\031\024\030\025\044\026\023\027\047" +
    "\030\027\031\024\032\037\033\025\034\042\035\036\036" +
    "\034\043\uffd5\101\050\001\002\000\006\002\ufff6\006\ufff6" +
    "\001\002\000\056\013\022\014\021\015\035\016\026\017" +
    "\020\020\046\021\045\022\040\023\031\024\030\025\044" +
    "\026\023\027\047\030\027\031\024\032\037\033\025\034" +
    "\042\035\036\036\034\043\uffd5\101\050\001\002\000\026" +
    "\010\ufff2\047\ufff2\051\ufff2\054\ufff2\057\ufff2\062\ufff2\065" +
    "\ufff2\070\ufff2\073\ufff2\103\ufff2\001\002\000\026\010\117" +
    "\047\203\051\114\054\116\057\110\062\120\065\106\070" +
    "\112\073\115\103\111\001\002\000\056\013\022\014\021" +
    "\015\035\016\026\017\020\020\046\021\045\022\040\023" +
    "\031\024\030\025\044\026\023\027\047\030\027\031\024" +
    "\032\037\033\025\034\042\035\036\036\034\043\uffd5\101" +
    "\050\001\002\000\056\013\022\014\021\015\035\016\026" +
    "\017\020\020\046\021\045\022\040\023\031\024\030\025" +
    "\044\026\023\027\047\030\027\031\024\032\037\033\025" +
    "\034\042\035\036\036\034\043\uffd5\101\050\001\002\000" +
    "\056\013\022\014\021\015\035\016\026\017\020\020\046" +
    "\021\045\022\040\023\031\024\030\025\044\026\023\027" +
    "\047\030\027\031\024\032\037\033\025\034\042\035\036" +
    "\036\034\043\uffd5\101\050\001\002\000\056\013\022\014" +
    "\021\015\035\016\026\017\020\020\046\021\045\022\040" +
    "\023\031\024\030\025\044\026\023\027\047\030\027\031" +
    "\024\032\037\033\025\034\042\035\036\036\034\043\uffd5" +
    "\101\050\001\002\000\004\043\077\001\002\000\004\064" +
    "\100\001\002\000\026\010\uffe5\047\uffe5\051\uffe5\054\uffe5" +
    "\057\uffe5\062\uffe5\065\uffe5\070\uffe5\073\uffe5\103\uffe5\001" +
    "\002\000\004\043\102\001\002\000\026\011\074\012\103" +
    "\052\067\055\073\060\063\063\075\066\062\071\065\074" +
    "\072\104\064\001\002\000\026\010\uffd7\047\uffd7\051\uffd7" +
    "\054\uffd7\057\uffd7\062\uffd7\065\uffd7\070\uffd7\073\uffd7\103" +
    "\uffd7\001\002\000\026\010\uffe0\047\uffe0\051\uffe0\054\uffe0" +
    "\057\uffe0\062\uffe0\065\uffe0\070\uffe0\073\uffe0\103\uffe0\001" +
    "\002\000\026\010\117\047\107\051\114\054\116\057\110" +
    "\062\120\065\106\070\112\073\115\103\111\001\002\000" +
    "\056\013\022\014\021\015\035\016\026\017\020\020\046" +
    "\021\045\022\040\023\031\024\030\025\044\026\023\027" +
    "\047\030\027\031\024\032\037\033\025\034\042\035\036" +
    "\036\034\043\uffd5\101\050\001\002\000\004\012\165\001" +
    "\002\000\056\013\022\014\021\015\035\016\026\017\020" +
    "\020\046\021\045\022\040\023\031\024\030\025\044\026" +
    "\023\027\047\030\027\031\024\032\037\033\025\034\042" +
    "\035\036\036\034\043\uffd5\101\050\001\002\000\056\013" +
    "\022\014\021\015\035\016\026\017\020\020\046\021\045" +
    "\022\040\023\031\024\030\025\044\026\023\027\047\030" +
    "\027\031\024\032\037\033\025\034\042\035\036\036\034" +
    "\043\uffd5\101\050\001\002\000\056\013\022\014\021\015" +
    "\035\016\026\017\020\020\046\021\045\022\040\023\031" +
    "\024\030\025\044\026\023\027\047\030\027\031\024\032" +
    "\037\033\025\034\042\035\036\036\034\043\uffd5\101\050" +
    "\001\002\000\026\010\ufff3\047\ufff3\051\ufff3\054\ufff3\057" +
    "\ufff3\062\ufff3\065\ufff3\070\ufff3\073\ufff3\103\ufff3\001\002" +
    "\000\056\013\022\014\021\015\035\016\026\017\020\020" +
    "\046\021\045\022\040\023\031\024\030\025\044\026\023" +
    "\027\047\030\027\031\024\032\037\033\025\034\042\035" +
    "\036\036\034\043\uffd5\101\050\001\002\000\056\013\022" +
    "\014\021\015\035\016\026\017\020\020\046\021\045\022" +
    "\040\023\031\024\030\025\044\026\023\027\047\030\027" +
    "\031\024\032\037\033\025\034\042\035\036\036\034\043" +
    "\uffd5\101\050\001\002\000\056\013\022\014\021\015\035" +
    "\016\026\017\020\020\046\021\045\022\040\023\031\024" +
    "\030\025\044\026\023\027\047\030\027\031\024\032\037" +
    "\033\025\034\042\035\036\036\034\043\uffd5\101\050\001" +
    "\002\000\056\013\022\014\021\015\035\016\026\017\020" +
    "\020\046\021\045\022\040\023\031\024\030\025\044\026" +
    "\023\027\047\030\027\031\024\032\037\033\025\034\042" +
    "\035\036\036\034\043\uffd5\101\050\001\002\000\056\013" +
    "\022\014\021\015\035\016\026\017\020\020\046\021\045" +
    "\022\040\023\031\024\030\025\044\026\023\027\047\030" +
    "\027\031\024\032\037\033\025\034\042\035\036\036\034" +
    "\043\uffd5\101\050\001\002\000\004\043\122\001\002\000" +
    "\004\064\123\001\002\000\026\010\uffee\047\uffee\051\uffee" +
    "\054\uffee\057\uffee\062\uffee\065\uffee\070\uffee\073\uffee\103" +
    "\uffee\001\002\000\004\043\125\001\002\000\026\011\074" +
    "\012\103\052\067\055\073\060\063\063\075\066\062\071" +
    "\065\074\072\104\064\001\002\000\026\010\uffe9\047\uffe9" +
    "\051\uffe9\054\uffe9\057\uffe9\062\uffe9\065\uffe9\070\uffe9\073" +
    "\uffe9\103\uffe9\001\002\000\004\043\130\001\002\000\026" +
    "\011\074\052\067\055\073\056\132\060\063\063\075\066" +
    "\062\071\065\074\072\104\064\001\002\000\026\010\ufff0" +
    "\047\ufff0\051\ufff0\054\ufff0\057\ufff0\062\ufff0\065\ufff0\070" +
    "\ufff0\073\ufff0\103\ufff0\001\002\000\026\010\uffd9\047\uffd9" +
    "\051\uffd9\054\uffd9\057\uffd9\062\uffd9\065\uffd9\070\uffd9\073" +
    "\uffd9\103\uffd9\001\002\000\026\010\117\047\134\051\114" +
    "\054\116\057\110\062\120\065\106\070\112\073\115\103" +
    "\111\001\002\000\004\056\135\001\002\000\026\010\uffd8" +
    "\047\uffd8\051\uffd8\054\uffd8\057\uffd8\062\uffd8\065\uffd8\070" +
    "\uffd8\073\uffd8\103\uffd8\001\002\000\004\043\137\001\002" +
    "\000\004\075\140\001\002\000\026\010\uffea\047\uffea\051" +
    "\uffea\054\uffea\057\uffea\062\uffea\065\uffea\070\uffea\073\uffea" +
    "\103\uffea\001\002\000\004\043\142\001\002\000\004\053" +
    "\143\001\002\000\026\010\ufff1\047\ufff1\051\ufff1\054\ufff1" +
    "\057\ufff1\062\ufff1\065\ufff1\070\ufff1\073\ufff1\103\ufff1\001" +
    "\002\000\004\043\145\001\002\000\026\011\074\052\067" +
    "\055\073\060\063\063\075\066\062\071\065\072\146\074" +
    "\072\104\064\001\002\000\026\010\uffdf\047\uffdf\051\uffdf" +
    "\054\uffdf\057\uffdf\062\uffdf\065\uffdf\070\uffdf\073\uffdf\103" +
    "\uffdf\001\002\000\026\010\117\047\151\051\114\054\116" +
    "\057\110\062\120\065\106\070\112\073\115\103\111\001" +
    "\002\000\026\010\uffeb\047\uffeb\051\uffeb\054\uffeb\057\uffeb" +
    "\062\uffeb\065\uffeb\070\uffeb\073\uffeb\103\uffeb\001\002\000" +
    "\004\072\152\001\002\000\026\010\uffde\047\uffde\051\uffde" +
    "\054\uffde\057\uffde\062\uffde\065\uffde\070\uffde\073\uffde\103" +
    "\uffde\001\002\000\004\043\154\001\002\000\026\011\074" +
    "\052\067\055\073\060\063\063\075\066\062\071\065\074" +
    "\072\104\064\105\156\001\002\000\026\010\uffed\047\uffed" +
    "\051\uffed\054\uffed\057\uffed\062\uffed\065\uffed\070\uffed\073" +
    "\uffed\103\uffed\001\002\000\026\010\uffdd\047\uffdd\051\uffdd" +
    "\054\uffdd\057\uffdd\062\uffdd\065\uffdd\070\uffdd\073\uffdd\103" +
    "\uffdd\001\002\000\026\010\117\047\160\051\114\054\116" +
    "\057\110\062\120\065\106\070\112\073\115\103\111\001" +
    "\002\000\004\105\161\001\002\000\026\010\uffdc\047\uffdc" +
    "\051\uffdc\054\uffdc\057\uffdc\062\uffdc\065\uffdc\070\uffdc\073" +
    "\uffdc\103\uffdc\001\002\000\004\043\163\001\002\000\004" +
    "\061\164\001\002\000\026\010\uffef\047\uffef\051\uffef\054" +
    "\uffef\057\uffef\062\uffef\065\uffef\070\uffef\073\uffef\103\uffef" +
    "\001\002\000\026\010\uffd6\047\uffd6\051\uffd6\054\uffd6\057" +
    "\uffd6\062\uffd6\065\uffd6\070\uffd6\073\uffd6\103\uffd6\001\002" +
    "\000\004\043\167\001\002\000\026\011\074\052\067\055" +
    "\073\060\063\063\075\066\062\067\170\071\065\074\072" +
    "\104\064\001\002\000\026\010\uffdb\047\uffdb\051\uffdb\054" +
    "\uffdb\057\uffdb\062\uffdb\065\uffdb\070\uffdb\073\uffdb\103\uffdb" +
    "\001\002\000\026\010\uffec\047\uffec\051\uffec\054\uffec\057" +
    "\uffec\062\uffec\065\uffec\070\uffec\073\uffec\103\uffec\001\002" +
    "\000\026\010\117\047\173\051\114\054\116\057\110\062" +
    "\120\065\106\070\112\073\115\103\111\001\002\000\004" +
    "\067\174\001\002\000\026\010\uffda\047\uffda\051\uffda\054" +
    "\uffda\057\uffda\062\uffda\065\uffda\070\uffda\073\uffda\103\uffda" +
    "\001\002\000\004\043\176\001\002\000\026\011\074\052" +
    "\067\055\073\056\132\060\063\063\075\066\062\071\065" +
    "\074\072\104\064\001\002\000\026\010\uffe7\047\uffe7\051" +
    "\uffe7\054\uffe7\057\uffe7\062\uffe7\065\uffe7\070\uffe7\073\uffe7" +
    "\103\uffe7\001\002\000\004\043\201\001\002\000\004\075" +
    "\202\001\002\000\026\010\uffe1\047\uffe1\051\uffe1\054\uffe1" +
    "\057\uffe1\062\uffe1\065\uffe1\070\uffe1\073\uffe1\103\uffe1\001" +
    "\002\000\004\044\204\001\002\000\004\007\205\001\002" +
    "\000\006\002\ufff5\006\ufff5\001\002\000\004\043\207\001" +
    "\002\000\004\053\210\001\002\000\026\010\uffe8\047\uffe8" +
    "\051\uffe8\054\uffe8\057\uffe8\062\uffe8\065\uffe8\070\uffe8\073" +
    "\uffe8\103\uffe8\001\002\000\004\043\212\001\002\000\026" +
    "\011\074\052\067\055\073\060\063\063\075\066\062\071" +
    "\065\072\146\074\072\104\064\001\002\000\026\010\uffe2" +
    "\047\uffe2\051\uffe2\054\uffe2\057\uffe2\062\uffe2\065\uffe2\070" +
    "\uffe2\073\uffe2\103\uffe2\001\002\000\004\043\215\001\002" +
    "\000\026\011\074\052\067\055\073\060\063\063\075\066" +
    "\062\071\065\074\072\104\064\105\156\001\002\000\026" +
    "\010\uffe4\047\uffe4\051\uffe4\054\uffe4\057\uffe4\062\uffe4\065" +
    "\uffe4\070\uffe4\073\uffe4\103\uffe4\001\002\000\004\043\220" +
    "\001\002\000\004\061\221\001\002\000\026\010\uffe6\047" +
    "\uffe6\051\uffe6\054\uffe6\057\uffe6\062\uffe6\065\uffe6\070\uffe6" +
    "\073\uffe6\103\uffe6\001\002\000\004\043\223\001\002\000" +
    "\026\011\074\052\067\055\073\060\063\063\075\066\062" +
    "\067\170\071\065\074\072\104\064\001\002\000\026\010" +
    "\uffe3\047\uffe3\051\uffe3\054\uffe3\057\uffe3\062\uffe3\065\uffe3" +
    "\070\uffe3\073\uffe3\103\uffe3\001\002\000\006\002\ufff4\006" +
    "\ufff4\001\002\000\056\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\043\uffd3\101\uffd3\001\002\000" +
    "\004\044\230\001\002\000\004\005\231\001\002\000\010" +
    "\002\ufffb\004\ufffb\006\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\012\002\005\003\004\004\006\014\007\001" +
    "\001\000\002\001\001\000\010\005\014\006\015\007\013" +
    "\001\001\000\002\001\001\000\004\014\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\032\011\031\015\040\026\042\001\001\000\002\001" +
    "\001\000\004\007\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\225\026\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\065\013\070\016" +
    "\067\001\001\000\002\001\001\000\012\010\221\011\031" +
    "\015\040\026\042\001\001\000\012\010\216\011\031\015" +
    "\040\026\042\001\001\000\012\010\213\011\031\015\040" +
    "\026\042\001\001\000\012\010\210\011\031\015\040\026" +
    "\042\001\001\000\002\001\001\000\012\010\205\011\031" +
    "\015\040\026\042\001\001\000\002\001\001\000\004\017" +
    "\112\001\001\000\012\010\177\011\031\015\040\026\042" +
    "\001\001\000\012\010\174\011\031\015\040\026\042\001" +
    "\001\000\012\010\100\011\031\015\040\026\042\001\001" +
    "\000\012\010\075\011\031\015\040\026\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\104\016\067\022\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\112\001\001" +
    "\000\012\010\165\011\031\015\040\026\042\001\001\000" +
    "\002\001\001\000\012\010\161\011\031\015\040\026\042" +
    "\001\001\000\012\010\152\011\031\015\040\026\042\001" +
    "\001\000\012\010\143\011\031\015\040\026\042\001\001" +
    "\000\002\001\001\000\012\010\140\011\031\015\040\026" +
    "\042\001\001\000\012\010\135\011\031\015\040\026\042" +
    "\001\001\000\012\010\126\011\031\015\040\026\042\001" +
    "\001\000\012\010\123\011\031\015\040\026\042\001\001" +
    "\000\012\010\120\011\031\015\040\026\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\104\016\067\022\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\132\016\067" +
    "\021\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\146\016\067\024\147\001\001\000" +
    "\002\001\001\000\004\017\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\156\016\067\023\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\171\016\067\020\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\132" +
    "\016\067\021\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\146\016\067\024\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\156\016\067\023\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\171\016\067" +
    "\020\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Este metodo retorna la RAIZ del arbol  generado 
     **/ 
    
    public Nodo getRoot(){
        return action_obj.root;
    }
    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoGxml$actions {


    //se declaran variables globales etc.
        public int Index=1;
        public Nodo root = new Nodo();


  private final SintacticoGxml parser;

  /** Constructor */
  CUP$SintacticoGxml$actions(SintacticoGxml parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGxml$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALOR ::= event 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("event",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALOR ::= bool_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("bool_literal",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALOR ::= double_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("double_literal",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALOR ::= int_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("int_literal",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALOR ::= string_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("string_literal",m.getCadena().substring(1, m.getCadena().length()-1),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ATRIBUTO ::= autorepro 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("autorepro",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATRIBUTO ::= path 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("path",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ATRIBUTO ::= referencia 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("referencia",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ATRIBUTO ::= accion 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("accion",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ATRIBUTO ::= minimo 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("minimo",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ATRIBUTO ::= maximo 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("maximo",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATRIBUTO ::= cursiva 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("cursiva",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATRIBUTO ::= negrita 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("negrita",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ATRIBUTO ::= color 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("color",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ATRIBUTO ::= tam 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("tam",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATRIBUTO ::= fuente 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("fuente",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATRIBUTO ::= nombre 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("nombre",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATRIBUTO ::= borde 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("borde",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATRIBUTO ::= ancho 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("ancho",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATRIBUTO ::= alto 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("alto",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIBUTO ::= y 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("y",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUTO ::= x 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("x",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUTO ::= accionfin 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("accionfin",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUTO ::= accionini 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("accionini",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ATRIBUTO ::= tipo 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("tipo",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ATRIBUTO ::= id 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("id",m.getCadena(),m.getLinea(),m.getColumna());  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ATT ::= ATRIBUTO igual VALOR 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 
                        RESULT = parser.crearNodo("atributo","",m.linea,m.columna);   
                        RESULT.add(m);
                        RESULT.add(n);
                   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATT",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LIST_ATTS ::= ATT 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  
                        RESULT = parser.crearNodo("atributos","",m.linea,m.columna); 
                        RESULT.add(m); 
                  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LIST_ATTS ::= LIST_ATTS ATT 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                        m.add(n); RESULT = m;
                  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LIST_ATTSTART ::= LIST_ATTS 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = m; 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTSTART",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LIST_ATTSTART ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("atributos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTSTART",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTENIDOContenedor ::= CONTENIDOCUERPO menq contenedorF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOContenedor",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTENIDOContenedor ::= contenedorF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOContenedor",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTENIDOControl ::= CONTENIDOCUERPO menq controlF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOControl",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTENIDOControl ::= controlF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOControl",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTENIDOListaDatos ::= CONTENIDOCUERPO menq listadatosF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOListaDatos",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTENIDOListaDatos ::= listadatosF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOListaDatos",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDOBoton ::= CONTENIDOCUERPO menq botonF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOBoton",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOBoton ::= botonF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOBoton",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOEnviar ::= CONTENIDOCUERPO menq enviarF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOEnviar",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOEnviar ::= enviarF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOEnviar",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ETIQUETASforma1 ::= contenedorA2 LIST_ATTSTART explicit CONTENIDOContenedor 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ETIQUETASforma1 ::= multimediaA2 LIST_ATTSTART explicit multimediaF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ETIQUETASforma1 ::= enviarA2 LIST_ATTSTART explicit CONTENIDOEnviar 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ETIQUETASforma1 ::= listadatosA2 LIST_ATTSTART explicit CONTENIDOListaDatos 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ETIQUETASforma1 ::= botonA2 LIST_ATTSTART explicit CONTENIDOBoton 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ETIQUETASforma1 ::= defectoA2 LIST_ATTSTART explicit defectoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ETIQUETASforma1 ::= datoA2 LIST_ATTSTART explicit datoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIQUETASforma1 ::= controlA2 LIST_ATTSTART explicit CONTENIDOControl 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ETIQUETASforma1 ::= textoA2 LIST_ATTSTART explicit textoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ETIQUETASforma2 ::= contenedorA1 LIST_ATTSTART explicit CONTENIDOContenedor 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ETIQUETASforma2 ::= multimediaA1 LIST_ATTSTART explicit multimediaF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ETIQUETASforma2 ::= enviarA1 LIST_ATTSTART explicit CONTENIDOEnviar 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ETIQUETASforma2 ::= listadatosA1 LIST_ATTSTART explicit CONTENIDOListaDatos 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ETIQUETASforma2 ::= botonA1 LIST_ATTSTART explicit CONTENIDOBoton 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ETIQUETASforma2 ::= defectoA1 LIST_ATTSTART explicit defectoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETIQUETASforma2 ::= datoA1 LIST_ATTSTART explicit datoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETIQUETASforma2 ::= controlA1 LIST_ATTSTART explicit CONTENIDOControl 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ETIQUETASforma2 ::= textoA1 LIST_ATTSTART explicit textoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDOCUERPO ::= ETIQUETASforma1 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                        RESULT = parser.crearNodo("cuerpos","",h.linea,h.columna);
                        RESULT.add(h);
                   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDOCUERPO ::= CONTENIDOCUERPO ETIQUETASforma2 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                        r.add(h);   RESULT = r;
                   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDOVENTANA ::= div ventanaF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOVENTANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDOVENTANA ::= CONTENIDOCUERPO menq div ventanaF1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		RESULT = r; 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOVENTANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VENTANAX ::= ventanaA1 LIST_ATTSTART explicit CONTENIDOVENTANA 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token h2 = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    RESULT = parser.crearNodo("ventana","",m.getLinea(),m.getColumna());
                    RESULT.add(h1);
                    RESULT.add(parser.crearNodo("explicit",h2.getCadena(),h2.getLinea(),h2.getColumna()));
                    RESULT.add(h3);
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAX",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_VENTANAS ::= VENTANAX 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    RESULT = parser.crearNodo("ventanas","",h.linea,h.columna);
                    RESULT.add(h);
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_VENTANAS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_VENTANAS ::= L_VENTANAS VENTANAX 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    r.add(h);
                    RESULT = r;
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_VENTANAS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VENTANAS ::= L_VENTANAS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT =r;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VENTANAS ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("ventanas","",0,0);    
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IM1 ::= importarA2 explicit div importarF1 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 
                    RESULT = parser.crearNodo("import",x.getCadena(),x.getLinea(),x.getColumna());
                
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IM1",10, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= IM1 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    RESULT = parser.crearNodo("imports","",h.linea,h.columna);
                    RESULT.add(h);
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= IMPORTS IM1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    r.add(h);
                    RESULT = r;
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENCABEZADO ::= IMPORTS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		   RESULT = r;   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENCABEZADO ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("imports","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENCABEZADO VENTANAS 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                root = parser.crearNodo("raiz","",h1.linea,h1.columna);  
                root.add(h1);
                root.add(h2);
          
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGxml$parser.done_parsing();
          return CUP$SintacticoGxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

