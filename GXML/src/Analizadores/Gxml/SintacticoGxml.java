
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 20 07:05:22 CST 2019
//----------------------------------------------------

package Analizadores.Gxml;

import java_cup.runtime.*;
import java.util.*;
import Estructuras.Nodo;
import INTERFAZ.Template;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 20 07:05:22 CST 2019
  */
public class SintacticoGxml extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoGxml() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\014\006\000\002\006\002\000\002\006\003\000" +
    "\002\005\004\000\002\005\003\000\002\007\006\000\002" +
    "\007\003\000\002\012\006\000\002\012\004\000\002\013" +
    "\004\000\002\013\003\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\017\003\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\016\006\000\002\016\003\000\002\024\003\000\002" +
    "\024\005\000\002\023\003\000\002\023\005\000\002\020" +
    "\003\000\002\020\005\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\010\002\000" +
    "\002\010\003\000\002\011\004\000\002\011\003\000\002" +
    "\015\005\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\012\002\uffff\003\uffff\004\004\006\uffff\001" +
    "\002\000\004\043\234\001\002\000\010\002\ufffa\003\014" +
    "\006\013\001\002\000\004\002\012\001\002\000\012\002" +
    "\ufffe\003\ufffe\004\004\006\ufffe\001\002\000\012\002\ufffc" +
    "\003\ufffc\004\ufffc\006\ufffc\001\002\000\012\002\ufffd\003" +
    "\ufffd\004\ufffd\006\ufffd\001\002\000\004\002\001\001\002" +
    "\000\060\003\042\013\023\014\022\015\037\016\027\017" +
    "\021\020\050\021\047\022\041\023\032\024\031\025\046" +
    "\026\024\027\051\030\030\031\025\032\040\033\026\034" +
    "\045\035\036\036\035\043\uffd2\101\052\001\002\000\010" +
    "\002\ufff5\003\ufff5\006\ufff5\001\002\000\010\002\ufff7\003" +
    "\ufff7\006\ufff7\001\002\000\010\002\ufff9\003\014\006\013" +
    "\001\002\000\004\002\000\001\002\000\010\002\ufff8\003" +
    "\ufff8\006\ufff8\001\002\000\004\046\uffc6\001\002\000\004" +
    "\046\uffc4\001\002\000\004\046\uffcc\001\002\000\004\046" +
    "\uffbf\001\002\000\004\046\uffbc\001\002\000\004\046\uffca" +
    "\001\002\000\004\046\uffc7\001\002\000\004\046\uffbd\001" +
    "\002\000\004\046\uffc8\001\002\000\004\046\uffc9\001\002" +
    "\000\060\003\042\013\023\014\022\015\037\016\027\017" +
    "\021\020\050\021\047\022\041\023\032\024\031\025\046" +
    "\026\024\027\051\030\030\031\025\032\040\033\026\034" +
    "\045\035\036\036\035\043\uffd1\101\052\001\002\000\004" +
    "\043\063\001\002\000\004\046\uffb9\001\002\000\004\046" +
    "\uffba\001\002\000\004\046\uffcd\001\002\000\004\046\uffcb" +
    "\001\002\000\004\046\uffc1\001\002\000\004\046\uffb8\001" +
    "\002\000\060\003\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\043\uffcf\101\uffcf\001\002\000" +
    "\004\046\053\001\002\000\004\046\uffbb\001\002\000\004" +
    "\046\uffc0\001\002\000\004\046\uffc2\001\002\000\004\046" +
    "\uffc3\001\002\000\004\046\uffbe\001\002\000\004\046\uffc5" +
    "\001\002\000\016\003\055\045\057\076\061\077\062\100" +
    "\054\102\060\001\002\000\060\003\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\043\uffb4\101" +
    "\uffb4\001\002\000\060\003\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\043\uffb2\101\uffb2\001" +
    "\002\000\060\003\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\043\uffce\101\uffce\001\002\000" +
    "\060\003\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\043\uffb7\101\uffb7\001\002\000\060\003" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\043\uffb3\101\uffb3\001\002\000\060\003\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\043\uffb6\101\uffb6\001\002\000\060\003\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\043\uffb5" +
    "\101\uffb5\001\002\000\030\003\074\011\077\044\064\052" +
    "\072\055\100\060\066\063\101\066\065\071\067\074\076" +
    "\104\070\001\002\000\004\007\232\001\002\000\060\003" +
    "\042\013\023\014\022\015\037\016\027\017\021\020\050" +
    "\021\047\022\041\023\032\024\031\025\046\026\024\027" +
    "\051\030\030\031\025\032\040\033\026\034\045\035\036" +
    "\036\035\043\uffd2\101\052\001\002\000\060\003\042\013" +
    "\023\014\022\015\037\016\027\017\021\020\050\021\047" +
    "\022\041\023\032\024\031\025\046\026\024\027\051\030" +
    "\030\031\025\032\040\033\026\034\045\035\036\036\035" +
    "\043\uffd2\101\052\001\002\000\060\003\042\013\023\014" +
    "\022\015\037\016\027\017\021\020\050\021\047\022\041" +
    "\023\032\024\031\025\046\026\024\027\051\030\030\031" +
    "\025\032\040\033\026\034\045\035\036\036\035\043\uffd2" +
    "\101\052\001\002\000\060\003\042\013\023\014\022\015" +
    "\037\016\027\017\021\020\050\021\047\022\041\023\032" +
    "\024\031\025\046\026\024\027\051\030\030\031\025\032" +
    "\040\033\026\034\045\035\036\036\035\043\uffd2\101\052" +
    "\001\002\000\010\002\ufff6\003\ufff6\006\ufff6\001\002\000" +
    "\060\003\042\013\023\014\022\015\037\016\027\017\021" +
    "\020\050\021\047\022\041\023\032\024\031\025\046\026" +
    "\024\027\051\030\030\031\025\032\040\033\026\034\045" +
    "\035\036\036\035\043\uffd2\101\052\001\002\000\030\003" +
    "\ufff1\010\ufff1\047\ufff1\051\ufff1\054\ufff1\057\ufff1\062\ufff1" +
    "\065\ufff1\070\ufff1\073\ufff1\103\ufff1\001\002\000\030\003" +
    "\uffdd\010\uffdd\047\uffdd\051\uffdd\054\uffdd\057\uffdd\062\uffdd" +
    "\065\uffdd\070\uffdd\073\uffdd\103\uffdd\001\002\000\030\003" +
    "\121\010\124\047\210\051\120\054\123\057\114\062\125" +
    "\065\112\070\115\073\122\103\116\001\002\000\060\003" +
    "\042\013\023\014\022\015\037\016\027\017\021\020\050" +
    "\021\047\022\041\023\032\024\031\025\046\026\024\027" +
    "\051\030\030\031\025\032\040\033\026\034\045\035\036" +
    "\036\035\043\uffd2\101\052\001\002\000\060\003\042\013" +
    "\023\014\022\015\037\016\027\017\021\020\050\021\047" +
    "\022\041\023\032\024\031\025\046\026\024\027\051\030" +
    "\030\031\025\032\040\033\026\034\045\035\036\036\035" +
    "\043\uffd2\101\052\001\002\000\060\003\042\013\023\014" +
    "\022\015\037\016\027\017\021\020\050\021\047\022\041" +
    "\023\032\024\031\025\046\026\024\027\051\030\030\031" +
    "\025\032\040\033\026\034\045\035\036\036\035\043\uffd2" +
    "\101\052\001\002\000\060\003\042\013\023\014\022\015" +
    "\037\016\027\017\021\020\050\021\047\022\041\023\032" +
    "\024\031\025\046\026\024\027\051\030\030\031\025\032" +
    "\040\033\026\034\045\035\036\036\035\043\uffd2\101\052" +
    "\001\002\000\004\043\103\001\002\000\004\064\104\001" +
    "\002\000\030\003\uffe3\010\uffe3\047\uffe3\051\uffe3\054\uffe3" +
    "\057\uffe3\062\uffe3\065\uffe3\070\uffe3\073\uffe3\103\uffe3\001" +
    "\002\000\004\043\106\001\002\000\030\003\074\011\077" +
    "\052\072\055\100\056\110\060\066\063\101\066\065\071" +
    "\067\074\076\104\070\001\002\000\030\003\uffe5\010\uffe5" +
    "\047\uffe5\051\uffe5\054\uffe5\057\uffe5\062\uffe5\065\uffe5\070" +
    "\uffe5\073\uffe5\103\uffe5\001\002\000\030\003\uffd6\010\uffd6" +
    "\047\uffd6\051\uffd6\054\uffd6\057\uffd6\062\uffd6\065\uffd6\070" +
    "\uffd6\073\uffd6\103\uffd6\001\002\000\030\003\121\010\124" +
    "\047\113\051\120\054\123\057\114\062\125\065\112\070" +
    "\115\073\122\103\116\001\002\000\060\003\042\013\023" +
    "\014\022\015\037\016\027\017\021\020\050\021\047\022" +
    "\041\023\032\024\031\025\046\026\024\027\051\030\030" +
    "\031\025\032\040\033\026\034\045\035\036\036\035\043" +
    "\uffd2\101\052\001\002\000\004\056\172\001\002\000\060" +
    "\003\042\013\023\014\022\015\037\016\027\017\021\020" +
    "\050\021\047\022\041\023\032\024\031\025\046\026\024" +
    "\027\051\030\030\031\025\032\040\033\026\034\045\035" +
    "\036\036\035\043\uffd2\101\052\001\002\000\060\003\042" +
    "\013\023\014\022\015\037\016\027\017\021\020\050\021" +
    "\047\022\041\023\032\024\031\025\046\026\024\027\051" +
    "\030\030\031\025\032\040\033\026\034\045\035\036\036" +
    "\035\043\uffd2\101\052\001\002\000\060\003\042\013\023" +
    "\014\022\015\037\016\027\017\021\020\050\021\047\022" +
    "\041\023\032\024\031\025\046\026\024\027\051\030\030" +
    "\031\025\032\040\033\026\034\045\035\036\036\035\043" +
    "\uffd2\101\052\001\002\000\030\003\ufff2\010\ufff2\047\ufff2" +
    "\051\ufff2\054\ufff2\057\ufff2\062\ufff2\065\ufff2\070\ufff2\073" +
    "\ufff2\103\ufff2\001\002\000\060\003\042\013\023\014\022" +
    "\015\037\016\027\017\021\020\050\021\047\022\041\023" +
    "\032\024\031\025\046\026\024\027\051\030\030\031\025" +
    "\032\040\033\026\034\045\035\036\036\035\043\uffd2\101" +
    "\052\001\002\000\030\003\uffe7\010\uffe7\047\uffe7\051\uffe7" +
    "\054\uffe7\057\uffe7\062\uffe7\065\uffe7\070\uffe7\073\uffe7\103" +
    "\uffe7\001\002\000\060\003\042\013\023\014\022\015\037" +
    "\016\027\017\021\020\050\021\047\022\041\023\032\024" +
    "\031\025\046\026\024\027\051\030\030\031\025\032\040" +
    "\033\026\034\045\035\036\036\035\043\uffd2\101\052\001" +
    "\002\000\060\003\042\013\023\014\022\015\037\016\027" +
    "\017\021\020\050\021\047\022\041\023\032\024\031\025" +
    "\046\026\024\027\051\030\030\031\025\032\040\033\026" +
    "\034\045\035\036\036\035\043\uffd2\101\052\001\002\000" +
    "\060\003\042\013\023\014\022\015\037\016\027\017\021" +
    "\020\050\021\047\022\041\023\032\024\031\025\046\026" +
    "\024\027\051\030\030\031\025\032\040\033\026\034\045" +
    "\035\036\036\035\043\uffd2\101\052\001\002\000\060\003" +
    "\042\013\023\014\022\015\037\016\027\017\021\020\050" +
    "\021\047\022\041\023\032\024\031\025\046\026\024\027" +
    "\051\030\030\031\025\032\040\033\026\034\045\035\036" +
    "\036\035\043\uffd2\101\052\001\002\000\004\043\127\001" +
    "\002\000\004\064\130\001\002\000\030\003\uffed\010\uffed" +
    "\047\uffed\051\uffed\054\uffed\057\uffed\062\uffed\065\uffed\070" +
    "\uffed\073\uffed\103\uffed\001\002\000\004\043\132\001\002" +
    "\000\030\003\074\011\077\012\133\052\072\055\100\060" +
    "\066\063\101\066\065\071\067\074\076\104\070\001\002" +
    "\000\030\003\uffd4\010\uffd4\047\uffd4\051\uffd4\054\uffd4\057" +
    "\uffd4\062\uffd4\065\uffd4\070\uffd4\073\uffd4\103\uffd4\001\002" +
    "\000\030\003\uffe8\010\uffe8\047\uffe8\051\uffe8\054\uffe8\057" +
    "\uffe8\062\uffe8\065\uffe8\070\uffe8\073\uffe8\103\uffe8\001\002" +
    "\000\030\003\121\010\124\047\136\051\120\054\123\057" +
    "\114\062\125\065\112\070\115\073\122\103\116\001\002" +
    "\000\004\012\137\001\002\000\030\003\uffd3\010\uffd3\047" +
    "\uffd3\051\uffd3\054\uffd3\057\uffd3\062\uffd3\065\uffd3\070\uffd3" +
    "\073\uffd3\103\uffd3\001\002\000\004\043\141\001\002\000" +
    "\030\003\074\011\077\052\072\055\100\056\110\060\066" +
    "\063\101\066\065\071\067\074\076\104\070\001\002\000" +
    "\030\003\uffef\010\uffef\047\uffef\051\uffef\054\uffef\057\uffef" +
    "\062\uffef\065\uffef\070\uffef\073\uffef\103\uffef\001\002\000" +
    "\004\043\144\001\002\000\004\075\145\001\002\000\030" +
    "\003\uffe9\010\uffe9\047\uffe9\051\uffe9\054\uffe9\057\uffe9\062" +
    "\uffe9\065\uffe9\070\uffe9\073\uffe9\103\uffe9\001\002\000\004" +
    "\043\147\001\002\000\004\053\150\001\002\000\030\003" +
    "\ufff0\010\ufff0\047\ufff0\051\ufff0\054\ufff0\057\ufff0\062\ufff0" +
    "\065\ufff0\070\ufff0\073\ufff0\103\ufff0\001\002\000\004\043" +
    "\152\001\002\000\030\003\074\011\077\052\072\055\100" +
    "\060\066\063\101\066\065\071\067\074\076\104\070\105" +
    "\154\001\002\000\030\003\uffec\010\uffec\047\uffec\051\uffec" +
    "\054\uffec\057\uffec\062\uffec\065\uffec\070\uffec\073\uffec\103" +
    "\uffec\001\002\000\030\003\uffda\010\uffda\047\uffda\051\uffda" +
    "\054\uffda\057\uffda\062\uffda\065\uffda\070\uffda\073\uffda\103" +
    "\uffda\001\002\000\030\003\121\010\124\047\156\051\120" +
    "\054\123\057\114\062\125\065\112\070\115\073\122\103" +
    "\116\001\002\000\004\105\157\001\002\000\030\003\uffd9" +
    "\010\uffd9\047\uffd9\051\uffd9\054\uffd9\057\uffd9\062\uffd9\065" +
    "\uffd9\070\uffd9\073\uffd9\103\uffd9\001\002\000\004\043\161" +
    "\001\002\000\030\003\074\011\077\052\072\055\100\060" +
    "\066\063\101\066\065\071\067\072\163\074\076\104\070" +
    "\001\002\000\030\003\121\010\124\047\165\051\120\054" +
    "\123\057\114\062\125\065\112\070\115\073\122\103\116" +
    "\001\002\000\030\003\uffdc\010\uffdc\047\uffdc\051\uffdc\054" +
    "\uffdc\057\uffdc\062\uffdc\065\uffdc\070\uffdc\073\uffdc\103\uffdc" +
    "\001\002\000\030\003\uffea\010\uffea\047\uffea\051\uffea\054" +
    "\uffea\057\uffea\062\uffea\065\uffea\070\uffea\073\uffea\103\uffea" +
    "\001\002\000\004\072\166\001\002\000\030\003\uffdb\010" +
    "\uffdb\047\uffdb\051\uffdb\054\uffdb\057\uffdb\062\uffdb\065\uffdb" +
    "\070\uffdb\073\uffdb\103\uffdb\001\002\000\004\043\170\001" +
    "\002\000\004\061\171\001\002\000\030\003\uffee\010\uffee" +
    "\047\uffee\051\uffee\054\uffee\057\uffee\062\uffee\065\uffee\070" +
    "\uffee\073\uffee\103\uffee\001\002\000\030\003\uffd5\010\uffd5" +
    "\047\uffd5\051\uffd5\054\uffd5\057\uffd5\062\uffd5\065\uffd5\070" +
    "\uffd5\073\uffd5\103\uffd5\001\002\000\004\043\174\001\002" +
    "\000\030\003\074\011\077\052\072\055\100\060\066\063" +
    "\101\066\065\067\175\071\067\074\076\104\070\001\002" +
    "\000\030\003\uffd8\010\uffd8\047\uffd8\051\uffd8\054\uffd8\057" +
    "\uffd8\062\uffd8\065\uffd8\070\uffd8\073\uffd8\103\uffd8\001\002" +
    "\000\030\003\uffeb\010\uffeb\047\uffeb\051\uffeb\054\uffeb\057" +
    "\uffeb\062\uffeb\065\uffeb\070\uffeb\073\uffeb\103\uffeb\001\002" +
    "\000\030\003\121\010\124\047\200\051\120\054\123\057" +
    "\114\062\125\065\112\070\115\073\122\103\116\001\002" +
    "\000\004\067\201\001\002\000\030\003\uffd7\010\uffd7\047" +
    "\uffd7\051\uffd7\054\uffd7\057\uffd7\062\uffd7\065\uffd7\070\uffd7" +
    "\073\uffd7\103\uffd7\001\002\000\004\043\203\001\002\000" +
    "\030\003\074\011\077\012\133\052\072\055\100\060\066" +
    "\063\101\066\065\071\067\074\076\104\070\001\002\000" +
    "\030\003\uffde\010\uffde\047\uffde\051\uffde\054\uffde\057\uffde" +
    "\062\uffde\065\uffde\070\uffde\073\uffde\103\uffde\001\002\000" +
    "\004\043\206\001\002\000\004\075\207\001\002\000\030" +
    "\003\uffdf\010\uffdf\047\uffdf\051\uffdf\054\uffdf\057\uffdf\062" +
    "\uffdf\065\uffdf\070\uffdf\073\uffdf\103\uffdf\001\002\000\004" +
    "\044\211\001\002\000\004\007\212\001\002\000\010\002" +
    "\ufff4\003\ufff4\006\ufff4\001\002\000\004\043\214\001\002" +
    "\000\004\053\215\001\002\000\030\003\uffe6\010\uffe6\047" +
    "\uffe6\051\uffe6\054\uffe6\057\uffe6\062\uffe6\065\uffe6\070\uffe6" +
    "\073\uffe6\103\uffe6\001\002\000\004\043\217\001\002\000" +
    "\030\003\074\011\077\052\072\055\100\060\066\063\101" +
    "\066\065\071\067\074\076\104\070\105\154\001\002\000" +
    "\030\003\uffe2\010\uffe2\047\uffe2\051\uffe2\054\uffe2\057\uffe2" +
    "\062\uffe2\065\uffe2\070\uffe2\073\uffe2\103\uffe2\001\002\000" +
    "\004\043\222\001\002\000\030\003\074\011\077\052\072" +
    "\055\100\060\066\063\101\066\065\071\067\072\163\074" +
    "\076\104\070\001\002\000\030\003\uffe0\010\uffe0\047\uffe0" +
    "\051\uffe0\054\uffe0\057\uffe0\062\uffe0\065\uffe0\070\uffe0\073" +
    "\uffe0\103\uffe0\001\002\000\004\043\225\001\002\000\004" +
    "\061\226\001\002\000\030\003\uffe4\010\uffe4\047\uffe4\051" +
    "\uffe4\054\uffe4\057\uffe4\062\uffe4\065\uffe4\070\uffe4\073\uffe4" +
    "\103\uffe4\001\002\000\004\043\230\001\002\000\030\003" +
    "\074\011\077\052\072\055\100\060\066\063\101\066\065" +
    "\067\175\071\067\074\076\104\070\001\002\000\030\003" +
    "\uffe1\010\uffe1\047\uffe1\051\uffe1\054\uffe1\057\uffe1\062\uffe1" +
    "\065\uffe1\070\uffe1\073\uffe1\103\uffe1\001\002\000\010\002" +
    "\ufff3\003\ufff3\006\ufff3\001\002\000\060\003\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\043" +
    "\uffd0\101\uffd0\001\002\000\004\044\235\001\002\000\004" +
    "\005\236\001\002\000\012\002\ufffb\003\ufffb\004\ufffb\006" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\012\002\005\003\004\004\006\014\007\001" +
    "\001\000\002\001\001\000\010\005\015\006\016\007\014" +
    "\001\001\000\002\001\001\000\004\014\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\033\011\032\015\042\026\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\232\026\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\070\013\074\016\072" +
    "\001\001\000\002\001\001\000\012\010\226\011\032\015" +
    "\042\026\043\001\001\000\012\010\223\011\032\015\042" +
    "\026\043\001\001\000\012\010\220\011\032\015\042\026" +
    "\043\001\001\000\012\010\215\011\032\015\042\026\043" +
    "\001\001\000\002\001\001\000\012\010\212\011\032\015" +
    "\042\026\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\116\001\001\000\012\010\204\011\032\015" +
    "\042\026\043\001\001\000\012\010\201\011\032\015\042" +
    "\026\043\001\001\000\012\010\104\011\032\015\042\026" +
    "\043\001\001\000\012\010\101\011\032\015\042\026\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\110\016\072\021\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\116\001\001\000\012\010\172\011\032\015\042\026\043" +
    "\001\001\000\002\001\001\000\012\010\166\011\032\015" +
    "\042\026\043\001\001\000\012\010\157\011\032\015\042" +
    "\026\043\001\001\000\012\010\150\011\032\015\042\026" +
    "\043\001\001\000\002\001\001\000\012\010\145\011\032" +
    "\015\042\026\043\001\001\000\002\001\001\000\012\010" +
    "\142\011\032\015\042\026\043\001\001\000\012\010\137" +
    "\011\032\015\042\026\043\001\001\000\012\010\130\011" +
    "\032\015\042\026\043\001\001\000\012\010\125\011\032" +
    "\015\042\026\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\134" +
    "\016\072\022\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\110\016\072\021" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\154" +
    "\016\072\023\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\161\016\072\024" +
    "\163\001\001\000\004\017\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\176\016\072\020" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\134\016\072\022\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\154\016\072\023\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\161\016\072\024\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\176\016\072\020\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /**
     * Este metodo recorta un String
     **/ 

    public String recortarString(String cad, int inicio, int fin) {
        try {
            return cad.substring(inicio, fin);
        } catch (Exception e) {
            return "";
        }
    }

    /**
     * Este metodo limpia el explicit
     **/ 

    public String cleanExplicit(String cad) {
        cad = cad.replaceAll("\n", " ");
        cad = cad.replaceAll("\r", " ");
        cad = cad.replaceAll("\t", " ");
        cad = cad.trim();
        return cad;
    }

    /**
     * Este metodo retorna la RAIZ del arbol  generado 
     **/ 
    
    public Nodo getRoot(){
        return action_obj.root;
    }
    /**
     * Método al que se llama para crear un nuevo nodo
     **/ 
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        Template.reporteError_CJS.agregar("Sintactico", action_obj.lineaA+1, action_obj.columnaA, "No se esperaba: " +s.value);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Template.reporteError_CJS.agregar("Sintactico", action_obj.lineaA+1, action_obj.columnaA, "No se esperaba: " +s.value);
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoGxml$actions {


    //se declaran variables globales etc.
        public int Index=1;
        public Nodo root = new Nodo();
        public int lineaA = 0;
        public int columnaA = 0;

  private final SintacticoGxml parser;

  /** Constructor */
  CUP$SintacticoGxml$actions(SintacticoGxml parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGxml$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALOR ::= error 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("#error","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALOR ::= event 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("event",m.getCadena(),m.getLinea(),m.getColumna());                                                  this.lineaA =m.getLinea(); this.columnaA =m.getColumna();   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR ::= bool_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("bool_literal",m.getCadena(),m.getLinea(),m.getColumna());                                           this.lineaA =m.getLinea(); this.columnaA =m.getColumna();   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR ::= double_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("double_literal",m.getCadena(),m.getLinea(),m.getColumna());                                         this.lineaA =m.getLinea(); this.columnaA =m.getColumna();   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALOR ::= int_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("int_literal",m.getCadena(),m.getLinea(),m.getColumna());                                            this.lineaA =m.getLinea(); this.columnaA =m.getColumna();   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALOR ::= string_literal 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("string_literal",m.getCadena().substring(1, m.getCadena().length()-1),m.getLinea(),m.getColumna());  this.lineaA =m.getLinea(); this.columnaA =m.getColumna();   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATRIBUTO ::= error 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("#error","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATRIBUTO ::= autorepro 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATRIBUTO ::= path 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("path",m.getCadena(),m.getLinea(),m.getColumna());         this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ATRIBUTO ::= referencia 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("referencia",m.getCadena(),m.getLinea(),m.getColumna());   this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ATRIBUTO ::= accion 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("accion",m.getCadena(),m.getLinea(),m.getColumna());       this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATRIBUTO ::= minimo 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("minimo",m.getCadena(),m.getLinea(),m.getColumna());       this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ATRIBUTO ::= maximo 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("maximo",m.getCadena(),m.getLinea(),m.getColumna());       this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ATRIBUTO ::= cursiva 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("cursiva",m.getCadena(),m.getLinea(),m.getColumna());      this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ATRIBUTO ::= negrita 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("negrita",m.getCadena(),m.getLinea(),m.getColumna());      this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ATRIBUTO ::= color 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("color",m.getCadena(),m.getLinea(),m.getColumna());        this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATRIBUTO ::= tam 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("tam",m.getCadena(),m.getLinea(),m.getColumna());          this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATRIBUTO ::= fuente 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("fuente",m.getCadena(),m.getLinea(),m.getColumna());       this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ATRIBUTO ::= nombre 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("nombre",m.getCadena(),m.getLinea(),m.getColumna());       this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ATRIBUTO ::= borde 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("borde",m.getCadena(),m.getLinea(),m.getColumna());        this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATRIBUTO ::= ancho 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("ancho",m.getCadena(),m.getLinea(),m.getColumna());        this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATRIBUTO ::= alto 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("alto",m.getCadena(),m.getLinea(),m.getColumna());         this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATRIBUTO ::= y 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("y",m.getCadena(),m.getLinea(),m.getColumna());            this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATRIBUTO ::= x 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo("x",m.getCadena(),m.getLinea(),m.getColumna());            this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATRIBUTO ::= accionfin 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIBUTO ::= accionini 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUTO ::= tipo 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUTO ::= id 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT = parser.crearNodo(m.getCadena(),m.getCadena(),m.getLinea(),m.getColumna());  this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATT ::= ATRIBUTO igual VALOR 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 
                        RESULT = parser.crearNodo("atributo","",m.linea,m.columna);   
                        RESULT.add(m);
                        if(n.nombre.equals("#error"))
                        {
                            n.nombre = "string_literal";
                            Template.reporteError_CJS.agregar("Sintactico", v.getLinea(), v.getColumna(), "Error Sintactico");
                        }
                        RESULT.add(n);
                   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ATT",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LIST_ATTS ::= ATT 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  
                        RESULT = parser.crearNodo("atributos","",m.linea,m.columna); 
                        if(m.nombre.equals("#error"))
                        {
                            Template.reporteError_CJS.agregar("Sintactico", this.lineaA, this.columnaA, "Error Sintactico");  
                        }else
                        {
                            RESULT.add(m); 
                        }
                        
                  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LIST_ATTS ::= LIST_ATTS ATT 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                        if(n.nombre.equals("#error"))
                        {
                            Template.reporteError_CJS.agregar("Sintactico", this.lineaA, this.columnaA, "Error Sintactico");  
                        }else
                        {
                            m.add(n);
                        }
                         
                        RESULT = m;
                  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LIST_ATTSTART ::= LIST_ATTS 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = m; 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTSTART",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LIST_ATTSTART ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("atributos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("LIST_ATTSTART",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTENIDOContenedor ::= CONTENIDOCUERPO menq contenedorF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOContenedor",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTENIDOContenedor ::= contenedorF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOContenedor",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTENIDOControl ::= CONTENIDOCUERPO menq controlF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOControl",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTENIDOControl ::= controlF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOControl",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTENIDOListaDatos ::= CONTENIDOCUERPO menq listadatosF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOListaDatos",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTENIDOListaDatos ::= listadatosF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOListaDatos",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTENIDOBoton ::= CONTENIDOCUERPO menq botonF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOBoton",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTENIDOBoton ::= botonF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOBoton",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTENIDOEnviar ::= CONTENIDOCUERPO menq enviarF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 RESULT = m;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOEnviar",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDOEnviar ::= enviarF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOEnviar",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ETIQUETASforma1 ::= error 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("#error","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ETIQUETASforma1 ::= contenedorA2 LIST_ATTSTART explicit CONTENIDOContenedor 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("contenedor","contenedor",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R);   this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ETIQUETASforma1 ::= multimediaA2 LIST_ATTSTART explicit multimediaF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo("multimedia","multimedia",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna()));                  this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ETIQUETASforma1 ::= enviarA2 LIST_ATTSTART explicit CONTENIDOEnviar 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("enviar","enviar",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R);           this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ETIQUETASforma1 ::= listadatosA2 LIST_ATTSTART explicit CONTENIDOListaDatos 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("listadatos","listadatos",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R);   this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ETIQUETASforma1 ::= botonA2 LIST_ATTSTART explicit CONTENIDOBoton 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("boton","boton",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R);             this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ETIQUETASforma1 ::= defectoA2 LIST_ATTSTART explicit defectoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo("defecto","defecto",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna()));                        this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ETIQUETASforma1 ::= datoA2 LIST_ATTSTART explicit datoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo("dato","dato",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna()));                              this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ETIQUETASforma1 ::= controlA2 LIST_ATTSTART explicit CONTENIDOControl 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 
                        this.lineaA =m.getLinea(); this.columnaA =m.getColumna();
                        RESULT = parser.crearNodo("control","control",m.getLinea(),m.getColumna()); 
                            
                        String cad = e.getCadena();
                        cad = parser.recortarString(cad, 1, cad.length() - 1);
                        cad = parser.cleanExplicit(cad);
                        /*Extra*/
                        Nodo nm = new  Nodo("defecto", "defecto", h.linea, h.columna, h.index);
                        Nodo nv = new  Nodo(cad, cad, h.linea, h.columna, h.index);
                        Nodo atr = new Nodo("atributo","",h.linea, h.columna, h.index);
                        atr.add(nm);
                        atr.add(nv);
                        h.add(atr);
                        /*Extra*/
        
                        RESULT.add(h); 
                        RESULT.add(parser.crearNodo("explicit",cad,e.getLinea(),e.getColumna())); 
                        RESULT.add(R); 
                    
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ETIQUETASforma1 ::= textoA2 LIST_ATTSTART explicit textoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 
                        this.lineaA =m.getLinea(); this.columnaA =m.getColumna();
                        RESULT = parser.crearNodo("texto","texto",m.getLinea(),m.getColumna()); 
   
                        String cad = e.getCadena();
                        cad = parser.recortarString(cad, 1, cad.length() - 1);
                        cad = parser.cleanExplicit(cad);
                        /*Extra*/
                        Nodo nm = new  Nodo("valor", "valor", h.linea, h.columna, h.index);
                        Nodo nv = new  Nodo(cad, cad, h.linea, h.columna, h.index);
                        Nodo atr = new Nodo("atributo","",h.linea, h.columna, h.index);
                        atr.add(nm);
                        atr.add(nv);
                        h.add(atr);
                        /*Extra*/

                        RESULT.add(h); 
                        RESULT.add(parser.crearNodo("explicit",cad,e.getLinea(),e.getColumna())); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma1",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIQUETASforma2 ::= error 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("#error","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ETIQUETASforma2 ::= contenedorA1 LIST_ATTSTART explicit CONTENIDOContenedor 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("contenedor","contenedor",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R);   this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ETIQUETASforma2 ::= multimediaA1 LIST_ATTSTART explicit multimediaF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo("multimedia","multimedia",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna()));                  this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ETIQUETASforma2 ::= enviarA1 LIST_ATTSTART explicit CONTENIDOEnviar 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("enviar","enviar",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R);           this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ETIQUETASforma2 ::= listadatosA1 LIST_ATTSTART explicit CONTENIDOListaDatos 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("listadatos","listadatos",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R);   this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ETIQUETASforma2 ::= botonA1 LIST_ATTSTART explicit CONTENIDOBoton 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 RESULT = parser.crearNodo("boton","boton",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna())); RESULT.add(R);             this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ETIQUETASforma2 ::= defectoA1 LIST_ATTSTART explicit defectoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo("defecto","defecto",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna()));                        this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ETIQUETASforma2 ::= datoA1 LIST_ATTSTART explicit datoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 RESULT = parser.crearNodo("dato","dato",m.getLinea(),m.getColumna()); RESULT.add(h); RESULT.add(parser.crearNodo("explicit",e.getCadena(),e.getLinea(),e.getColumna()));                              this.lineaA =m.getLinea(); this.columnaA =m.getColumna(); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETIQUETASforma2 ::= controlA1 LIST_ATTSTART explicit CONTENIDOControl 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 
                        this.lineaA =m.getLinea(); this.columnaA =m.getColumna();
                        RESULT = parser.crearNodo("control","control",m.getLinea(),m.getColumna()); 

                        String cad = e.getCadena();
                        cad = parser.recortarString(cad, 1, cad.length() - 1);
                        cad = parser.cleanExplicit(cad);

                        /*Extra*/
                        Nodo nm = new  Nodo("defecto", "defecto", h.linea, h.columna, h.index);
                        Nodo nv = new  Nodo(cad, cad, h.linea, h.columna, h.index);
                        Nodo atr = new Nodo("atributo","",h.linea, h.columna, h.index);
                        atr.add(nm);
                        atr.add(nv);
                        h.add(atr);
                        /*Extra*/
        
                        RESULT.add(h); 
                        RESULT.add(parser.crearNodo("explicit",cad,e.getLinea(),e.getColumna())); 
                        RESULT.add(R); 
                    
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETIQUETASforma2 ::= textoA1 LIST_ATTSTART explicit textoF1 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		 
                        this.lineaA =m.getLinea(); this.columnaA =m.getColumna();
                        RESULT = parser.crearNodo("texto","texto",m.getLinea(),m.getColumna()); 
                        
                        String cad = e.getCadena();
                        cad = parser.recortarString(cad, 1, cad.length() - 1);
                        cad = parser.cleanExplicit(cad);
                        /*Extra*/
                        Nodo nm = new  Nodo("valor", "valor", h.linea, h.columna, h.index);
                        Nodo nv = new  Nodo(cad, cad, h.linea, h.columna, h.index);
                        Nodo atr = new Nodo("atributo","",h.linea, h.columna, h.index);
                        atr.add(nm);
                        atr.add(nv);
                        h.add(atr);
                        /*Extra*/

                        RESULT.add(h); 
                        RESULT.add(parser.crearNodo("explicit",cad,e.getLinea(),e.getColumna()));
                     
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ETIQUETASforma2",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDOCUERPO ::= ETIQUETASforma1 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                        RESULT = parser.crearNodo("cuerpos","",h.linea,h.columna);

                        if(h.nombre.equals("#error"))
                        {
                            Template.reporteError_CJS.agregar("Sintactico", this.lineaA, this.columnaA, "Error Sintactico");  
                        }else
                        {
                            RESULT.add(h);
                        }
                   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDOCUERPO ::= CONTENIDOCUERPO ETIQUETASforma2 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                        if(h.nombre.equals("#error"))
                        {
                            Template.reporteError_CJS.agregar("Sintactico", this.lineaA, this.columnaA, "Error Sintactico");  
                        }else
                        {
                            r.add(h);   
                        }
                        RESULT = r;
                   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDOVENTANA ::= div ventanaF1 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("cuerpos","",0,0); 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOVENTANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDOVENTANA ::= CONTENIDOCUERPO menq div ventanaF1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		RESULT = r; 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("CONTENIDOVENTANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VENTANAX ::= error 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("#error","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAX",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VENTANAX ::= ventanaA1 LIST_ATTSTART explicit CONTENIDOVENTANA 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		token h2 = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    RESULT = parser.crearNodo("ventana","",m.getLinea(),m.getColumna());
                    RESULT.add(h1);
                    RESULT.add(parser.crearNodo("explicit",h2.getCadena(),h2.getLinea(),h2.getColumna()));
                    RESULT.add(h3);
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAX",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_VENTANAS ::= VENTANAX 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    RESULT = parser.crearNodo("ventanas","",h.linea,h.columna);
                    if(h.nombre.equals("#error"))
                    {
                        Template.reporteError_CJS.agregar("Sintactico", this.lineaA, this.columnaA, "Error Sintactico");  
                    }else
                    {
                        RESULT.add(h);
                    }
                    
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_VENTANAS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_VENTANAS ::= L_VENTANAS VENTANAX 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    if(h.nombre.equals("#error"))
                    {
                        Template.reporteError_CJS.agregar("Sintactico", this.lineaA, this.columnaA, "Error Sintactico");  
                    }else
                    {
                        r.add(h);
                    }
                    RESULT = r;
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("L_VENTANAS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VENTANAS ::= L_VENTANAS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		  RESULT =r;  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VENTANAS ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("ventanas","",0,0);    
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IM1 ::= importarA2 explicit div importarF1 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		 
                    RESULT = parser.crearNodo("import",x.getCadena(),x.getLinea(),x.getColumna());
                
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IM1",10, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= IM1 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    RESULT = parser.crearNodo("imports","",h.linea,h.columna);
                    RESULT.add(h);
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= IMPORTS IM1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                    r.add(h);
                    RESULT = r;
               
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENCABEZADO ::= IMPORTS 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		   RESULT = r;   
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENCABEZADO ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("imports","",0,0);  
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENCABEZADO VENTANAS 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Nodo h2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
                root = parser.crearNodo("raiz","",h1.linea,h1.columna);  
                root.add(h1);
                root.add(h2);
          
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGxml$parser.done_parsing();
          return CUP$SintacticoGxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

